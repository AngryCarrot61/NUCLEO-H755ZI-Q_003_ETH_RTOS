
NUCLEO-H755ZI-Q_003_ETH_RTOS_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001407c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fd4  0801431c  0801431c  0001531c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080172f0  080172f0  00019090  2**0
                  CONTENTS
  4 .ARM          00000008  080172f0  080172f0  000182f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080172f8  080172f8  00019090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080172f8  080172f8  000182f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080172fc  080172fc  000182fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  24000000  08017300  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000085a4  24000090  08017390  00019090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24008634  08017390  00019634  2**0
                  ALLOC
 11 .lwip_sec     000419d0  30000000  30000000  0001a000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00019090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f77b  00000000  00000000  000190be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007331  00000000  00000000  00048839  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002328  00000000  00000000  0004fb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bac  00000000  00000000  00051e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0004812d  00000000  00000000  00053a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000366c9  00000000  00000000  0009bb71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a14f6  00000000  00000000  000d223a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00273730  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099c0  00000000  00000000  00273774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0027d134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000090 	.word	0x24000090
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014304 	.word	0x08014304

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000094 	.word	0x24000094
 80002dc:	08014304 	.word	0x08014304

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b3f      	ldr	r3, [pc, #252]	@ (8000484 <SystemInit+0x104>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a3e      	ldr	r2, [pc, #248]	@ (8000484 <SystemInit+0x104>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b3b      	ldr	r3, [pc, #236]	@ (8000484 <SystemInit+0x104>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a3a      	ldr	r2, [pc, #232]	@ (8000484 <SystemInit+0x104>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003a0:	4b39      	ldr	r3, [pc, #228]	@ (8000488 <SystemInit+0x108>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f003 030f 	and.w	r3, r3, #15
 80003a8:	2b06      	cmp	r3, #6
 80003aa:	d807      	bhi.n	80003bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003ac:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <SystemInit+0x108>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	f023 030f 	bic.w	r3, r3, #15
 80003b4:	4a34      	ldr	r2, [pc, #208]	@ (8000488 <SystemInit+0x108>)
 80003b6:	f043 0307 	orr.w	r3, r3, #7
 80003ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003bc:	4b33      	ldr	r3, [pc, #204]	@ (800048c <SystemInit+0x10c>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a32      	ldr	r2, [pc, #200]	@ (800048c <SystemInit+0x10c>)
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003c8:	4b30      	ldr	r3, [pc, #192]	@ (800048c <SystemInit+0x10c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003ce:	4b2f      	ldr	r3, [pc, #188]	@ (800048c <SystemInit+0x10c>)
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	492e      	ldr	r1, [pc, #184]	@ (800048c <SystemInit+0x10c>)
 80003d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <SystemInit+0x110>)
 80003d6:	4013      	ands	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80003da:	4b2b      	ldr	r3, [pc, #172]	@ (8000488 <SystemInit+0x108>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	f003 0308 	and.w	r3, r3, #8
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d007      	beq.n	80003f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80003e6:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <SystemInit+0x108>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	f023 030f 	bic.w	r3, r3, #15
 80003ee:	4a26      	ldr	r2, [pc, #152]	@ (8000488 <SystemInit+0x108>)
 80003f0:	f043 0307 	orr.w	r3, r3, #7
 80003f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003f6:	4b25      	ldr	r3, [pc, #148]	@ (800048c <SystemInit+0x10c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003fc:	4b23      	ldr	r3, [pc, #140]	@ (800048c <SystemInit+0x10c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000402:	4b22      	ldr	r3, [pc, #136]	@ (800048c <SystemInit+0x10c>)
 8000404:	2200      	movs	r2, #0
 8000406:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000408:	4b20      	ldr	r3, [pc, #128]	@ (800048c <SystemInit+0x10c>)
 800040a:	4a22      	ldr	r2, [pc, #136]	@ (8000494 <SystemInit+0x114>)
 800040c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800040e:	4b1f      	ldr	r3, [pc, #124]	@ (800048c <SystemInit+0x10c>)
 8000410:	4a21      	ldr	r2, [pc, #132]	@ (8000498 <SystemInit+0x118>)
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000414:	4b1d      	ldr	r3, [pc, #116]	@ (800048c <SystemInit+0x10c>)
 8000416:	4a21      	ldr	r2, [pc, #132]	@ (800049c <SystemInit+0x11c>)
 8000418:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800041a:	4b1c      	ldr	r3, [pc, #112]	@ (800048c <SystemInit+0x10c>)
 800041c:	2200      	movs	r2, #0
 800041e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000420:	4b1a      	ldr	r3, [pc, #104]	@ (800048c <SystemInit+0x10c>)
 8000422:	4a1e      	ldr	r2, [pc, #120]	@ (800049c <SystemInit+0x11c>)
 8000424:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000426:	4b19      	ldr	r3, [pc, #100]	@ (800048c <SystemInit+0x10c>)
 8000428:	2200      	movs	r2, #0
 800042a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800042c:	4b17      	ldr	r3, [pc, #92]	@ (800048c <SystemInit+0x10c>)
 800042e:	4a1b      	ldr	r2, [pc, #108]	@ (800049c <SystemInit+0x11c>)
 8000430:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000432:	4b16      	ldr	r3, [pc, #88]	@ (800048c <SystemInit+0x10c>)
 8000434:	2200      	movs	r2, #0
 8000436:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <SystemInit+0x10c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a13      	ldr	r2, [pc, #76]	@ (800048c <SystemInit+0x10c>)
 800043e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000442:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000444:	4b11      	ldr	r3, [pc, #68]	@ (800048c <SystemInit+0x10c>)
 8000446:	2200      	movs	r2, #0
 8000448:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800044a:	4b15      	ldr	r3, [pc, #84]	@ (80004a0 <SystemInit+0x120>)
 800044c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800044e:	4a14      	ldr	r2, [pc, #80]	@ (80004a0 <SystemInit+0x120>)
 8000450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000454:	6253      	str	r3, [r2, #36]	@ 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000456:	4b13      	ldr	r3, [pc, #76]	@ (80004a4 <SystemInit+0x124>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <SystemInit+0x128>)
 800045c:	4013      	ands	r3, r2
 800045e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000462:	d202      	bcs.n	800046a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000464:	4b11      	ldr	r3, [pc, #68]	@ (80004ac <SystemInit+0x12c>)
 8000466:	2201      	movs	r2, #1
 8000468:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <SystemInit+0x130>)
 800046c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000470:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8000472:	4b04      	ldr	r3, [pc, #16]	@ (8000484 <SystemInit+0x104>)
 8000474:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000478:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800047a:	bf00      	nop
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	e000ed00 	.word	0xe000ed00
 8000488:	52002000 	.word	0x52002000
 800048c:	58024400 	.word	0x58024400
 8000490:	eaf6ed7f 	.word	0xeaf6ed7f
 8000494:	02020200 	.word	0x02020200
 8000498:	01ff0000 	.word	0x01ff0000
 800049c:	01010280 	.word	0x01010280
 80004a0:	580000c0 	.word	0x580000c0
 80004a4:	5c001000 	.word	0x5c001000
 80004a8:	ffff0000 	.word	0xffff0000
 80004ac:	51008108 	.word	0x51008108
 80004b0:	52004000 	.word	0x52004000

080004b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */

/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004ba:	f000 f9af 	bl	800081c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80004be:	4b46      	ldr	r3, [pc, #280]	@ (80005d8 <main+0x124>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d11b      	bne.n	8000502 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80004ca:	f3bf 8f4f 	dsb	sy
}
 80004ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004d0:	f3bf 8f6f 	isb	sy
}
 80004d4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80004d6:	4b40      	ldr	r3, [pc, #256]	@ (80005d8 <main+0x124>)
 80004d8:	2200      	movs	r2, #0
 80004da:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80004de:	f3bf 8f4f 	dsb	sy
}
 80004e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004e4:	f3bf 8f6f 	isb	sy
}
 80004e8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80004ea:	4b3b      	ldr	r3, [pc, #236]	@ (80005d8 <main+0x124>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a3a      	ldr	r2, [pc, #232]	@ (80005d8 <main+0x124>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80004f6:	f3bf 8f4f 	dsb	sy
}
 80004fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80004fc:	f3bf 8f6f 	isb	sy
}
 8000500:	e000      	b.n	8000504 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000502:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000504:	4b34      	ldr	r3, [pc, #208]	@ (80005d8 <main+0x124>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800050c:	2b00      	cmp	r3, #0
 800050e:	d138      	bne.n	8000582 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000510:	4b31      	ldr	r3, [pc, #196]	@ (80005d8 <main+0x124>)
 8000512:	2200      	movs	r2, #0
 8000514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000518:	f3bf 8f4f 	dsb	sy
}
 800051c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800051e:	4b2e      	ldr	r3, [pc, #184]	@ (80005d8 <main+0x124>)
 8000520:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000524:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	0b5b      	lsrs	r3, r3, #13
 800052a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800052e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	08db      	lsrs	r3, r3, #3
 8000534:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000538:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	015a      	lsls	r2, r3, #5
 800053e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000542:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000548:	4923      	ldr	r1, [pc, #140]	@ (80005d8 <main+0x124>)
 800054a:	4313      	orrs	r3, r2
 800054c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	1e5a      	subs	r2, r3, #1
 8000554:	607a      	str	r2, [r7, #4]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d1ef      	bne.n	800053a <main+0x86>
    } while(sets-- != 0U);
 800055a:	68bb      	ldr	r3, [r7, #8]
 800055c:	1e5a      	subs	r2, r3, #1
 800055e:	60ba      	str	r2, [r7, #8]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d1e5      	bne.n	8000530 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000564:	f3bf 8f4f 	dsb	sy
}
 8000568:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800056a:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <main+0x124>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	4a1a      	ldr	r2, [pc, #104]	@ (80005d8 <main+0x124>)
 8000570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000574:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000576:	f3bf 8f4f 	dsb	sy
}
 800057a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057c:	f3bf 8f6f 	isb	sy
}
 8000580:	e000      	b.n	8000584 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000582:	bf00      	nop

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000584:	f000 fcac 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000588:	f000 f830 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058c:	f000 f8aa 	bl	80006e4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  __HAL_RCC_HSEM_CLK_ENABLE();
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <main+0x128>)
 8000592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000596:	4a11      	ldr	r2, [pc, #68]	@ (80005dc <main+0x128>)
 8000598:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800059c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <main+0x128>)
 80005a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80005aa:	603b      	str	r3, [r7, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
  HAL_HSEM_FastTake(HSEM_ID_0);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f002 ff0a 	bl	80033c8 <HAL_HSEM_FastTake>
  HAL_HSEM_Release(HSEM_ID_0,0);
 80005b4:	2100      	movs	r1, #0
 80005b6:	2000      	movs	r0, #0
 80005b8:	f002 ff20 	bl	80033fc <HAL_HSEM_Release>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005bc:	f005 f82a 	bl	8005614 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c0:	4a07      	ldr	r2, [pc, #28]	@ (80005e0 <main+0x12c>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <main+0x130>)
 80005c6:	f005 f884 	bl	80056d2 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a06      	ldr	r2, [pc, #24]	@ (80005e8 <main+0x134>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f005 f844 	bl	800565c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <main+0x120>
 80005d8:	e000ed00 	.word	0xe000ed00
 80005dc:	58024400 	.word	0x58024400
 80005e0:	080170bc 	.word	0x080170bc
 80005e4:	08000809 	.word	0x08000809
 80005e8:	240000ac 	.word	0x240000ac

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b09c      	sub	sp, #112	@ 0x70
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f6:	224c      	movs	r2, #76	@ 0x4c
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 ffdd 	bl	80135ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2220      	movs	r2, #32
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f012 ffd7 	bl	80135ba <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800060c:	2004      	movs	r0, #4
 800060e:	f002 ff09 	bl	8003424 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
 8000616:	4b31      	ldr	r3, [pc, #196]	@ (80006dc <SystemClock_Config+0xf0>)
 8000618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800061a:	4a30      	ldr	r2, [pc, #192]	@ (80006dc <SystemClock_Config+0xf0>)
 800061c:	f023 0301 	bic.w	r3, r3, #1
 8000620:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000622:	4b2e      	ldr	r3, [pc, #184]	@ (80006dc <SystemClock_Config+0xf0>)
 8000624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <SystemClock_Config+0xf4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <SystemClock_Config+0xf4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b29      	ldr	r3, [pc, #164]	@ (80006e0 <SystemClock_Config+0xf4>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000644:	bf00      	nop
 8000646:	4b26      	ldr	r3, [pc, #152]	@ (80006e0 <SystemClock_Config+0xf4>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000652:	d1f8      	bne.n	8000646 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000654:	2301      	movs	r3, #1
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800065c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	2302      	movs	r3, #2
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000666:	2304      	movs	r3, #4
 8000668:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 400;
 800066a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800066e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000670:	2302      	movs	r3, #2
 8000672:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000674:	2302      	movs	r3, #2
 8000676:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800067c:	2304      	movs	r3, #4
 800067e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000680:	2300      	movs	r3, #0
 8000682:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800068c:	4618      	mov	r0, r3
 800068e:	f002 ff23 	bl	80034d8 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000698:	f000 f90e 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	233f      	movs	r3, #63	@ 0x3f
 800069e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80006a8:	2308      	movs	r3, #8
 80006aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006ac:	2340      	movs	r3, #64	@ 0x40
 80006ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80006b0:	2340      	movs	r3, #64	@ 0x40
 80006b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006ba:	2340      	movs	r3, #64	@ 0x40
 80006bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2102      	movs	r1, #2
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fb16 	bl	8003cf4 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006ce:	f000 f8f3 	bl	80008b8 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	3770      	adds	r7, #112	@ 0x70
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	58000400 	.word	0x58000400
 80006e0:	58024800 	.word	0x58024800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08c      	sub	sp, #48	@ 0x30
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b40      	ldr	r3, [pc, #256]	@ (80007fc <MX_GPIO_Init+0x118>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	4a3e      	ldr	r2, [pc, #248]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000702:	f043 0304 	orr.w	r3, r3, #4
 8000706:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800070a:	4b3c      	ldr	r3, [pc, #240]	@ (80007fc <MX_GPIO_Init+0x118>)
 800070c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000710:	f003 0304 	and.w	r3, r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
 8000716:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000718:	4b38      	ldr	r3, [pc, #224]	@ (80007fc <MX_GPIO_Init+0x118>)
 800071a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071e:	4a37      	ldr	r2, [pc, #220]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000728:	4b34      	ldr	r3, [pc, #208]	@ (80007fc <MX_GPIO_Init+0x118>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000732:	617b      	str	r3, [r7, #20]
 8000734:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b31      	ldr	r3, [pc, #196]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073c:	4a2f      	ldr	r2, [pc, #188]	@ (80007fc <MX_GPIO_Init+0x118>)
 800073e:	f043 0301 	orr.w	r3, r3, #1
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000746:	4b2d      	ldr	r3, [pc, #180]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075a:	4a28      	ldr	r2, [pc, #160]	@ (80007fc <MX_GPIO_Init+0x118>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000764:	4b25      	ldr	r3, [pc, #148]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076a:	f003 0302 	and.w	r3, r3, #2
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000772:	4b22      	ldr	r3, [pc, #136]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000778:	4a20      	ldr	r2, [pc, #128]	@ (80007fc <MX_GPIO_Init+0x118>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000782:	4b1e      	ldr	r3, [pc, #120]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000796:	4a19      	ldr	r2, [pc, #100]	@ (80007fc <MX_GPIO_Init+0x118>)
 8000798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_GPIO_Init+0x118>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007c0:	2307      	movs	r3, #7
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c4:	f107 031c 	add.w	r3, r7, #28
 80007c8:	4619      	mov	r1, r3
 80007ca:	480d      	ldr	r0, [pc, #52]	@ (8000800 <MX_GPIO_Init+0x11c>)
 80007cc:	f002 fc4c 	bl	8003068 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80007d0:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80007e2:	230a      	movs	r3, #10
 80007e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4805      	ldr	r0, [pc, #20]	@ (8000804 <MX_GPIO_Init+0x120>)
 80007ee:	f002 fc3b 	bl	8003068 <HAL_GPIO_Init>

}
 80007f2:	bf00      	nop
 80007f4:	3730      	adds	r7, #48	@ 0x30
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	58024400 	.word	0x58024400
 8000800:	58020c00 	.word	0x58020c00
 8000804:	58020000 	.word	0x58020000

08000808 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000810:	f004 f8fa 	bl	8004a08 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f004 ffef 	bl	80057f8 <osDelay>
 800081a:	e7fb      	b.n	8000814 <StartDefaultTask+0xc>

0800081c <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000822:	463b      	mov	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800082e:	f000 fcb3 	bl	8001198 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000832:	2301      	movs	r3, #1
 8000834:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000836:	2300      	movs	r3, #0
 8000838:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800083a:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <MPU_Config+0x74>)
 800083c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 800083e:	230e      	movs	r3, #14
 8000840:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000842:	2300      	movs	r3, #0
 8000844:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000846:	2301      	movs	r3, #1
 8000848:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800084a:	2303      	movs	r3, #3
 800084c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800084e:	2301      	movs	r3, #1
 8000850:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800085e:	463b      	mov	r3, r7
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fcd1 	bl	8001208 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000866:	2301      	movs	r3, #1
 8000868:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800086a:	2307      	movs	r3, #7
 800086c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800086e:	2300      	movs	r3, #0
 8000870:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000872:	2301      	movs	r3, #1
 8000874:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800087a:	463b      	mov	r3, r7
 800087c:	4618      	mov	r0, r3
 800087e:	f000 fcc3 	bl	8001208 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000882:	2004      	movs	r0, #4
 8000884:	f000 fca0 	bl	80011c8 <HAL_MPU_Enable>

}
 8000888:	bf00      	nop
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	30040000 	.word	0x30040000

08000894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 fb57 	bl	8000f58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40001000 	.word	0x40001000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <Error_Handler+0x8>

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ca:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <HAL_MspInit+0x38>)
 80008cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008d0:	4a0a      	ldr	r2, [pc, #40]	@ (80008fc <HAL_MspInit+0x38>)
 80008d2:	f043 0302 	orr.w	r3, r3, #2
 80008d6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <HAL_MspInit+0x38>)
 80008dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008e0:	f003 0302 	and.w	r3, r3, #2
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	210f      	movs	r1, #15
 80008ec:	f06f 0001 	mvn.w	r0, #1
 80008f0:	f000 fc2a 	bl	8001148 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	58024400 	.word	0x58024400

08000900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b090      	sub	sp, #64	@ 0x40
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	2b0f      	cmp	r3, #15
 800090c:	d827      	bhi.n	800095e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800090e:	2200      	movs	r2, #0
 8000910:	6879      	ldr	r1, [r7, #4]
 8000912:	2036      	movs	r0, #54	@ 0x36
 8000914:	f000 fc18 	bl	8001148 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000918:	2036      	movs	r0, #54	@ 0x36
 800091a:	f000 fc2f 	bl	800117c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800091e:	4a29      	ldr	r2, [pc, #164]	@ (80009c4 <HAL_InitTick+0xc4>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000924:	4b28      	ldr	r3, [pc, #160]	@ (80009c8 <HAL_InitTick+0xc8>)
 8000926:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800092a:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <HAL_InitTick+0xc8>)
 800092c:	f043 0310 	orr.w	r3, r3, #16
 8000930:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <HAL_InitTick+0xc8>)
 8000936:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800093a:	f003 0310 	and.w	r3, r3, #16
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000942:	f107 0210 	add.w	r2, r7, #16
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4611      	mov	r1, r2
 800094c:	4618      	mov	r0, r3
 800094e:	f003 fd47 	bl	80043e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000954:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000958:	2b00      	cmp	r3, #0
 800095a:	d106      	bne.n	800096a <HAL_InitTick+0x6a>
 800095c:	e001      	b.n	8000962 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e02b      	b.n	80009ba <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000962:	f003 fd27 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 8000966:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8000968:	e004      	b.n	8000974 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800096a:	f003 fd23 	bl	80043b4 <HAL_RCC_GetPCLK1Freq>
 800096e:	4603      	mov	r3, r0
 8000970:	005b      	lsls	r3, r3, #1
 8000972:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000976:	4a15      	ldr	r2, [pc, #84]	@ (80009cc <HAL_InitTick+0xcc>)
 8000978:	fba2 2303 	umull	r2, r3, r2, r3
 800097c:	0c9b      	lsrs	r3, r3, #18
 800097e:	3b01      	subs	r3, #1
 8000980:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <HAL_InitTick+0xd0>)
 8000984:	4a13      	ldr	r2, [pc, #76]	@ (80009d4 <HAL_InitTick+0xd4>)
 8000986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <HAL_InitTick+0xd0>)
 800098a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800098e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000990:	4a0f      	ldr	r2, [pc, #60]	@ (80009d0 <HAL_InitTick+0xd0>)
 8000992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000994:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000996:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <HAL_InitTick+0xd0>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <HAL_InitTick+0xd0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009a2:	480b      	ldr	r0, [pc, #44]	@ (80009d0 <HAL_InitTick+0xd0>)
 80009a4:	f003 fd5e 	bl	8004464 <HAL_TIM_Base_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d104      	bne.n	80009b8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80009ae:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <HAL_InitTick+0xd0>)
 80009b0:	f003 fdba 	bl	8004528 <HAL_TIM_Base_Start_IT>
 80009b4:	4603      	mov	r3, r0
 80009b6:	e000      	b.n	80009ba <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b8:	2301      	movs	r3, #1
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3740      	adds	r7, #64	@ 0x40
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	24000008 	.word	0x24000008
 80009c8:	58024400 	.word	0x58024400
 80009cc:	431bde83 	.word	0x431bde83
 80009d0:	240000b0 	.word	0x240000b0
 80009d4:	40001000 	.word	0x40001000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <MemManage_Handler+0x4>

080009f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <UsageFault_Handler+0x4>

08000a00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <TIM6_DAC_IRQHandler+0x10>)
 8000a16:	f003 fdf7 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	240000b0 	.word	0x240000b0

08000a24 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000a28:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <ETH_IRQHandler+0x10>)
 8000a2a:	f001 f927 	bl	8001c7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	24000178 	.word	0x24000178

08000a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	return 1;
 8000a3c:	2301      	movs	r3, #1
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <_kill>:

int _kill(int pid, int sig)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a52:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <_kill+0x20>)
 8000a54:	2216      	movs	r2, #22
 8000a56:	601a      	str	r2, [r3, #0]
	return -1;
 8000a58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	24008474 	.word	0x24008474

08000a6c <_exit>:

void _exit (int status)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a74:	f04f 31ff 	mov.w	r1, #4294967295
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f7ff ffe5 	bl	8000a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a7e:	bf00      	nop
 8000a80:	e7fd      	b.n	8000a7e <_exit+0x12>

08000a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e00a      	b.n	8000aaa <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a94:	f3af 8000 	nop.w
 8000a98:	4601      	mov	r1, r0
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	b2ca      	uxtb	r2, r1
 8000aa2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	dbf0      	blt.n	8000a94 <_read+0x12>
	}

return len;
 8000ab2:	687b      	ldr	r3, [r7, #4]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b086      	sub	sp, #24
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
 8000acc:	e009      	b.n	8000ae2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	1c5a      	adds	r2, r3, #1
 8000ad2:	60ba      	str	r2, [r7, #8]
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	697a      	ldr	r2, [r7, #20]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	dbf1      	blt.n	8000ace <_write+0x12>
	}
	return len;
 8000aea:	687b      	ldr	r3, [r7, #4]
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3718      	adds	r7, #24
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <_close>:

int _close(int file)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	return -1;
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b1c:	605a      	str	r2, [r3, #4]
	return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <_isatty>:

int _isatty(int file)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	return 1;
 8000b34:	2301      	movs	r3, #1
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b085      	sub	sp, #20
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	60f8      	str	r0, [r7, #12]
 8000b4a:	60b9      	str	r1, [r7, #8]
 8000b4c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b4e:	2300      	movs	r3, #0
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b087      	sub	sp, #28
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b64:	4a14      	ldr	r2, [pc, #80]	@ (8000bb8 <_sbrk+0x5c>)
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <_sbrk+0x60>)
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b70:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d102      	bne.n	8000b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <_sbrk+0x64>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <_sbrk+0x68>)
 8000b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <_sbrk+0x64>)
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	4413      	add	r3, r2
 8000b86:	693a      	ldr	r2, [r7, #16]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d205      	bcs.n	8000b98 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <_sbrk+0x6c>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295
 8000b96:	e009      	b.n	8000bac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a06      	ldr	r2, [pc, #24]	@ (8000bc0 <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	24040000 	.word	0x24040000
 8000bbc:	00000400 	.word	0x00000400
 8000bc0:	240000fc 	.word	0x240000fc
 8000bc4:	24008638 	.word	0x24008638
 8000bc8:	24008474 	.word	0x24008474

08000bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bcc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bd0:	f7ff fbd6 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd4:	480c      	ldr	r0, [pc, #48]	@ (8000c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bd6:	490d      	ldr	r1, [pc, #52]	@ (8000c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bdc:	e002      	b.n	8000be4 <LoopCopyDataInit>

08000bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000be2:	3304      	adds	r3, #4

08000be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be8:	d3f9      	bcc.n	8000bde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bea:	4a0a      	ldr	r2, [pc, #40]	@ (8000c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bec:	4c0a      	ldr	r4, [pc, #40]	@ (8000c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf0:	e001      	b.n	8000bf6 <LoopFillZerobss>

08000bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf4:	3204      	adds	r2, #4

08000bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf8:	d3fb      	bcc.n	8000bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bfa:	f012 fd2d 	bl	8013658 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bfe:	f7ff fc59 	bl	80004b4 <main>
  bx  lr
 8000c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c04:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 8000c08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c0c:	24000090 	.word	0x24000090
  ldr r2, =_sidata
 8000c10:	08017300 	.word	0x08017300
  ldr r2, =_sbss
 8000c14:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8000c18:	24008634 	.word	0x24008634

08000c1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c1c:	e7fe      	b.n	8000c1c <ADC3_IRQHandler>

08000c1e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00b      	beq.n	8000c46 <LAN8742_RegisterBusIO+0x28>
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d007      	beq.n	8000c46 <LAN8742_RegisterBusIO+0x28>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d003      	beq.n	8000c46 <LAN8742_RegisterBusIO+0x28>
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000c46:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4a:	e014      	b.n	8000c76 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	68da      	ldr	r2, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	691a      	ldr	r2, [r3, #16]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d17c      	bne.n	8000d9c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d002      	beq.n	8000cb0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2220      	movs	r2, #32
 8000cb4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e01c      	b.n	8000cf6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	f107 0208 	add.w	r2, r7, #8
 8000cc4:	2112      	movs	r1, #18
 8000cc6:	6978      	ldr	r0, [r7, #20]
 8000cc8:	4798      	blx	r3
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	da03      	bge.n	8000cd8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8000cd0:	f06f 0304 	mvn.w	r3, #4
 8000cd4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8000cd6:	e00b      	b.n	8000cf0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	f003 031f 	and.w	r3, r3, #31
 8000cde:	697a      	ldr	r2, [r7, #20]
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	d105      	bne.n	8000cf0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
         break;
 8000cee:	e005      	b.n	8000cfc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	2b1f      	cmp	r3, #31
 8000cfa:	d9df      	bls.n	8000cbc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b1f      	cmp	r3, #31
 8000d02:	d902      	bls.n	8000d0a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000d04:	f06f 0302 	mvn.w	r3, #2
 8000d08:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d145      	bne.n	8000d9c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	691b      	ldr	r3, [r3, #16]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6810      	ldr	r0, [r2, #0]
 8000d18:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4798      	blx	r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	db37      	blt.n	8000d96 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	695b      	ldr	r3, [r3, #20]
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6810      	ldr	r0, [r2, #0]
 8000d2e:	f107 0208 	add.w	r2, r7, #8
 8000d32:	2100      	movs	r1, #0
 8000d34:	4798      	blx	r3
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db28      	blt.n	8000d8e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4798      	blx	r3
 8000d42:	4603      	mov	r3, r0
 8000d44:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d46:	e01c      	b.n	8000d82 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	4798      	blx	r3
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d5a:	d80e      	bhi.n	8000d7a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6810      	ldr	r0, [r2, #0]
 8000d64:	f107 0208 	add.w	r2, r7, #8
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4798      	blx	r3
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da07      	bge.n	8000d82 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8000d72:	f06f 0304 	mvn.w	r3, #4
 8000d76:	613b      	str	r3, [r7, #16]
                 break;
 8000d78:	e010      	b.n	8000d9c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000d7a:	f06f 0301 	mvn.w	r3, #1
 8000d7e:	613b      	str	r3, [r7, #16]
               break;
 8000d80:	e00c      	b.n	8000d9c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d1dd      	bne.n	8000d48 <LAN8742_Init+0xc6>
 8000d8c:	e006      	b.n	8000d9c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8000d8e:	f06f 0304 	mvn.w	r3, #4
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	e002      	b.n	8000d9c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8000d96:	f06f 0303 	mvn.w	r3, #3
 8000d9a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d112      	bne.n	8000dc8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	4798      	blx	r3
 8000da8:	4603      	mov	r3, r0
 8000daa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000dac:	bf00      	nop
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	4798      	blx	r3
 8000db4:	4603      	mov	r3, r0
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	1ad3      	subs	r3, r2, r3
 8000dbc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000dc0:	d9f5      	bls.n	8000dae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8000dc8:	693b      	ldr	r3, [r7, #16]
 }
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b084      	sub	sp, #16
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	695b      	ldr	r3, [r3, #20]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	6810      	ldr	r0, [r2, #0]
 8000de6:	f107 020c 	add.w	r2, r7, #12
 8000dea:	2101      	movs	r1, #1
 8000dec:	4798      	blx	r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da02      	bge.n	8000dfa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000df4:	f06f 0304 	mvn.w	r3, #4
 8000df8:	e06e      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	695b      	ldr	r3, [r3, #20]
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	6810      	ldr	r0, [r2, #0]
 8000e02:	f107 020c 	add.w	r2, r7, #12
 8000e06:	2101      	movs	r1, #1
 8000e08:	4798      	blx	r3
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	da02      	bge.n	8000e16 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e10:	f06f 0304 	mvn.w	r3, #4
 8000e14:	e060      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8000e20:	2301      	movs	r3, #1
 8000e22:	e059      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6810      	ldr	r0, [r2, #0]
 8000e2c:	f107 020c 	add.w	r2, r7, #12
 8000e30:	2100      	movs	r1, #0
 8000e32:	4798      	blx	r3
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	da02      	bge.n	8000e40 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e3a:	f06f 0304 	mvn.w	r3, #4
 8000e3e:	e04b      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d11b      	bne.n	8000e82 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d006      	beq.n	8000e62 <LAN8742_GetLinkState+0x90>
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	e03a      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e033      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000e7a:	2304      	movs	r3, #4
 8000e7c:	e02c      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e02a      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	6810      	ldr	r0, [r2, #0]
 8000e8a:	f107 020c 	add.w	r2, r7, #12
 8000e8e:	211f      	movs	r1, #31
 8000e90:	4798      	blx	r3
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	da02      	bge.n	8000e9e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000e98:	f06f 0304 	mvn.w	r3, #4
 8000e9c:	e01c      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ea8:	2306      	movs	r3, #6
 8000eaa:	e015      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f003 031c 	and.w	r3, r3, #28
 8000eb2:	2b18      	cmp	r3, #24
 8000eb4:	d101      	bne.n	8000eba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e00e      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f003 031c 	and.w	r3, r3, #28
 8000ec0:	2b08      	cmp	r3, #8
 8000ec2:	d101      	bne.n	8000ec8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	e007      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 031c 	and.w	r3, r3, #28
 8000ece:	2b14      	cmp	r3, #20
 8000ed0:	d101      	bne.n	8000ed6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	e000      	b.n	8000ed8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000ed6:	2305      	movs	r3, #5
    }				
  }
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 f923 	bl	8001132 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000eec:	f003 f8b8 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	4b15      	ldr	r3, [pc, #84]	@ (8000f48 <HAL_Init+0x68>)
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	f003 030f 	and.w	r3, r3, #15
 8000efc:	4913      	ldr	r1, [pc, #76]	@ (8000f4c <HAL_Init+0x6c>)
 8000efe:	5ccb      	ldrb	r3, [r1, r3]
 8000f00:	f003 031f 	and.w	r3, r3, #31
 8000f04:	fa22 f303 	lsr.w	r3, r2, r3
 8000f08:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f48 <HAL_Init+0x68>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	f003 030f 	and.w	r3, r3, #15
 8000f12:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <HAL_Init+0x6c>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	f003 031f 	and.w	r3, r3, #31
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	4a0b      	ldr	r2, [pc, #44]	@ (8000f50 <HAL_Init+0x70>)
 8000f22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f24:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <HAL_Init+0x74>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f7ff fce8 	bl	8000900 <HAL_InitTick>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e002      	b.n	8000f40 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fcc3 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	080170ac 	.word	0x080170ac
 8000f50:	24000004 	.word	0x24000004
 8000f54:	24000000 	.word	0x24000000

08000f58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_IncTick+0x20>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	4b06      	ldr	r3, [pc, #24]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4413      	add	r3, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <HAL_IncTick+0x24>)
 8000f6a:	6013      	str	r3, [r2, #0]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2400000c 	.word	0x2400000c
 8000f7c:	24000100 	.word	0x24000100

08000f80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return uwTick;
 8000f84:	4b03      	ldr	r3, [pc, #12]	@ (8000f94 <HAL_GetTick+0x14>)
 8000f86:	681b      	ldr	r3, [r3, #0]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	24000100 	.word	0x24000100

08000f98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	@ (8000fac <HAL_GetREVID+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	0c1b      	lsrs	r3, r3, #16
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	5c001000 	.word	0x5c001000

08000fb0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8000fc0:	4904      	ldr	r1, [pc, #16]	@ (8000fd4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	604b      	str	r3, [r1, #4]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	58000400 	.word	0x58000400

08000fd8 <__NVIC_SetPriorityGrouping>:
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <__NVIC_SetPriorityGrouping+0x40>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8001002:	4313      	orrs	r3, r2
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x40>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00
 800101c:	05fa0000 	.word	0x05fa0000

08001020 <__NVIC_GetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	@ (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	@ (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	@ (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	@ 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	@ 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ff4c 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001156:	f7ff ff63 	bl	8001020 <__NVIC_GetPriorityGrouping>
 800115a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800115c:	687a      	ldr	r2, [r7, #4]
 800115e:	68b9      	ldr	r1, [r7, #8]
 8001160:	6978      	ldr	r0, [r7, #20]
 8001162:	f7ff ffb3 	bl	80010cc <NVIC_EncodePriority>
 8001166:	4602      	mov	r2, r0
 8001168:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff82 	bl	8001078 <__NVIC_SetPriority>
}
 8001174:	bf00      	nop
 8001176:	3718      	adds	r7, #24
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff56 	bl	800103c <__NVIC_EnableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800119c:	f3bf 8f5f 	dmb	sy
}
 80011a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <HAL_MPU_Disable+0x28>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <HAL_MPU_Disable+0x28>)
 80011a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80011ae:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_MPU_Disable+0x2c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	e000ed90 	.word	0xe000ed90

080011c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80011d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001200 <HAL_MPU_Enable+0x38>)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80011da:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <HAL_MPU_Enable+0x3c>)
 80011dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011de:	4a09      	ldr	r2, [pc, #36]	@ (8001204 <HAL_MPU_Enable+0x3c>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011e6:	f3bf 8f4f 	dsb	sy
}
 80011ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011ec:	f3bf 8f6f 	isb	sy
}
 80011f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed90 	.word	0xe000ed90
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	785a      	ldrb	r2, [r3, #1]
 8001214:	4b1d      	ldr	r3, [pc, #116]	@ (800128c <HAL_MPU_ConfigRegion+0x84>)
 8001216:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d029      	beq.n	8001274 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001220:	4a1a      	ldr	r2, [pc, #104]	@ (800128c <HAL_MPU_ConfigRegion+0x84>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	7b1b      	ldrb	r3, [r3, #12]
 800122c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	7adb      	ldrb	r3, [r3, #11]
 8001232:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001234:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	7a9b      	ldrb	r3, [r3, #10]
 800123a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800123c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	7b5b      	ldrb	r3, [r3, #13]
 8001242:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001244:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b9b      	ldrb	r3, [r3, #14]
 800124a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800124c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	7bdb      	ldrb	r3, [r3, #15]
 8001252:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001254:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7a5b      	ldrb	r3, [r3, #9]
 800125a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800125c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	7a1b      	ldrb	r3, [r3, #8]
 8001262:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001264:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800126c:	4a07      	ldr	r2, [pc, #28]	@ (800128c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800126e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001270:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001272:	e005      	b.n	8001280 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001274:	4b05      	ldr	r3, [pc, #20]	@ (800128c <HAL_MPU_ConfigRegion+0x84>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800127a:	4b04      	ldr	r3, [pc, #16]	@ (800128c <HAL_MPU_ConfigRegion+0x84>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed90 	.word	0xe000ed90

08001290 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <HAL_GetCurrentCPUID+0x24>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	2b07      	cmp	r3, #7
 80012a0:	d101      	bne.n	80012a6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e000      	b.n	80012a8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80012a6:	2301      	movs	r3, #1
  }
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0c8      	b.n	800145c <HAL_ETH_Init+0x1a4>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d102      	bne.n	80012d8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f003 fcf0 	bl	8004cb8 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2223      	movs	r2, #35	@ 0x23
 80012dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	4b61      	ldr	r3, [pc, #388]	@ (8001464 <HAL_ETH_Init+0x1ac>)
 80012e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001464 <HAL_ETH_Init+0x1ac>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001464 <HAL_ETH_Init+0x1ac>)
 80012f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	7a1b      	ldrb	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d103      	bne.n	800130c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fe53 	bl	8000fb0 <HAL_SYSCFG_ETHInterfaceSelect>
 800130a:	e003      	b.n	8001314 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800130c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001310:	f7ff fe4e 	bl	8000fb0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6812      	ldr	r2, [r2, #0]
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800132a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800132c:	f7ff fe28 	bl	8000f80 <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001332:	e00f      	b.n	8001354 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001334:	f7ff fe24 	bl	8000f80 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001342:	d907      	bls.n	8001354 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	675a      	str	r2, [r3, #116]	@ 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	22e0      	movs	r2, #224	@ 0xe0
 800134e:	66da      	str	r2, [r3, #108]	@ 0x6c
      /* Return Error */
      return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e083      	b.n	800145c <HAL_ETH_Init+0x1a4>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1e6      	bne.n	8001334 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f001 fb00 	bl	800296c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800136c:	f002 fff2 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 8001370:	4603      	mov	r3, r0
 8001372:	4a3d      	ldr	r2, [pc, #244]	@ (8001468 <HAL_ETH_Init+0x1b0>)
 8001374:	fba2 2303 	umull	r2, r3, r2, r3
 8001378:	0c9a      	lsrs	r2, r3, #18
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3a01      	subs	r2, #1
 8001380:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f001 fa53 	bl	8002830 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001392:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001396:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80013a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013a6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d007      	beq.n	80013c6 <HAL_ETH_Init+0x10e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	675a      	str	r2, [r3, #116]	@ 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	22e0      	movs	r2, #224	@ 0xe0
 80013c0:	66da      	str	r2, [r3, #108]	@ 0x6c
    /* Return Error */
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e04a      	b.n	800145c <HAL_ETH_Init+0x1a4>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80013d2:	4b26      	ldr	r3, [pc, #152]	@ (800146c <HAL_ETH_Init+0x1b4>)
 80013d4:	4013      	ands	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6952      	ldr	r2, [r2, #20]
 80013da:	0051      	lsls	r1, r2, #1
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	6812      	ldr	r2, [r2, #0]
 80013e0:	430b      	orrs	r3, r1
 80013e2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013e6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f001 fb16 	bl	8002a1c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f001 fb5c 	bl	8002aae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	3305      	adds	r3, #5
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	021a      	lsls	r2, r3, #8
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	3304      	adds	r3, #4
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4619      	mov	r1, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	430a      	orrs	r2, r1
 8001410:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	3303      	adds	r3, #3
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	061a      	lsls	r2, r3, #24
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	3302      	adds	r3, #2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	041b      	lsls	r3, r3, #16
 8001428:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	3301      	adds	r3, #1
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001434:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001442:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001444:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	675a      	str	r2, [r3, #116]	@ 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2210      	movs	r2, #16
 8001452:	66da      	str	r2, [r3, #108]	@ 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2210      	movs	r2, #16
 8001458:	671a      	str	r2, [r3, #112]	@ 0x70

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	58024400 	.word	0x58024400
 8001468:	431bde83 	.word	0x431bde83
 800146c:	ffff8001 	.word	0xffff8001

08001470 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	3310      	adds	r3, #16
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4413      	add	r3, r2
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <HAL_ETH_DescAssignMemory+0x28>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d904      	bls.n	80014a2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	2201      	movs	r2, #1
 800149c:	675a      	str	r2, [r3, #116]	@ 0x74
    /* Return Error */
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e021      	b.n	80014e6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00b      	beq.n	80014d8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b085      	sub	sp, #20
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d176      	bne.n	80015f0 <HAL_ETH_Start_IT+0xfe>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2223      	movs	r2, #35	@ 0x23
 8001506:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	e00f      	b.n	800152e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3310      	adds	r3, #16
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	4413      	add	r3, r2
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2b03      	cmp	r3, #3
 8001532:	d9ec      	bls.n	800150e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0202 	orr.w	r2, r2, #2
 8001548:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001576:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001586:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001592:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6812      	ldr	r2, [r2, #0]
 800159a:	f043 0301 	orr.w	r3, r3, #1
 800159e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015a2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ae:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6812      	ldr	r2, [r2, #0]
 80015b6:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80015ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015be:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015ca:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	f24d 0341 	movw	r3, #53313	@ 0xd041
 80015d6:	430b      	orrs	r3, r1
 80015d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80015dc:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2210      	movs	r2, #16
 80015e4:	66da      	str	r2, [r3, #108]	@ 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2222      	movs	r2, #34	@ 0x22
 80015ea:	671a      	str	r2, [r3, #112]	@ 0x70

    return HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e000      	b.n	80015f2 <HAL_ETH_Start_IT+0x100>
  }
  else
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
  }
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
	...

08001600 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d067      	beq.n	80016e0 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2223      	movs	r2, #35	@ 0x23
 8001614:	66da      	str	r2, [r3, #108]	@ 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800161e:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b32      	ldr	r3, [pc, #200]	@ (80016f0 <HAL_ETH_Stop_IT+0xf0>)
 8001628:	400b      	ands	r3, r1
 800162a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800162e:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800163a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	f023 0301 	bic.w	r3, r3, #1
 8001646:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800164a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001656:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	f023 0301 	bic.w	r3, r3, #1
 8001662:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001666:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f022 0201 	bic.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0202 	bic.w	r2, r2, #2
 800169c:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	e00f      	b.n	80016c4 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	3310      	adds	r3, #16
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2b03      	cmp	r3, #3
 80016c8:	d9ec      	bls.n	80016a4 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	665a      	str	r2, [r3, #100]	@ 0x64

    heth->gState = HAL_ETH_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2210      	movs	r2, #16
 80016d4:	66da      	str	r2, [r3, #108]	@ 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2210      	movs	r2, #16
 80016da:	671a      	str	r2, [r3, #112]	@ 0x70

    /* Return function status */
    return HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	e000      	b.n	80016e2 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
  }
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	ffff2fbe 	.word	0xffff2fbe

080016f4 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d107      	bne.n	8001716 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800170a:	f043 0201 	orr.w	r2, r3, #1
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	675a      	str	r2, [r3, #116]	@ 0x74
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e076      	b.n	8001804 <HAL_ETH_Transmit+0x110>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800171a:	2b10      	cmp	r3, #16
 800171c:	d171      	bne.n	8001802 <HAL_ETH_Transmit+0x10e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800171e:	2200      	movs	r2, #0
 8001720:	68b9      	ldr	r1, [r7, #8]
 8001722:	68f8      	ldr	r0, [r7, #12]
 8001724:	f001 fa22 	bl	8002b6c <ETH_Prepare_Tx_Descriptors>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001732:	f043 0202 	orr.w	r2, r3, #2
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	675a      	str	r2, [r3, #116]	@ 0x74
      return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e062      	b.n	8001804 <HAL_ETH_Transmit+0x110>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	3206      	adds	r2, #6
 8001746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800174a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001750:	1c5a      	adds	r2, r3, #1
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	629a      	str	r2, [r3, #40]	@ 0x28
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	2b03      	cmp	r3, #3
 800175c:	d904      	bls.n	8001768 <HAL_ETH_Transmit+0x74>
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	1f1a      	subs	r2, r3, #4
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3106      	adds	r1, #6
 8001774:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800177c:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120

    tickstart = HAL_GetTick();
 8001780:	f7ff fbfe 	bl	8000f80 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8001786:	e036      	b.n	80017f6 <HAL_ETH_Transmit+0x102>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001790:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001794:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d012      	beq.n	80017c2 <HAL_ETH_Transmit+0xce>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a0:	f043 0208 	orr.w	r2, r3, #8
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	675a      	str	r2, [r3, #116]	@ 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b0:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	679a      	str	r2, [r3, #120]	@ 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	22e0      	movs	r2, #224	@ 0xe0
 80017bc:	66da      	str	r2, [r3, #108]	@ 0x6c
        /* Return function status */
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e020      	b.n	8001804 <HAL_ETH_Transmit+0x110>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c8:	d015      	beq.n	80017f6 <HAL_ETH_Transmit+0x102>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80017ca:	f7ff fbd9 	bl	8000f80 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	429a      	cmp	r2, r3
 80017d8:	d302      	bcc.n	80017e0 <HAL_ETH_Transmit+0xec>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10a      	bne.n	80017f6 <HAL_ETH_Transmit+0x102>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	675a      	str	r2, [r3, #116]	@ 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	22e0      	movs	r2, #224	@ 0xe0
 80017f0:	66da      	str	r2, [r3, #108]	@ 0x6c
          return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e006      	b.n	8001804 <HAL_ETH_Transmit+0x110>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	dbc4      	blt.n	8001788 <HAL_ETH_Transmit+0x94>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_ETH_Transmit+0x110>
  }
  else
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800180c:	b480      	push	{r7}
 800180e:	b089      	sub	sp, #36	@ 0x24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3344      	adds	r3, #68	@ 0x44
 8001818:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001828:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d06b      	beq.n	8001916 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 800183e:	2300      	movs	r3, #0
 8001840:	e0ce      	b.n	80019e0 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d036      	beq.n	80018c2 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	3301      	adds	r3, #1
 8001858:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d101      	bne.n	8001864 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d902      	bls.n	8001876 <HAL_ETH_IsRxDataAvailable+0x6a>
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	3b04      	subs	r3, #4
 8001874:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	69fa      	ldr	r2, [r7, #28]
 800187a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800187e:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db11      	blt.n	80018ac <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2201      	movs	r2, #1
 8001898:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3301      	adds	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d902      	bls.n	80018ac <HAL_ETH_IsRxDataAvailable+0xa0>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b04      	subs	r3, #4
 80018aa:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	69fa      	ldr	r2, [r7, #28]
 80018b0:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80018be:	2301      	movs	r3, #1
 80018c0:	e08e      	b.n	80019e0 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d012      	beq.n	80018f4 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80018d2:	2301      	movs	r3, #1
 80018d4:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3301      	adds	r3, #1
 80018da:	61fb      	str	r3, [r7, #28]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d902      	bls.n	80018e8 <HAL_ETH_IsRxDataAvailable+0xdc>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b04      	subs	r3, #4
 80018e6:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	69fa      	ldr	r2, [r7, #28]
 80018ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f0:	61bb      	str	r3, [r7, #24]
 80018f2:	e010      	b.n	8001916 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	3301      	adds	r3, #1
 80018f8:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3301      	adds	r3, #1
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d902      	bls.n	800190c <HAL_ETH_IsRxDataAvailable+0x100>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b04      	subs	r3, #4
 800190a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001914:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db02      	blt.n	8001924 <HAL_ETH_IsRxDataAvailable+0x118>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b03      	cmp	r3, #3
 8001922:	d98e      	bls.n	8001842 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d056      	beq.n	80019d8 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	e03b      	b.n	80019c2 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001958:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d009      	beq.n	8001976 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	695a      	ldr	r2, [r3, #20]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	6a1b      	ldr	r3, [r3, #32]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d005      	beq.n	8001996 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	3b01      	subs	r3, #1
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	429a      	cmp	r2, r3
 800199e:	d20d      	bcs.n	80019bc <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61fb      	str	r3, [r7, #28]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d902      	bls.n	80019b2 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	3b04      	subs	r3, #4
 80019b0:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	69fa      	ldr	r2, [r7, #28]
 80019b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ba:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	3301      	adds	r3, #1
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d3bf      	bcc.n	800194a <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019d4:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]

  return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3724      	adds	r7, #36	@ 0x24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3344      	adds	r3, #68	@ 0x44
 80019fa:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0e:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d104      	bne.n	8001a24 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	675a      	str	r2, [r3, #116]	@ 0x74
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e07d      	b.n	8001b20 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10f      	bne.n	8001a4c <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff feed 	bl	800180c <HAL_ETH_IsRxDataAvailable>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d101      	bne.n	8001a3c <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e071      	b.n	8001b20 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
 8001a50:	e031      	b.n	8001ab6 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	461a      	mov	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00b      	beq.n	8001a84 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a8c:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a90:	3301      	adds	r3, #1
 8001a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d902      	bls.n	8001aa0 <HAL_ETH_GetRxDataBuffer+0xb4>
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	3b04      	subs	r3, #4
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aa8:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	623b      	str	r3, [r7, #32]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d3c7      	bcc.n	8001a52 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d803      	bhi.n	8001aec <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
 8001aea:	e018      	b.n	8001b1e <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d012      	beq.n	8001b1a <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	461a      	mov	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	1ad2      	subs	r2, r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	e001      	b.n	8001b1e <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3728      	adds	r7, #40	@ 0x28
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3344      	adds	r3, #68	@ 0x44
 8001b36:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	699b      	ldr	r3, [r3, #24]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d107      	bne.n	8001b56 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff fe60 	bl	800180c <HAL_ETH_IsRxDataAvailable>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e017      	b.n	8001b86 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	699a      	ldr	r2, [r3, #24]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	617b      	str	r3, [r7, #20]
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d902      	bls.n	8001b6e <HAL_ETH_GetRxDataLength+0x46>
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b76:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	b089      	sub	sp, #36	@ 0x24
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3344      	adds	r3, #68	@ 0x44
 8001b9a:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	69fa      	ldr	r2, [r7, #28]
 8001ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001baa:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e057      	b.n	8001c6e <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001bcc:	2300      	movs	r3, #0
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	e03b      	b.n	8001c4a <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001be0:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	695b      	ldr	r3, [r3, #20]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d009      	beq.n	8001bfe <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3b01      	subs	r3, #1
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d20d      	bcs.n	8001c44 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d902      	bls.n	8001c3a <HAL_ETH_BuildRxDescriptors+0xac>
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	3b04      	subs	r3, #4
 8001c38:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c42:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	3301      	adds	r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3bf      	bcc.n	8001bd2 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c5c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3724      	adds	r7, #36	@ 0x24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
	...

08001c7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c8c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c94:	2b40      	cmp	r3, #64	@ 0x40
 8001c96:	d115      	bne.n	8001cc4 <HAL_ETH_IRQHandler+0x48>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ca0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca8:	2b40      	cmp	r3, #64	@ 0x40
 8001caa:	d10b      	bne.n	8001cc4 <HAL_ETH_IRQHandler+0x48>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f003 f8d9 	bl	8004e64 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cba:	461a      	mov	r2, r3
 8001cbc:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001cc0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ccc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d115      	bne.n	8001d04 <HAL_ETH_IRQHandler+0x88>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ce0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d10b      	bne.n	8001d04 <HAL_ETH_IRQHandler+0x88>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 f8d3 	bl	8001e98 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	f248 0301 	movw	r3, #32769	@ 0x8001
 8001d00:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d0c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d18:	d14e      	bne.n	8001db8 <HAL_ETH_IRQHandler+0x13c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d22:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d2e:	d143      	bne.n	8001db8 <HAL_ETH_IRQHandler+0x13c>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d34:	f043 0208 	orr.w	r2, r3, #8
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d44:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d50:	d11c      	bne.n	8001d8c <HAL_ETH_IRQHandler+0x110>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d5a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8001d5e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6793      	str	r3, [r2, #120]	@ 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d70:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001d7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001d80:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	22e0      	movs	r2, #224	@ 0xe0
 8001d88:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001d8a:	e012      	b.n	8001db2 <HAL_ETH_IRQHandler+0x136>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d94:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8001d98:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	679a      	str	r2, [r3, #120]	@ 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001da8:	461a      	mov	r2, r3
 8001daa:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8001dae:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f87a 	bl	8001eac <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001dc0:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8001dc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8001dc8:	d10e      	bne.n	8001de8 <HAL_ETH_IRQHandler+0x16c>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	67da      	str	r2, [r3, #124]	@ 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	22e0      	movs	r2, #224	@ 0xe0
 8001dda:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f86f 	bl	8001ec0 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	67da      	str	r2, [r3, #124]	@ 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001df0:	f003 0310 	and.w	r3, r3, #16
 8001df4:	2b10      	cmp	r3, #16
 8001df6:	d10f      	bne.n	8001e18 <HAL_ETH_IRQHandler+0x19c>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e00:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f862 	bl	8001ed4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001e20:	f003 0320 	and.w	r3, r3, #32
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d10f      	bne.n	8001e48 <HAL_ETH_IRQHandler+0x1cc>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001e30:	f003 020f 	and.w	r2, r3, #15
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f854 	bl	8001ee8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001e48:	f7ff fa22 	bl	8001290 <HAL_GetCurrentCPUID>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d10d      	bne.n	8001e6e <HAL_ETH_IRQHandler+0x1f2>
  {
    /* check ETH WAKEUP exti flag */
    if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e52:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <HAL_ETH_IRQHandler+0x214>)
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d014      	beq.n	8001e88 <HAL_ETH_IRQHandler+0x20c>
    {
      /* Clear ETH WAKEUP Exti pending bit */
      __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_ETH_IRQHandler+0x214>)
 8001e60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e64:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f848 	bl	8001efc <HAL_ETH_WakeUpCallback>
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
#endif
  }
#endif
}
 8001e6c:	e00c      	b.n	8001e88 <HAL_ETH_IRQHandler+0x20c>
    if(__HAL_ETH_WAKEUP_EXTID2_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001e6e:	4b09      	ldr	r3, [pc, #36]	@ (8001e94 <HAL_ETH_IRQHandler+0x218>)
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HAL_ETH_IRQHandler+0x20c>
      __HAL_ETH_WAKEUP_EXTID2_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001e7a:	4b06      	ldr	r3, [pc, #24]	@ (8001e94 <HAL_ETH_IRQHandler+0x218>)
 8001e7c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001e80:	629a      	str	r2, [r3, #40]	@ 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f83a 	bl	8001efc <HAL_ETH_WakeUpCallback>
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	58000080 	.word	0x58000080
 8001e94:	580000c0 	.word	0x580000c0

08001e98 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8001eb4:	bf00      	nop
 8001eb6:	370c      	adds	r7, #12
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001edc:	bf00      	nop
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e03e      	b.n	8001fb0 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f3a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	055b      	lsls	r3, r3, #21
 8001f46:	4313      	orrs	r3, r2
 8001f48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	f043 030c 	orr.w	r3, r3, #12
 8001f5e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f043 0301 	orr.w	r3, r3, #1
 8001f66:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8001f72:	f7ff f805 	bl	8000f80 <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f78:	e009      	b.n	8001f8e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001f7a:	f7ff f801 	bl	8000f80 <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f88:	d901      	bls.n	8001f8e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e010      	b.n	8001fb0 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1ed      	bne.n	8001f7a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e03c      	b.n	8002054 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fe2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	055b      	lsls	r3, r3, #21
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	041b      	lsls	r3, r3, #16
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	f023 030c 	bic.w	r3, r3, #12
 8002006:	f043 0304 	orr.w	r3, r3, #4
 800200a:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	b29a      	uxth	r2, r3
 8002018:	4b10      	ldr	r3, [pc, #64]	@ (800205c <HAL_ETH_WritePHYRegister+0xa4>)
 800201a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 800201e:	4a0f      	ldr	r2, [pc, #60]	@ (800205c <HAL_ETH_WritePHYRegister+0xa4>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

  tickstart = HAL_GetTick();
 8002026:	f7fe ffab 	bl	8000f80 <HAL_GetTick>
 800202a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800202c:	e009      	b.n	8002042 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 800202e:	f7fe ffa7 	bl	8000f80 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800203c:	d901      	bls.n	8002042 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e008      	b.n	8002054 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1ed      	bne.n	800202e <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002052:	2300      	movs	r3, #0
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40028000 	.word	0x40028000

08002060 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e1c3      	b.n	80023fc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 020c 	and.w	r2, r3, #12
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	62da      	str	r2, [r3, #44]	@ 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0310 	and.w	r3, r3, #16
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf14      	ite	ne
 8002090:	2301      	movne	r3, #1
 8002092:	2300      	moveq	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf14      	ite	ne
 80020d6:	2301      	movne	r3, #1
 80020d8:	2300      	moveq	r3, #0
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	461a      	mov	r2, r3
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf14      	ite	ne
 800210a:	2301      	movne	r3, #1
 800210c:	2300      	moveq	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	461a      	mov	r2, r3
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002120:	2b00      	cmp	r3, #0
 8002122:	bf14      	ite	ne
 8002124:	2301      	movne	r3, #1
 8002126:	2300      	moveq	r3, #0
 8002128:	b2db      	uxtb	r3, r3
 800212a:	461a      	mov	r2, r3
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800218a:	2b00      	cmp	r3, #0
 800218c:	bf0c      	ite	eq
 800218e:	2301      	moveq	r3, #1
 8002190:	2300      	movne	r3, #0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	461a      	mov	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf14      	ite	ne
 80021a8:	2301      	movne	r3, #1
 80021aa:	2300      	moveq	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	461a      	mov	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	bf14      	ite	ne
 80021f6:	2301      	movne	r3, #1
 80021f8:	2300      	moveq	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf14      	ite	ne
 800221e:	2301      	movne	r3, #1
 8002220:	2300      	moveq	r3, #0
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	635a      	str	r2, [r3, #52]	@ 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf14      	ite	ne
 8002270:	2301      	movne	r3, #1
 8002272:	2300      	moveq	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002288:	2b00      	cmp	r3, #0
 800228a:	bf14      	ite	ne
 800228c:	2301      	movne	r3, #1
 800228e:	2300      	moveq	r3, #0
 8002290:	b2db      	uxtb	r3, r3
 8002292:	461a      	mov	r2, r3
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	0e5b      	lsrs	r3, r3, #25
 80022be:	f003 021f 	and.w	r2, r3, #31
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	63da      	str	r2, [r3, #60]	@ 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	bf14      	ite	ne
 80022d4:	2301      	movne	r3, #1
 80022d6:	2300      	moveq	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	461a      	mov	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 020f 	and.w	r2, r3, #15
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	645a      	str	r2, [r3, #68]	@ 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002316:	2b00      	cmp	r3, #0
 8002318:	bf0c      	ite	eq
 800231a:	2301      	moveq	r3, #1
 800231c:	2300      	movne	r3, #0
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	0c1b      	lsrs	r3, r3, #16
 800233e:	b29a      	uxth	r2, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	649a      	str	r2, [r3, #72]	@ 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	2b00      	cmp	r3, #0
 8002352:	bf14      	ite	ne
 8002354:	2301      	movne	r3, #1
 8002356:	2300      	moveq	r3, #0
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	bf14      	ite	ne
 8002372:	2301      	movne	r3, #1
 8002374:	2300      	moveq	r3, #0
 8002376:	b2db      	uxtb	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002388:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	659a      	str	r2, [r3, #88]	@ 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002398:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	65da      	str	r2, [r3, #92]	@ 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	461a      	mov	r2, r3
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80023e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf0c      	ite	eq
 80023ec:	2301      	moveq	r3, #1
 80023ee:	2300      	movne	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	461a      	mov	r2, r3
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e00a      	b.n	8002432 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002420:	2b10      	cmp	r3, #16
 8002422:	d105      	bne.n	8002430 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f860 	bl	80024ec <ETH_SetMACConfig>

    return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800244c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002454:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002456:	f001 ff7d 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 800245a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	4a1e      	ldr	r2, [pc, #120]	@ (80024d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d908      	bls.n	8002476 <HAL_ETH_SetMDIOClockRange+0x3a>
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4a1d      	ldr	r2, [pc, #116]	@ (80024dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d804      	bhi.n	8002476 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e027      	b.n	80024c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4a18      	ldr	r2, [pc, #96]	@ (80024dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d908      	bls.n	8002490 <HAL_ETH_SetMDIOClockRange+0x54>
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4a17      	ldr	r2, [pc, #92]	@ (80024e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d204      	bcs.n	8002490 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e01a      	b.n	80024c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	4a13      	ldr	r2, [pc, #76]	@ (80024e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d303      	bcc.n	80024a0 <HAL_ETH_SetMDIOClockRange+0x64>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d911      	bls.n	80024c4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	4a10      	ldr	r2, [pc, #64]	@ (80024e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d908      	bls.n	80024ba <HAL_ETH_SetMDIOClockRange+0x7e>
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4a0f      	ldr	r2, [pc, #60]	@ (80024e8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d804      	bhi.n	80024ba <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e005      	b.n	80024c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	e000      	b.n	80024c6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80024c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80024d0:	bf00      	nop
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	01312cff 	.word	0x01312cff
 80024dc:	02160ebf 	.word	0x02160ebf
 80024e0:	03938700 	.word	0x03938700
 80024e4:	05f5e0ff 	.word	0x05f5e0ff
 80024e8:	08f0d17f 	.word	0x08f0d17f

080024ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80024fe:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	791b      	ldrb	r3, [r3, #4]
 8002504:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002506:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	7b1b      	ldrb	r3, [r3, #12]
 800250c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800250e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	7b5b      	ldrb	r3, [r3, #13]
 8002514:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002516:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	7b9b      	ldrb	r3, [r3, #14]
 800251c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800251e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	7bdb      	ldrb	r3, [r3, #15]
 8002524:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002526:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	7c12      	ldrb	r2, [r2, #16]
 800252c:	2a00      	cmp	r2, #0
 800252e:	d102      	bne.n	8002536 <ETH_SetMACConfig+0x4a>
 8002530:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002534:	e000      	b.n	8002538 <ETH_SetMACConfig+0x4c>
 8002536:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002538:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	7c52      	ldrb	r2, [r2, #17]
 800253e:	2a00      	cmp	r2, #0
 8002540:	d102      	bne.n	8002548 <ETH_SetMACConfig+0x5c>
 8002542:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002546:	e000      	b.n	800254a <ETH_SetMACConfig+0x5e>
 8002548:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800254a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	7c9b      	ldrb	r3, [r3, #18]
 8002550:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002552:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002558:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800255e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	7f1b      	ldrb	r3, [r3, #28]
 8002564:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002566:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	7f5b      	ldrb	r3, [r3, #29]
 800256c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800256e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	7f92      	ldrb	r2, [r2, #30]
 8002574:	2a00      	cmp	r2, #0
 8002576:	d102      	bne.n	800257e <ETH_SetMACConfig+0x92>
 8002578:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800257c:	e000      	b.n	8002580 <ETH_SetMACConfig+0x94>
 800257e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002580:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7fdb      	ldrb	r3, [r3, #31]
 8002586:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002588:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d102      	bne.n	800259a <ETH_SetMACConfig+0xae>
 8002594:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002598:	e000      	b.n	800259c <ETH_SetMACConfig+0xb0>
 800259a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800259c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80025a2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80025aa:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80025ac:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval =(macconf->InterPacketGapVal |
 80025b2:	4313      	orrs	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	4b56      	ldr	r3, [pc, #344]	@ (8002718 <ETH_SetMACConfig+0x22c>)
 80025be:	4013      	ands	r3, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	68f9      	ldr	r1, [r7, #12]
 80025c6:	430b      	orrs	r3, r1
 80025c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80025d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80025d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80025e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80025ea:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80025ec:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80025ee:	683a      	ldr	r2, [r7, #0]
 80025f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d102      	bne.n	80025fe <ETH_SetMACConfig+0x112>
 80025f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025fc:	e000      	b.n	8002600 <ETH_SetMACConfig+0x114>
 80025fe:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002600:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	4b42      	ldr	r3, [pc, #264]	@ (800271c <ETH_SetMACConfig+0x230>)
 8002612:	4013      	ands	r3, r2
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	6812      	ldr	r2, [r2, #0]
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	430b      	orrs	r3, r1
 800261c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002624:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800262a:	4313      	orrs	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68da      	ldr	r2, [r3, #12]
 8002634:	4b3a      	ldr	r3, [pc, #232]	@ (8002720 <ETH_SetMACConfig+0x234>)
 8002636:	4013      	ands	r3, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6812      	ldr	r2, [r2, #0]
 800263c:	68f9      	ldr	r1, [r7, #12]
 800263e:	430b      	orrs	r3, r1
 8002640:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002648:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800264e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002656:	2a00      	cmp	r2, #0
 8002658:	d101      	bne.n	800265e <ETH_SetMACConfig+0x172>
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	e000      	b.n	8002660 <ETH_SetMACConfig+0x174>
 800265e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002660:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002666:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002668:	4313      	orrs	r3, r2
 800266a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002672:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	68f9      	ldr	r1, [r7, #12]
 800267e:	430b      	orrs	r3, r1
 8002680:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002688:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002690:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002692:	4313      	orrs	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800269e:	f023 0103 	bic.w	r1, r3, #3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80026b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80026d2:	2a00      	cmp	r2, #0
 80026d4:	d101      	bne.n	80026da <ETH_SetMACConfig+0x1ee>
 80026d6:	2240      	movs	r2, #64	@ 0x40
 80026d8:	e000      	b.n	80026dc <ETH_SetMACConfig+0x1f0>
 80026da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80026dc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80026e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80026e6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80026ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80026fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	430a      	orrs	r2, r1
 8002708:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800270c:	bf00      	nop
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	00048083 	.word	0x00048083
 800271c:	c0f88000 	.word	0xc0f88000
 8002720:	fffffef0 	.word	0xfffffef0

08002724 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b38      	ldr	r3, [pc, #224]	@ (800281c <ETH_SetDMAConfig+0xf8>)
 800273a:	4013      	ands	r3, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6811      	ldr	r1, [r2, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	430b      	orrs	r3, r1
 8002746:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800274a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	791b      	ldrb	r3, [r3, #4]
 8002750:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002756:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	7b1b      	ldrb	r3, [r3, #12]
 800275c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800275e:	4313      	orrs	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	4b2c      	ldr	r3, [pc, #176]	@ (8002820 <ETH_SetDMAConfig+0xfc>)
 800276e:	4013      	ands	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6812      	ldr	r2, [r2, #0]
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	430b      	orrs	r3, r1
 8002778:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800277c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	7b5b      	ldrb	r3, [r3, #13]
 8002782:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002794:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002798:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <ETH_SetDMAConfig+0x100>)
 800279a:	4013      	ands	r3, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	68f9      	ldr	r1, [r7, #12]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	7d1b      	ldrb	r3, [r3, #20]
 80027b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80027b6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	7f5b      	ldrb	r3, [r3, #29]
 80027bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80027ce:	4b16      	ldr	r3, [pc, #88]	@ (8002828 <ETH_SetDMAConfig+0x104>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	68f9      	ldr	r1, [r7, #12]
 80027d8:	430b      	orrs	r3, r1
 80027da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80027de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7f1b      	ldrb	r3, [r3, #28]
 80027e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80027ec:	4313      	orrs	r3, r2
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80027fc:	4b0b      	ldr	r3, [pc, #44]	@ (800282c <ETH_SetDMAConfig+0x108>)
 80027fe:	4013      	ands	r3, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	430b      	orrs	r3, r1
 8002808:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800280c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002810:	bf00      	nop
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	ffff87fd 	.word	0xffff87fd
 8002820:	ffff2ffe 	.word	0xffff2ffe
 8002824:	fffec000 	.word	0xfffec000
 8002828:	ffc0efef 	.word	0xffc0efef
 800282c:	7fc0ffff 	.word	0x7fc0ffff

08002830 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b0a4      	sub	sp, #144	@ 0x90
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002838:	2301      	movs	r3, #1
 800283a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800283e:	2300      	movs	r3, #0
 8002840:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800284e:	2301      	movs	r3, #1
 8002850:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002854:	2301      	movs	r3, #1
 8002856:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002860:	2300      	movs	r3, #0
 8002862:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800286c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002870:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002878:	2300      	movs	r3, #0
 800287a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002888:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800288c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002894:	2300      	movs	r3, #0
 8002896:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002898:	2301      	movs	r3, #1
 800289a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80028aa:	2300      	movs	r3, #0
 80028ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80028b2:	2300      	movs	r3, #0
 80028b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028bc:	2300      	movs	r3, #0
 80028be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80028c2:	2301      	movs	r3, #1
 80028c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80028c8:	2320      	movs	r3, #32
 80028ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80028ce:	2301      	movs	r3, #1
 80028d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80028da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80028de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80028e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80028ec:	2302      	movs	r3, #2
 80028ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800290a:	2300      	movs	r3, #0
 800290c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002914:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002918:	4619      	mov	r1, r3
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff fde6 	bl	80024ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002920:	2301      	movs	r3, #1
 8002922:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002924:	2301      	movs	r3, #1
 8002926:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002928:	2300      	movs	r3, #0
 800292a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800293a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800293e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002940:	2300      	movs	r3, #0
 8002942:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002944:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002948:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002950:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fee1 	bl	8002724 <ETH_SetDMAConfig>
}
 8002962:	bf00      	nop
 8002964:	3790      	adds	r7, #144	@ 0x90
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800297c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002984:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002986:	f001 fce5 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 800298a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4a1e      	ldr	r2, [pc, #120]	@ (8002a08 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d908      	bls.n	80029a6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d804      	bhi.n	80029a6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	e027      	b.n	80029f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4a18      	ldr	r2, [pc, #96]	@ (8002a0c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d908      	bls.n	80029c0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	4a17      	ldr	r2, [pc, #92]	@ (8002a10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d204      	bcs.n	80029c0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	e01a      	b.n	80029f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4a13      	ldr	r2, [pc, #76]	@ (8002a10 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d303      	bcc.n	80029d0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4a12      	ldr	r2, [pc, #72]	@ (8002a14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d911      	bls.n	80029f4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4a10      	ldr	r2, [pc, #64]	@ (8002a14 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d908      	bls.n	80029ea <ETH_MAC_MDIO_ClkConfig+0x7e>
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4a0f      	ldr	r2, [pc, #60]	@ (8002a18 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d804      	bhi.n	80029ea <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	e005      	b.n	80029f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	e000      	b.n	80029f6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80029f4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002a00:	bf00      	nop
 8002a02:	3710      	adds	r7, #16
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	01312cff 	.word	0x01312cff
 8002a0c:	02160ebf 	.word	0x02160ebf
 8002a10:	03938700 	.word	0x03938700
 8002a14:	05f5e0ff 	.word	0x05f5e0ff
 8002a18:	08f0d17f 	.word	0x08f0d17f

08002a1c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	e01d      	b.n	8002a66 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68d9      	ldr	r1, [r3, #12]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4613      	mov	r3, r2
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2200      	movs	r2, #0
 8002a52:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	3206      	adds	r2, #6
 8002a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d9de      	bls.n	8002a2a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8e:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9e:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e024      	b.n	8002b06 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	6879      	ldr	r1, [r7, #4]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	3310      	adds	r3, #16
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	3301      	adds	r3, #1
 8002b04:	60fb      	str	r3, [r7, #12]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d9d7      	bls.n	8002abc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	655a      	str	r2, [r3, #84]	@ 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	659a      	str	r2, [r3, #88]	@ 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	665a      	str	r2, [r3, #100]	@ 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b32:	461a      	mov	r2, r3
 8002b34:	2303      	movs	r3, #3
 8002b36:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691a      	ldr	r2, [r3, #16]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b46:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b5a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8002b5e:	bf00      	nop
 8002b60:	3714      	adds	r7, #20
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b08d      	sub	sp, #52	@ 0x34
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3318      	adds	r3, #24
 8002b7c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b96:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002baa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002bae:	d007      	beq.n	8002bc0 <ETH_Prepare_Tx_Descriptors+0x54>
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e24a      	b.n	800305a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d044      	beq.n	8002c5a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	4b72      	ldr	r3, [pc, #456]	@ (8002da0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002bfc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d027      	beq.n	8002c5a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8002c0a:	6a3b      	ldr	r3, [r7, #32]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	431a      	orrs	r2, r3
 8002c18:	6a3b      	ldr	r3, [r7, #32]
 8002c1a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c34:	431a      	orrs	r2, r3
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002c48:	665a      	str	r2, [r3, #100]	@ 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002c58:	651a      	str	r2, [r3, #80]	@ 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00e      	beq.n	8002c84 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8002da4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	6992      	ldr	r2, [r2, #24]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <ETH_Prepare_Tx_Descriptors+0x130>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d030      	beq.n	8002cfe <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002ca4:	6a3b      	ldr	r3, [r7, #32]
 8002ca6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d902      	bls.n	8002cc6 <ETH_Prepare_Tx_Descriptors+0x15a>
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	3b04      	subs	r3, #4
 8002cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cce:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8002cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8002cd6:	6a3b      	ldr	r3, [r7, #32]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002cde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ce2:	d10c      	bne.n	8002cfe <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	693a      	ldr	r2, [r7, #16]
 8002ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cec:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e1ad      	b.n	800305a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	3301      	adds	r3, #1
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	6852      	ldr	r2, [r2, #4]
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d012      	beq.n	8002d4e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	689a      	ldr	r2, [r3, #8]
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002da8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	6852      	ldr	r2, [r2, #4]
 8002d44:	0412      	lsls	r2, r2, #16
 8002d46:	431a      	orrs	r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	609a      	str	r2, [r3, #8]
 8002d4c:	e008      	b.n	8002d60 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	2200      	movs	r2, #0
 8002d52:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	6a3a      	ldr	r2, [r7, #32]
 8002d5e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d021      	beq.n	8002db0 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	f423 02f0 	bic.w	r2, r3, #7864320	@ 0x780000
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	04db      	lsls	r3, r3, #19
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <ETH_Prepare_Tx_Descriptors+0x240>)
 8002d86:	4013      	ands	r3, r2
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	69d2      	ldr	r2, [r2, #28]
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002d92:	6a3b      	ldr	r3, [r7, #32]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	e02e      	b.n	8002dfe <ETH_Prepare_Tx_Descriptors+0x292>
 8002da0:	ffff0000 	.word	0xffff0000
 8002da4:	ffffc000 	.word	0xffffc000
 8002da8:	c000ffff 	.word	0xc000ffff
 8002dac:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4b93      	ldr	r3, [pc, #588]	@ (8003004 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	68ba      	ldr	r2, [r7, #8]
 8002dba:	6852      	ldr	r2, [r2, #4]
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d008      	beq.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0320 	and.w	r3, r3, #32
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8002e0a:	6a3b      	ldr	r3, [r7, #32]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e16:	431a      	orrs	r2, r3
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80cb 	beq.w	8002fe4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 7260 	bic.w	r2, r3, #58720256	@ 0x3800000
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e60:	e0c0      	b.n	8002fe4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002e6a:	6a3b      	ldr	r3, [r7, #32]
 8002e6c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d902      	bls.n	8002e80 <ETH_Prepare_Tx_Descriptors+0x314>
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	3b04      	subs	r3, #4
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ea2:	d007      	beq.n	8002eb4 <ETH_Prepare_Tx_Descriptors+0x348>
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d026      	beq.n	8002f02 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec6:	e016      	b.n	8002ef6 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d902      	bls.n	8002ee6 <ETH_Prepare_Tx_Descriptors+0x37a>
 8002ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee2:	3b04      	subs	r3, #4
 8002ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002eea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eee:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8002ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3e4      	bcc.n	8002ec8 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e0ab      	b.n	800305a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8002f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f04:	3301      	adds	r3, #1
 8002f06:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	6a3b      	ldr	r3, [r7, #32]
 8002f16:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8003008 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	6852      	ldr	r2, [r2, #4]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d012      	beq.n	8002f58 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	689a      	ldr	r2, [r3, #8]
 8002f46:	4b31      	ldr	r3, [pc, #196]	@ (800300c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	6852      	ldr	r2, [r2, #4]
 8002f4e:	0412      	lsls	r2, r2, #16
 8002f50:	431a      	orrs	r2, r3
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	e008      	b.n	8002f6a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8002f64:	4013      	ands	r3, r2
 8002f66:	6a3a      	ldr	r2, [r7, #32]
 8002f68:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00f      	beq.n	8002f96 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b25      	ldr	r3, [pc, #148]	@ (8003010 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68ba      	ldr	r2, [r7, #8]
 8002f80:	69d2      	ldr	r2, [r2, #28]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	60da      	str	r2, [r3, #12]
 8002f94:	e017      	b.n	8002fc6 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <ETH_Prepare_Tx_Descriptors+0x498>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	6852      	ldr	r2, [r2, #4]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fd4:	6a3b      	ldr	r3, [r7, #32]
 8002fd6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8002fd8:	6a3b      	ldr	r3, [r7, #32]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f47f af3a 	bne.w	8002e62 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00f      	beq.n	8003014 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8002ff4:	6a3b      	ldr	r3, [r7, #32]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	e00e      	b.n	8003020 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003002:	bf00      	nop
 8003004:	ffff8000 	.word	0xffff8000
 8003008:	ffffc000 	.word	0xffffc000
 800300c:	c000ffff 	.word	0xc000ffff
 8003010:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003030:	6979      	ldr	r1, [r7, #20]
 8003032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003034:	3304      	adds	r3, #4
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003040:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003042:	b672      	cpsid	i
}
 8003044:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	4413      	add	r3, r2
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	629a      	str	r2, [r3, #40]	@ 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003054:	b662      	cpsie	i
}
 8003056:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3734      	adds	r7, #52	@ 0x34
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop

08003068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003068:	b480      	push	{r7}
 800306a:	b089      	sub	sp, #36	@ 0x24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003072:	2300      	movs	r3, #0
 8003074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003076:	4b89      	ldr	r3, [pc, #548]	@ (800329c <HAL_GPIO_Init+0x234>)
 8003078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800307a:	e194      	b.n	80033a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8186 	beq.w	80033a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b01      	cmp	r3, #1
 800309a:	d00b      	beq.n	80030b4 <HAL_GPIO_Init+0x4c>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d007      	beq.n	80030b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a8:	2b11      	cmp	r3, #17
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b12      	cmp	r3, #18
 80030b2:	d130      	bne.n	8003116 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ea:	2201      	movs	r2, #1
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4013      	ands	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 0201 	and.w	r2, r3, #1
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	4313      	orrs	r3, r2
 800310e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	2203      	movs	r2, #3
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4313      	orrs	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0xee>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b12      	cmp	r3, #18
 8003154:	d123      	bne.n	800319e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	08da      	lsrs	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	3208      	adds	r2, #8
 800315e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	220f      	movs	r2, #15
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43db      	mvns	r3, r3
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4013      	ands	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	fa02 f303 	lsl.w	r3, r2, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4313      	orrs	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	08da      	lsrs	r2, r3, #3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3208      	adds	r2, #8
 8003198:	69b9      	ldr	r1, [r7, #24]
 800319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f003 0203 	and.w	r2, r3, #3
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 80e0 	beq.w	80033a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e0:	4b2f      	ldr	r3, [pc, #188]	@ (80032a0 <HAL_GPIO_Init+0x238>)
 80031e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80031e6:	4a2e      	ldr	r2, [pc, #184]	@ (80032a0 <HAL_GPIO_Init+0x238>)
 80031e8:	f043 0302 	orr.w	r3, r3, #2
 80031ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_GPIO_Init+0x238>)
 80031f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031fe:	4a29      	ldr	r2, [pc, #164]	@ (80032a4 <HAL_GPIO_Init+0x23c>)
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	220f      	movs	r2, #15
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4013      	ands	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a20      	ldr	r2, [pc, #128]	@ (80032a8 <HAL_GPIO_Init+0x240>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d052      	beq.n	80032d0 <HAL_GPIO_Init+0x268>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_GPIO_Init+0x244>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d031      	beq.n	8003296 <HAL_GPIO_Init+0x22e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <HAL_GPIO_Init+0x248>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d02b      	beq.n	8003292 <HAL_GPIO_Init+0x22a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1d      	ldr	r2, [pc, #116]	@ (80032b4 <HAL_GPIO_Init+0x24c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d025      	beq.n	800328e <HAL_GPIO_Init+0x226>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1c      	ldr	r2, [pc, #112]	@ (80032b8 <HAL_GPIO_Init+0x250>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01f      	beq.n	800328a <HAL_GPIO_Init+0x222>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1b      	ldr	r2, [pc, #108]	@ (80032bc <HAL_GPIO_Init+0x254>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d019      	beq.n	8003286 <HAL_GPIO_Init+0x21e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a1a      	ldr	r2, [pc, #104]	@ (80032c0 <HAL_GPIO_Init+0x258>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d013      	beq.n	8003282 <HAL_GPIO_Init+0x21a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a19      	ldr	r2, [pc, #100]	@ (80032c4 <HAL_GPIO_Init+0x25c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00d      	beq.n	800327e <HAL_GPIO_Init+0x216>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a18      	ldr	r2, [pc, #96]	@ (80032c8 <HAL_GPIO_Init+0x260>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d007      	beq.n	800327a <HAL_GPIO_Init+0x212>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a17      	ldr	r2, [pc, #92]	@ (80032cc <HAL_GPIO_Init+0x264>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d101      	bne.n	8003276 <HAL_GPIO_Init+0x20e>
 8003272:	2309      	movs	r3, #9
 8003274:	e02d      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003276:	230a      	movs	r3, #10
 8003278:	e02b      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800327a:	2308      	movs	r3, #8
 800327c:	e029      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800327e:	2307      	movs	r3, #7
 8003280:	e027      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003282:	2306      	movs	r3, #6
 8003284:	e025      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003286:	2305      	movs	r3, #5
 8003288:	e023      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800328a:	2304      	movs	r3, #4
 800328c:	e021      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800328e:	2303      	movs	r3, #3
 8003290:	e01f      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003292:	2302      	movs	r3, #2
 8003294:	e01d      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 8003296:	2301      	movs	r3, #1
 8003298:	e01b      	b.n	80032d2 <HAL_GPIO_Init+0x26a>
 800329a:	bf00      	nop
 800329c:	58000080 	.word	0x58000080
 80032a0:	58024400 	.word	0x58024400
 80032a4:	58000400 	.word	0x58000400
 80032a8:	58020000 	.word	0x58020000
 80032ac:	58020400 	.word	0x58020400
 80032b0:	58020800 	.word	0x58020800
 80032b4:	58020c00 	.word	0x58020c00
 80032b8:	58021000 	.word	0x58021000
 80032bc:	58021400 	.word	0x58021400
 80032c0:	58021800 	.word	0x58021800
 80032c4:	58021c00 	.word	0x58021c00
 80032c8:	58022000 	.word	0x58022000
 80032cc:	58022400 	.word	0x58022400
 80032d0:	2300      	movs	r3, #0
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	f002 0203 	and.w	r2, r2, #3
 80032d8:	0092      	lsls	r2, r2, #2
 80032da:	4093      	lsls	r3, r2
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032e2:	4938      	ldr	r1, [pc, #224]	@ (80033c4 <HAL_GPIO_Init+0x35c>)
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	3302      	adds	r3, #2
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4013      	ands	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	4313      	orrs	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d003      	beq.n	800333e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003344:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800336a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d003      	beq.n	8003398 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	fa22 f303 	lsr.w	r3, r2, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f47f ae63 	bne.w	800307c <HAL_GPIO_Init+0x14>
  }
}
 80033b6:	bf00      	nop
 80033b8:	bf00      	nop
 80033ba:	3724      	adds	r7, #36	@ 0x24
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr
 80033c4:	58000400 	.word	0x58000400

080033c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80033d0:	4a08      	ldr	r2, [pc, #32]	@ (80033f4 <HAL_HSEM_FastTake+0x2c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3320      	adds	r3, #32
 80033d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033da:	4a07      	ldr	r2, [pc, #28]	@ (80033f8 <HAL_HSEM_FastTake+0x30>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	58026400 	.word	0x58026400
 80033f8:	80000300 	.word	0x80000300

080033fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003406:	4906      	ldr	r1, [pc, #24]	@ (8003420 <HAL_HSEM_Release+0x24>)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	58026400 	.word	0x58026400

08003424 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800342c:	4b29      	ldr	r3, [pc, #164]	@ (80034d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	2b06      	cmp	r3, #6
 8003436:	d00a      	beq.n	800344e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003438:	4b26      	ldr	r3, [pc, #152]	@ (80034d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d001      	beq.n	800344a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e040      	b.n	80034cc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e03e      	b.n	80034cc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800344e:	4b21      	ldr	r3, [pc, #132]	@ (80034d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003456:	491f      	ldr	r1, [pc, #124]	@ (80034d4 <HAL_PWREx_ConfigSupply+0xb0>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4313      	orrs	r3, r2
 800345c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800345e:	f7fd fd8f 	bl	8000f80 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003464:	e009      	b.n	800347a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003466:	f7fd fd8b 	bl	8000f80 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003474:	d901      	bls.n	800347a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e028      	b.n	80034cc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800347a:	4b16      	ldr	r3, [pc, #88]	@ (80034d4 <HAL_PWREx_ConfigSupply+0xb0>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003482:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003486:	d1ee      	bne.n	8003466 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b1e      	cmp	r3, #30
 800348c:	d008      	beq.n	80034a0 <HAL_PWREx_ConfigSupply+0x7c>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b2e      	cmp	r3, #46	@ 0x2e
 8003492:	d005      	beq.n	80034a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b1d      	cmp	r3, #29
 8003498:	d002      	beq.n	80034a0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2b2d      	cmp	r3, #45	@ 0x2d
 800349e:	d114      	bne.n	80034ca <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80034a0:	f7fd fd6e 	bl	8000f80 <HAL_GetTick>
 80034a4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034a6:	e009      	b.n	80034bc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034a8:	f7fd fd6a 	bl	8000f80 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034b6:	d901      	bls.n	80034bc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e007      	b.n	80034cc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80034bc:	4b05      	ldr	r3, [pc, #20]	@ (80034d4 <HAL_PWREx_ConfigSupply+0xb0>)
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034c8:	d1ee      	bne.n	80034a8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58024800 	.word	0x58024800

080034d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08c      	sub	sp, #48	@ 0x30
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e3fd      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0301 	and.w	r3, r3, #1
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 8087 	beq.w	8003606 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034f8:	4b99      	ldr	r3, [pc, #612]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003500:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003502:	4b97      	ldr	r3, [pc, #604]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003506:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003508:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800350a:	2b10      	cmp	r3, #16
 800350c:	d007      	beq.n	800351e <HAL_RCC_OscConfig+0x46>
 800350e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003510:	2b18      	cmp	r3, #24
 8003512:	d110      	bne.n	8003536 <HAL_RCC_OscConfig+0x5e>
 8003514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003516:	f003 0303 	and.w	r3, r3, #3
 800351a:	2b02      	cmp	r3, #2
 800351c:	d10b      	bne.n	8003536 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351e:	4b90      	ldr	r3, [pc, #576]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d06c      	beq.n	8003604 <HAL_RCC_OscConfig+0x12c>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d168      	bne.n	8003604 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e3d7      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x76>
 8003540:	4b87      	ldr	r3, [pc, #540]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a86      	ldr	r2, [pc, #536]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003546:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354a:	6013      	str	r3, [r2, #0]
 800354c:	e02e      	b.n	80035ac <HAL_RCC_OscConfig+0xd4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x98>
 8003556:	4b82      	ldr	r3, [pc, #520]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a81      	ldr	r2, [pc, #516]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b7f      	ldr	r3, [pc, #508]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a7e      	ldr	r2, [pc, #504]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003568:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01d      	b.n	80035ac <HAL_RCC_OscConfig+0xd4>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0xbc>
 800357a:	4b79      	ldr	r3, [pc, #484]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a78      	ldr	r2, [pc, #480]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b76      	ldr	r3, [pc, #472]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a75      	ldr	r2, [pc, #468]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xd4>
 8003594:	4b72      	ldr	r3, [pc, #456]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a71      	ldr	r2, [pc, #452]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fd fce4 	bl	8000f80 <HAL_GetTick>
 80035b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035bc:	f7fd fce0 	bl	8000f80 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e38b      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035ce:	4b64      	ldr	r3, [pc, #400]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0xe4>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fd fcd0 	bl	8000f80 <HAL_GetTick>
 80035e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035e4:	f7fd fccc 	bl	8000f80 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e377      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x10c>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80ae 	beq.w	8003770 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003614:	4b52      	ldr	r3, [pc, #328]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800361c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800361e:	4b50      	ldr	r3, [pc, #320]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003622:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_RCC_OscConfig+0x162>
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	2b18      	cmp	r3, #24
 800362e:	d13a      	bne.n	80036a6 <HAL_RCC_OscConfig+0x1ce>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d135      	bne.n	80036a6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800363a:	4b49      	ldr	r3, [pc, #292]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_RCC_OscConfig+0x17a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e349      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003652:	f7fd fca1 	bl	8000f98 <HAL_GetREVID>
 8003656:	4603      	mov	r3, r0
 8003658:	f241 0203 	movw	r2, #4099	@ 0x1003
 800365c:	4293      	cmp	r3, r2
 800365e:	d817      	bhi.n	8003690 <HAL_RCC_OscConfig+0x1b8>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b40      	cmp	r3, #64	@ 0x40
 8003666:	d108      	bne.n	800367a <HAL_RCC_OscConfig+0x1a2>
 8003668:	4b3d      	ldr	r3, [pc, #244]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003670:	4a3b      	ldr	r2, [pc, #236]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003676:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003678:	e07a      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367a:	4b39      	ldr	r3, [pc, #228]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	031b      	lsls	r3, r3, #12
 8003688:	4935      	ldr	r1, [pc, #212]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800368a:	4313      	orrs	r3, r2
 800368c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800368e:	e06f      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b33      	ldr	r3, [pc, #204]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	061b      	lsls	r3, r3, #24
 800369e:	4930      	ldr	r1, [pc, #192]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036a4:	e064      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d045      	beq.n	800373a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f023 0219 	bic.w	r2, r3, #25
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4929      	ldr	r1, [pc, #164]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fd fc5e 	bl	8000f80 <HAL_GetTick>
 80036c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fd fc5a 	bl	8000f80 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e305      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036da:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e6:	f7fd fc57 	bl	8000f98 <HAL_GetREVID>
 80036ea:	4603      	mov	r3, r0
 80036ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d817      	bhi.n	8003724 <HAL_RCC_OscConfig+0x24c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	2b40      	cmp	r3, #64	@ 0x40
 80036fa:	d108      	bne.n	800370e <HAL_RCC_OscConfig+0x236>
 80036fc:	4b18      	ldr	r3, [pc, #96]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003704:	4a16      	ldr	r2, [pc, #88]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	6053      	str	r3, [r2, #4]
 800370c:	e030      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
 800370e:	4b14      	ldr	r3, [pc, #80]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	031b      	lsls	r3, r3, #12
 800371c:	4910      	ldr	r1, [pc, #64]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
 8003722:	e025      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
 8003724:	4b0e      	ldr	r3, [pc, #56]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	490b      	ldr	r1, [pc, #44]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]
 8003738:	e01a      	b.n	8003770 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800373a:	4b09      	ldr	r3, [pc, #36]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a08      	ldr	r2, [pc, #32]	@ (8003760 <HAL_RCC_OscConfig+0x288>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fd fc1b 	bl	8000f80 <HAL_GetTick>
 800374a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374e:	f7fd fc17 	bl	8000f80 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d903      	bls.n	8003764 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e2c2      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
 8003760:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003764:	4b94      	ldr	r3, [pc, #592]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1ee      	bne.n	800374e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	f000 80a9 	beq.w	80038d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800377e:	4b8e      	ldr	r3, [pc, #568]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003786:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003788:	4b8b      	ldr	r3, [pc, #556]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d007      	beq.n	80037a4 <HAL_RCC_OscConfig+0x2cc>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b18      	cmp	r3, #24
 8003798:	d13a      	bne.n	8003810 <HAL_RCC_OscConfig+0x338>
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d135      	bne.n	8003810 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037a4:	4b84      	ldr	r3, [pc, #528]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_OscConfig+0x2e4>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b80      	cmp	r3, #128	@ 0x80
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e294      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037bc:	f7fd fbec 	bl	8000f98 <HAL_GetREVID>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d817      	bhi.n	80037fa <HAL_RCC_OscConfig+0x322>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	2b20      	cmp	r3, #32
 80037d0:	d108      	bne.n	80037e4 <HAL_RCC_OscConfig+0x30c>
 80037d2:	4b79      	ldr	r3, [pc, #484]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80037da:	4a77      	ldr	r2, [pc, #476]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80037dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80037e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037e2:	e075      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037e4:	4b74      	ldr	r3, [pc, #464]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	069b      	lsls	r3, r3, #26
 80037f2:	4971      	ldr	r1, [pc, #452]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037f8:	e06a      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037fa:	4b6f      	ldr	r3, [pc, #444]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	061b      	lsls	r3, r3, #24
 8003808:	496b      	ldr	r1, [pc, #428]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800380a:	4313      	orrs	r3, r2
 800380c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800380e:	e05f      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d042      	beq.n	800389e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003818:	4b67      	ldr	r3, [pc, #412]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a66      	ldr	r2, [pc, #408]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800381e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fd fbac 	bl	8000f80 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800382c:	f7fd fba8 	bl	8000f80 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e253      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800383e:	4b5e      	ldr	r3, [pc, #376]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800384a:	f7fd fba5 	bl	8000f98 <HAL_GetREVID>
 800384e:	4603      	mov	r3, r0
 8003850:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003854:	4293      	cmp	r3, r2
 8003856:	d817      	bhi.n	8003888 <HAL_RCC_OscConfig+0x3b0>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	2b20      	cmp	r3, #32
 800385e:	d108      	bne.n	8003872 <HAL_RCC_OscConfig+0x39a>
 8003860:	4b55      	ldr	r3, [pc, #340]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003868:	4a53      	ldr	r2, [pc, #332]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800386a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800386e:	6053      	str	r3, [r2, #4]
 8003870:	e02e      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f8>
 8003872:	4b51      	ldr	r3, [pc, #324]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	069b      	lsls	r3, r3, #26
 8003880:	494d      	ldr	r1, [pc, #308]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
 8003886:	e023      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f8>
 8003888:	4b4b      	ldr	r3, [pc, #300]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	4948      	ldr	r1, [pc, #288]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003898:	4313      	orrs	r3, r2
 800389a:	60cb      	str	r3, [r1, #12]
 800389c:	e018      	b.n	80038d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800389e:	4b46      	ldr	r3, [pc, #280]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a45      	ldr	r2, [pc, #276]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80038a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fd fb69 	bl	8000f80 <HAL_GetTick>
 80038ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80038b2:	f7fd fb65 	bl	8000f80 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e210      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80038c4:	4b3c      	ldr	r3, [pc, #240]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d1f0      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d036      	beq.n	800394a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d019      	beq.n	8003918 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e4:	4b34      	ldr	r3, [pc, #208]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80038e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038e8:	4a33      	ldr	r2, [pc, #204]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 80038ea:	f043 0301 	orr.w	r3, r3, #1
 80038ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fd fb46 	bl	8000f80 <HAL_GetTick>
 80038f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fd fb42 	bl	8000f80 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e1ed      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800390a:	4b2b      	ldr	r3, [pc, #172]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800390c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f0      	beq.n	80038f8 <HAL_RCC_OscConfig+0x420>
 8003916:	e018      	b.n	800394a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003918:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800391a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003924:	f7fd fb2c 	bl	8000f80 <HAL_GetTick>
 8003928:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392c:	f7fd fb28 	bl	8000f80 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e1d3      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800393e:	4b1e      	ldr	r3, [pc, #120]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003940:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d038      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d019      	beq.n	8003992 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800395e:	4b16      	ldr	r3, [pc, #88]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a15      	ldr	r2, [pc, #84]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003964:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003968:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800396a:	f7fd fb09 	bl	8000f80 <HAL_GetTick>
 800396e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003972:	f7fd fb05 	bl	8000f80 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e1b0      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003984:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x49a>
 8003990:	e01a      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003992:	4b09      	ldr	r3, [pc, #36]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <HAL_RCC_OscConfig+0x4e0>)
 8003998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800399c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800399e:	f7fd faef 	bl	8000f80 <HAL_GetTick>
 80039a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x4e4>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80039a6:	f7fd faeb 	bl	8000f80 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d903      	bls.n	80039bc <HAL_RCC_OscConfig+0x4e4>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e196      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
 80039b8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80039bc:	4b99      	ldr	r3, [pc, #612]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1ee      	bne.n	80039a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8081 	beq.w	8003ad8 <HAL_RCC_OscConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80039d6:	4b94      	ldr	r3, [pc, #592]	@ (8003c28 <HAL_RCC_OscConfig+0x750>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a93      	ldr	r2, [pc, #588]	@ (8003c28 <HAL_RCC_OscConfig+0x750>)
 80039dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039e2:	f7fd facd 	bl	8000f80 <HAL_GetTick>
 80039e6:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x524>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039ea:	f7fd fac9 	bl	8000f80 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b64      	cmp	r3, #100	@ 0x64
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x524>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e174      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fc:	4b8a      	ldr	r3, [pc, #552]	@ (8003c28 <HAL_RCC_OscConfig+0x750>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0f0      	beq.n	80039ea <HAL_RCC_OscConfig+0x512>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d106      	bne.n	8003a1e <HAL_RCC_OscConfig+0x546>
 8003a10:	4b84      	ldr	r3, [pc, #528]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4a83      	ldr	r2, [pc, #524]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a16:	f043 0301 	orr.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1c:	e02d      	b.n	8003a7a <HAL_RCC_OscConfig+0x5a2>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCC_OscConfig+0x568>
 8003a26:	4b7f      	ldr	r3, [pc, #508]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	4a7e      	ldr	r2, [pc, #504]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a2c:	f023 0301 	bic.w	r3, r3, #1
 8003a30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a32:	4b7c      	ldr	r3, [pc, #496]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a36:	4a7b      	ldr	r2, [pc, #492]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a3e:	e01c      	b.n	8003a7a <HAL_RCC_OscConfig+0x5a2>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b05      	cmp	r3, #5
 8003a46:	d10c      	bne.n	8003a62 <HAL_RCC_OscConfig+0x58a>
 8003a48:	4b76      	ldr	r3, [pc, #472]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4c:	4a75      	ldr	r2, [pc, #468]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a4e:	f043 0304 	orr.w	r3, r3, #4
 8003a52:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a54:	4b73      	ldr	r3, [pc, #460]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a58:	4a72      	ldr	r2, [pc, #456]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a5a:	f043 0301 	orr.w	r3, r3, #1
 8003a5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a60:	e00b      	b.n	8003a7a <HAL_RCC_OscConfig+0x5a2>
 8003a62:	4b70      	ldr	r3, [pc, #448]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a6f      	ldr	r2, [pc, #444]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a68:	f023 0301 	bic.w	r3, r3, #1
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a6e:	4b6d      	ldr	r3, [pc, #436]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	4a6c      	ldr	r2, [pc, #432]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003a74:	f023 0304 	bic.w	r3, r3, #4
 8003a78:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d015      	beq.n	8003aae <HAL_RCC_OscConfig+0x5d6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a82:	f7fd fa7d 	bl	8000f80 <HAL_GetTick>
 8003a86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_OscConfig+0x5c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a8a:	f7fd fa79 	bl	8000f80 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x5c8>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e122      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa0:	4b60      	ldr	r3, [pc, #384]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ee      	beq.n	8003a8a <HAL_RCC_OscConfig+0x5b2>
 8003aac:	e014      	b.n	8003ad8 <HAL_RCC_OscConfig+0x600>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aae:	f7fd fa67 	bl	8000f80 <HAL_GetTick>
 8003ab2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCC_OscConfig+0x5f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ab6:	f7fd fa63 	bl	8000f80 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x5f4>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e10c      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003acc:	4b55      	ldr	r3, [pc, #340]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1ee      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x5de>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8101 	beq.w	8003ce4 <HAL_RCC_OscConfig+0x80c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003ae2:	4b50      	ldr	r3, [pc, #320]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003aea:	2b18      	cmp	r3, #24
 8003aec:	f000 80bc 	beq.w	8003c68 <HAL_RCC_OscConfig+0x790>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	f040 809d 	bne.w	8003c34 <HAL_RCC_OscConfig+0x75c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003afa:	4b4a      	ldr	r3, [pc, #296]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a49      	ldr	r2, [pc, #292]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b00:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd fa3b 	bl	8000f80 <HAL_GetTick>
 8003b0a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x648>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b0e:	f7fd fa37 	bl	8000f80 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x648>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e0e2      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003b20:	4b40      	ldr	r3, [pc, #256]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f0      	bne.n	8003b0e <HAL_RCC_OscConfig+0x636>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b2c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b2e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b30:	4b3e      	ldr	r3, [pc, #248]	@ (8003c2c <HAL_RCC_OscConfig+0x754>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	4938      	ldr	r1, [pc, #224]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	628b      	str	r3, [r1, #40]	@ 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b54:	3b01      	subs	r3, #1
 8003b56:	025b      	lsls	r3, r3, #9
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	3b01      	subs	r3, #1
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	061b      	lsls	r3, r3, #24
 8003b72:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003b76:	492b      	ldr	r1, [pc, #172]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003b7c:	4b29      	ldr	r3, [pc, #164]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b80:	4a28      	ldr	r2, [pc, #160]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b82:	f023 0301 	bic.w	r3, r3, #1
 8003b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b88:	4b26      	ldr	r3, [pc, #152]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b8c:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <HAL_RCC_OscConfig+0x758>)
 8003b8e:	4013      	ands	r3, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b94:	00d2      	lsls	r2, r2, #3
 8003b96:	4923      	ldr	r1, [pc, #140]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b9c:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ba0:	f023 020c 	bic.w	r2, r3, #12
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba8:	491e      	ldr	r1, [pc, #120]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003bae:	4b1d      	ldr	r3, [pc, #116]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb2:	f023 0202 	bic.w	r2, r3, #2
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bba:	491a      	ldr	r1, [pc, #104]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003bc0:	4b18      	ldr	r3, [pc, #96]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	4a17      	ldr	r2, [pc, #92]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bcc:	4b15      	ldr	r3, [pc, #84]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003bd8:	4b12      	ldr	r3, [pc, #72]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bdc:	4a11      	ldr	r2, [pc, #68]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bde:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003be4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	4a0e      	ldr	r2, [pc, #56]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bea:	f043 0301 	orr.w	r3, r3, #1
 8003bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003bf6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fd f9c0 	bl	8000f80 <HAL_GetTick>
 8003c00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0x73e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fd f9bc 	bl	8000f80 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0x73e>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e067      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c16:	4b03      	ldr	r3, [pc, #12]	@ (8003c24 <HAL_RCC_OscConfig+0x74c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0x72c>
 8003c22:	e05f      	b.n	8003ce4 <HAL_RCC_OscConfig+0x80c>
 8003c24:	58024400 	.word	0x58024400
 8003c28:	58024800 	.word	0x58024800
 8003c2c:	fffffc0c 	.word	0xfffffc0c
 8003c30:	ffff0007 	.word	0xffff0007
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c34:	4b2e      	ldr	r3, [pc, #184]	@ (8003cf0 <HAL_RCC_OscConfig+0x818>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf0 <HAL_RCC_OscConfig+0x818>)
 8003c3a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fd f99e 	bl	8000f80 <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x782>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c48:	f7fd f99a 	bl	8000f80 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x782>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e045      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003c5a:	4b25      	ldr	r3, [pc, #148]	@ (8003cf0 <HAL_RCC_OscConfig+0x818>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1f0      	bne.n	8003c48 <HAL_RCC_OscConfig+0x770>
 8003c66:	e03d      	b.n	8003ce4 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003c68:	4b21      	ldr	r3, [pc, #132]	@ (8003cf0 <HAL_RCC_OscConfig+0x818>)
 8003c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <HAL_RCC_OscConfig+0x818>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d031      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x808>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f003 0203 	and.w	r2, r3, #3
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d12a      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	091b      	lsrs	r3, r3, #4
 8003c8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d122      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x808>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d11a      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d111      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	0c1b      	lsrs	r3, r3, #16
 8003cc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d108      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x808>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0e1b      	lsrs	r3, r3, #24
 8003cd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d001      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x80c>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCC_OscConfig+0x80e>
      }
    }
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3730      	adds	r7, #48	@ 0x30
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	58024400 	.word	0x58024400

08003cf4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e19c      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d08:	4b8a      	ldr	r3, [pc, #552]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 030f 	and.w	r3, r3, #15
 8003d10:	683a      	ldr	r2, [r7, #0]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d910      	bls.n	8003d38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d16:	4b87      	ldr	r3, [pc, #540]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f023 020f 	bic.w	r2, r3, #15
 8003d1e:	4985      	ldr	r1, [pc, #532]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d26:	4b83      	ldr	r3, [pc, #524]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d001      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e184      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d010      	beq.n	8003d66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691a      	ldr	r2, [r3, #16]
 8003d48:	4b7b      	ldr	r3, [pc, #492]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d908      	bls.n	8003d66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d54:	4b78      	ldr	r3, [pc, #480]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	4975      	ldr	r1, [pc, #468]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d010      	beq.n	8003d94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695a      	ldr	r2, [r3, #20]
 8003d76:	4b70      	ldr	r3, [pc, #448]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d908      	bls.n	8003d94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d82:	4b6d      	ldr	r3, [pc, #436]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	496a      	ldr	r1, [pc, #424]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0310 	and.w	r3, r3, #16
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d010      	beq.n	8003dc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699a      	ldr	r2, [r3, #24]
 8003da4:	4b64      	ldr	r3, [pc, #400]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d908      	bls.n	8003dc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003db0:	4b61      	ldr	r3, [pc, #388]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	495e      	ldr	r1, [pc, #376]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d010      	beq.n	8003df0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	4b59      	ldr	r3, [pc, #356]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d908      	bls.n	8003df0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003dde:	4b56      	ldr	r3, [pc, #344]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	4953      	ldr	r1, [pc, #332]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d010      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	4b4d      	ldr	r3, [pc, #308]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d908      	bls.n	8003e1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b4a      	ldr	r3, [pc, #296]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f023 020f 	bic.w	r2, r3, #15
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4947      	ldr	r1, [pc, #284]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d055      	beq.n	8003ed6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003e2a:	4b43      	ldr	r3, [pc, #268]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	4940      	ldr	r1, [pc, #256]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e44:	4b3c      	ldr	r3, [pc, #240]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d121      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e0f6      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b03      	cmp	r3, #3
 8003e5a:	d107      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d115      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e0ea      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d107      	bne.n	8003e84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e74:	4b30      	ldr	r3, [pc, #192]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d109      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0de      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e84:	4b2c      	ldr	r3, [pc, #176]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d101      	bne.n	8003e94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e0d6      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e94:	4b28      	ldr	r3, [pc, #160]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f023 0207 	bic.w	r2, r3, #7
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4925      	ldr	r1, [pc, #148]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea6:	f7fd f86b 	bl	8000f80 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eac:	e00a      	b.n	8003ec4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eae:	f7fd f867 	bl	8000f80 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d901      	bls.n	8003ec4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e0be      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d1eb      	bne.n	8003eae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d010      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68da      	ldr	r2, [r3, #12]
 8003ee6:	4b14      	ldr	r3, [pc, #80]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d208      	bcs.n	8003f04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ef2:	4b11      	ldr	r3, [pc, #68]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	f023 020f 	bic.w	r2, r3, #15
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	490e      	ldr	r1, [pc, #56]	@ (8003f38 <HAL_RCC_ClockConfig+0x244>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f04:	4b0b      	ldr	r3, [pc, #44]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 030f 	and.w	r3, r3, #15
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d214      	bcs.n	8003f3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f12:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 020f 	bic.w	r2, r3, #15
 8003f1a:	4906      	ldr	r1, [pc, #24]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f22:	4b04      	ldr	r3, [pc, #16]	@ (8003f34 <HAL_RCC_ClockConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	683a      	ldr	r2, [r7, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e086      	b.n	8004042 <HAL_RCC_ClockConfig+0x34e>
 8003f34:	52002000 	.word	0x52002000
 8003f38:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d010      	beq.n	8003f6a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d208      	bcs.n	8003f6a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f58:	4b3c      	ldr	r3, [pc, #240]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	4939      	ldr	r1, [pc, #228]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	695a      	ldr	r2, [r3, #20]
 8003f7a:	4b34      	ldr	r3, [pc, #208]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d208      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f86:	4b31      	ldr	r3, [pc, #196]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	492e      	ldr	r1, [pc, #184]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d208      	bcs.n	8003fc6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003fb4:	4b25      	ldr	r3, [pc, #148]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	699b      	ldr	r3, [r3, #24]
 8003fc0:	4922      	ldr	r1, [pc, #136]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0320 	and.w	r3, r3, #32
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d010      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69da      	ldr	r2, [r3, #28]
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d208      	bcs.n	8003ff4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	4917      	ldr	r1, [pc, #92]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ff4:	f000 f834 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b14      	ldr	r3, [pc, #80]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 030f 	and.w	r3, r3, #15
 8004004:	4912      	ldr	r1, [pc, #72]	@ (8004050 <HAL_RCC_ClockConfig+0x35c>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	f003 031f 	and.w	r3, r3, #31
 800400c:	fa22 f303 	lsr.w	r3, r2, r3
 8004010:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004012:	4b0e      	ldr	r3, [pc, #56]	@ (800404c <HAL_RCC_ClockConfig+0x358>)
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	4a0d      	ldr	r2, [pc, #52]	@ (8004050 <HAL_RCC_ClockConfig+0x35c>)
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	f003 031f 	and.w	r3, r3, #31
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	fa22 f303 	lsr.w	r3, r2, r3
 8004028:	4a0a      	ldr	r2, [pc, #40]	@ (8004054 <HAL_RCC_ClockConfig+0x360>)
 800402a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800402c:	4a0a      	ldr	r2, [pc, #40]	@ (8004058 <HAL_RCC_ClockConfig+0x364>)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <HAL_RCC_ClockConfig+0x368>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc fc62 	bl	8000900 <HAL_InitTick>
 800403c:	4603      	mov	r3, r0
 800403e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004040:	7bfb      	ldrb	r3, [r7, #15]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	58024400 	.word	0x58024400
 8004050:	080170ac 	.word	0x080170ac
 8004054:	24000004 	.word	0x24000004
 8004058:	24000000 	.word	0x24000000
 800405c:	24000008 	.word	0x24000008

08004060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004060:	b480      	push	{r7}
 8004062:	b089      	sub	sp, #36	@ 0x24
 8004064:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004066:	4bb3      	ldr	r3, [pc, #716]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800406e:	2b18      	cmp	r3, #24
 8004070:	f200 8155 	bhi.w	800431e <HAL_RCC_GetSysClockFreq+0x2be>
 8004074:	a201      	add	r2, pc, #4	@ (adr r2, 800407c <HAL_RCC_GetSysClockFreq+0x1c>)
 8004076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800407a:	bf00      	nop
 800407c:	080040e1 	.word	0x080040e1
 8004080:	0800431f 	.word	0x0800431f
 8004084:	0800431f 	.word	0x0800431f
 8004088:	0800431f 	.word	0x0800431f
 800408c:	0800431f 	.word	0x0800431f
 8004090:	0800431f 	.word	0x0800431f
 8004094:	0800431f 	.word	0x0800431f
 8004098:	0800431f 	.word	0x0800431f
 800409c:	08004107 	.word	0x08004107
 80040a0:	0800431f 	.word	0x0800431f
 80040a4:	0800431f 	.word	0x0800431f
 80040a8:	0800431f 	.word	0x0800431f
 80040ac:	0800431f 	.word	0x0800431f
 80040b0:	0800431f 	.word	0x0800431f
 80040b4:	0800431f 	.word	0x0800431f
 80040b8:	0800431f 	.word	0x0800431f
 80040bc:	0800410d 	.word	0x0800410d
 80040c0:	0800431f 	.word	0x0800431f
 80040c4:	0800431f 	.word	0x0800431f
 80040c8:	0800431f 	.word	0x0800431f
 80040cc:	0800431f 	.word	0x0800431f
 80040d0:	0800431f 	.word	0x0800431f
 80040d4:	0800431f 	.word	0x0800431f
 80040d8:	0800431f 	.word	0x0800431f
 80040dc:	08004113 	.word	0x08004113
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040e0:	4b94      	ldr	r3, [pc, #592]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d009      	beq.n	8004100 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80040ec:	4b91      	ldr	r3, [pc, #580]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	08db      	lsrs	r3, r3, #3
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	4a90      	ldr	r2, [pc, #576]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
 80040fc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80040fe:	e111      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004100:	4b8d      	ldr	r3, [pc, #564]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004102:	61bb      	str	r3, [r7, #24]
    break;
 8004104:	e10e      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004106:	4b8d      	ldr	r3, [pc, #564]	@ (800433c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004108:	61bb      	str	r3, [r7, #24]
    break;
 800410a:	e10b      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800410c:	4b8c      	ldr	r3, [pc, #560]	@ (8004340 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800410e:	61bb      	str	r3, [r7, #24]
    break;
 8004110:	e108      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004112:	4b88      	ldr	r3, [pc, #544]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800411c:	4b85      	ldr	r3, [pc, #532]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004126:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004128:	4b82      	ldr	r3, [pc, #520]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800412a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412c:	f003 0301 	and.w	r3, r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004132:	4b80      	ldr	r3, [pc, #512]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004136:	08db      	lsrs	r3, r3, #3
 8004138:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
 8004142:	ee07 3a90 	vmov	s15, r3
 8004146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 80e1 	beq.w	8004318 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2b02      	cmp	r3, #2
 800415a:	f000 8083 	beq.w	8004264 <HAL_RCC_GetSysClockFreq+0x204>
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b02      	cmp	r3, #2
 8004162:	f200 80a1 	bhi.w	80042a8 <HAL_RCC_GetSysClockFreq+0x248>
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x114>
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d056      	beq.n	8004220 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004172:	e099      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004174:	4b6f      	ldr	r3, [pc, #444]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02d      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004180:	4b6c      	ldr	r3, [pc, #432]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	08db      	lsrs	r3, r3, #3
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	4a6b      	ldr	r2, [pc, #428]	@ (8004338 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
 8004190:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	ee07 3a90 	vmov	s15, r3
 8004198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041aa:	4b62      	ldr	r3, [pc, #392]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80041be:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80041da:	e087      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	ee07 3a90 	vmov	s15, r3
 80041e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004348 <HAL_RCC_GetSysClockFreq+0x2e8>
 80041ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ee:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004202:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004344 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004206:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800420a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800420e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004212:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800421e:	e065      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	ee07 3a90 	vmov	s15, r3
 8004226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800422a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800434c <HAL_RCC_GetSysClockFreq+0x2ec>
 800422e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004232:	4b40      	ldr	r3, [pc, #256]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004242:	ed97 6a02 	vldr	s12, [r7, #8]
 8004246:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800424a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800424e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004252:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004256:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800425a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004262:	e043      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	ee07 3a90 	vmov	s15, r3
 800426a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800426e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004350 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004276:	4b2f      	ldr	r3, [pc, #188]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004286:	ed97 6a02 	vldr	s12, [r7, #8]
 800428a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004344 <HAL_RCC_GetSysClockFreq+0x2e4>
 800428e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800429a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800429e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042a6:	e021      	b.n	80042ec <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	ee07 3a90 	vmov	s15, r3
 80042ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800434c <HAL_RCC_GetSysClockFreq+0x2ec>
 80042b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80042ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004344 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ea:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80042ec:	4b11      	ldr	r3, [pc, #68]	@ (8004334 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042f0:	0a5b      	lsrs	r3, r3, #9
 80042f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042f6:	3301      	adds	r3, #1
 80042f8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	ee07 3a90 	vmov	s15, r3
 8004300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004304:	edd7 6a07 	vldr	s13, [r7, #28]
 8004308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800430c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004310:	ee17 3a90 	vmov	r3, s15
 8004314:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004316:	e005      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
    break;
 800431c:	e002      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800431e:	4b07      	ldr	r3, [pc, #28]	@ (800433c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004320:	61bb      	str	r3, [r7, #24]
    break;
 8004322:	bf00      	nop
  }

  return sysclockfreq;
 8004324:	69bb      	ldr	r3, [r7, #24]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3724      	adds	r7, #36	@ 0x24
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
 8004338:	03d09000 	.word	0x03d09000
 800433c:	003d0900 	.word	0x003d0900
 8004340:	007a1200 	.word	0x007a1200
 8004344:	46000000 	.word	0x46000000
 8004348:	4c742400 	.word	0x4c742400
 800434c:	4a742400 	.word	0x4a742400
 8004350:	4af42400 	.word	0x4af42400

08004354 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800435a:	f7ff fe81 	bl	8004060 <HAL_RCC_GetSysClockFreq>
 800435e:	4602      	mov	r2, r0
 8004360:	4b10      	ldr	r3, [pc, #64]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	490f      	ldr	r1, [pc, #60]	@ (80043a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800436c:	5ccb      	ldrb	r3, [r1, r3]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	fa22 f303 	lsr.w	r3, r2, r3
 8004376:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004378:	4b0a      	ldr	r3, [pc, #40]	@ (80043a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8004382:	5cd3      	ldrb	r3, [r2, r3]
 8004384:	f003 031f 	and.w	r3, r3, #31
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	fa22 f303 	lsr.w	r3, r2, r3
 800438e:	4a07      	ldr	r2, [pc, #28]	@ (80043ac <HAL_RCC_GetHCLKFreq+0x58>)
 8004390:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004392:	4a07      	ldr	r2, [pc, #28]	@ (80043b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004398:	4b04      	ldr	r3, [pc, #16]	@ (80043ac <HAL_RCC_GetHCLKFreq+0x58>)
 800439a:	681b      	ldr	r3, [r3, #0]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3708      	adds	r7, #8
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	58024400 	.word	0x58024400
 80043a8:	080170ac 	.word	0x080170ac
 80043ac:	24000004 	.word	0x24000004
 80043b0:	24000000 	.word	0x24000000

080043b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80043b8:	f7ff ffcc 	bl	8004354 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	091b      	lsrs	r3, r3, #4
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4904      	ldr	r1, [pc, #16]	@ (80043dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	58024400 	.word	0x58024400
 80043dc:	080170ac 	.word	0x080170ac

080043e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	223f      	movs	r2, #63	@ 0x3f
 80043ee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	f003 0207 	and.w	r2, r3, #7
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80043fc:	4b17      	ldr	r3, [pc, #92]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004408:	4b14      	ldr	r3, [pc, #80]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004420:	4b0e      	ldr	r3, [pc, #56]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004438:	4b08      	ldr	r3, [pc, #32]	@ (800445c <HAL_RCC_GetClockConfig+0x7c>)
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004444:	4b06      	ldr	r3, [pc, #24]	@ (8004460 <HAL_RCC_GetClockConfig+0x80>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 020f 	and.w	r2, r3, #15
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	601a      	str	r2, [r3, #0]
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	58024400 	.word	0x58024400
 8004460:	52002000 	.word	0x52002000

08004464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e049      	b.n	800450a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d106      	bne.n	8004490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 f841 	bl	8004512 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f000 f9f8 	bl	8004898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e04f      	b.n	80045e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a23      	ldr	r2, [pc, #140]	@ (80045ec <HAL_TIM_Base_Start_IT+0xc4>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d01d      	beq.n	800459e <HAL_TIM_Base_Start_IT+0x76>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800456a:	d018      	beq.n	800459e <HAL_TIM_Base_Start_IT+0x76>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1f      	ldr	r2, [pc, #124]	@ (80045f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_TIM_Base_Start_IT+0x76>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1e      	ldr	r2, [pc, #120]	@ (80045f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_TIM_Base_Start_IT+0x76>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1c      	ldr	r2, [pc, #112]	@ (80045f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d009      	beq.n	800459e <HAL_TIM_Base_Start_IT+0x76>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a1b      	ldr	r2, [pc, #108]	@ (80045fc <HAL_TIM_Base_Start_IT+0xd4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_TIM_Base_Start_IT+0x76>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a19      	ldr	r2, [pc, #100]	@ (8004600 <HAL_TIM_Base_Start_IT+0xd8>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d115      	bne.n	80045ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	4b17      	ldr	r3, [pc, #92]	@ (8004604 <HAL_TIM_Base_Start_IT+0xdc>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d015      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0xb4>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b6:	d011      	beq.n	80045dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f042 0201 	orr.w	r2, r2, #1
 80045c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c8:	e008      	b.n	80045dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	e000      	b.n	80045de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	40010000 	.word	0x40010000
 80045f0:	40000400 	.word	0x40000400
 80045f4:	40000800 	.word	0x40000800
 80045f8:	40000c00 	.word	0x40000c00
 80045fc:	40010400 	.word	0x40010400
 8004600:	40001800 	.word	0x40001800
 8004604:	00010007 	.word	0x00010007

08004608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d122      	bne.n	8004664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d11b      	bne.n	8004664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f905 	bl	800485a <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8f7 	bl	8004846 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 f908 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d122      	bne.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d11b      	bne.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0204 	mvn.w	r2, #4
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8db 	bl	800485a <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8cd 	bl	8004846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8de 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d122      	bne.n	800470c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d11b      	bne.n	800470c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0208 	mvn.w	r2, #8
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2204      	movs	r2, #4
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8b1 	bl	800485a <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8a3 	bl	8004846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 f8b4 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b10      	cmp	r3, #16
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b10      	cmp	r3, #16
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0210 	mvn.w	r2, #16
 8004730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2208      	movs	r2, #8
 8004736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f887 	bl	800485a <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f879 	bl	8004846 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f88a 	bl	800486e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0201 	mvn.w	r2, #1
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7fc f884 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004796:	2b80      	cmp	r3, #128	@ 0x80
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b80      	cmp	r3, #128	@ 0x80
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f914 	bl	80049e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c6:	d10e      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d2:	2b80      	cmp	r3, #128	@ 0x80
 80047d4:	d107      	bne.n	80047e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80047de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f907 	bl	80049f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b40      	cmp	r3, #64	@ 0x40
 80047f2:	d10e      	bne.n	8004812 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047fe:	2b40      	cmp	r3, #64	@ 0x40
 8004800:	d107      	bne.n	8004812 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800480a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f838 	bl	8004882 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b20      	cmp	r3, #32
 800481e:	d10e      	bne.n	800483e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 0320 	and.w	r3, r3, #32
 800482a:	2b20      	cmp	r3, #32
 800482c:	d107      	bne.n	800483e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f06f 0220 	mvn.w	r2, #32
 8004836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f8c7 	bl	80049cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a40      	ldr	r2, [pc, #256]	@ (80049ac <TIM_Base_SetConfig+0x114>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b6:	d00f      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3d      	ldr	r2, [pc, #244]	@ (80049b0 <TIM_Base_SetConfig+0x118>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d00b      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3c      	ldr	r2, [pc, #240]	@ (80049b4 <TIM_Base_SetConfig+0x11c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d007      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3b      	ldr	r2, [pc, #236]	@ (80049b8 <TIM_Base_SetConfig+0x120>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d003      	beq.n	80048d8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3a      	ldr	r2, [pc, #232]	@ (80049bc <TIM_Base_SetConfig+0x124>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2f      	ldr	r2, [pc, #188]	@ (80049ac <TIM_Base_SetConfig+0x114>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d01f      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f8:	d01b      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2c      	ldr	r2, [pc, #176]	@ (80049b0 <TIM_Base_SetConfig+0x118>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d017      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2b      	ldr	r2, [pc, #172]	@ (80049b4 <TIM_Base_SetConfig+0x11c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d013      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2a      	ldr	r2, [pc, #168]	@ (80049b8 <TIM_Base_SetConfig+0x120>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d00f      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a29      	ldr	r2, [pc, #164]	@ (80049bc <TIM_Base_SetConfig+0x124>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00b      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a28      	ldr	r2, [pc, #160]	@ (80049c0 <TIM_Base_SetConfig+0x128>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d007      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a27      	ldr	r2, [pc, #156]	@ (80049c4 <TIM_Base_SetConfig+0x12c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d003      	beq.n	8004932 <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a26      	ldr	r2, [pc, #152]	@ (80049c8 <TIM_Base_SetConfig+0x130>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d108      	bne.n	8004944 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a10      	ldr	r2, [pc, #64]	@ (80049ac <TIM_Base_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00f      	beq.n	8004990 <TIM_Base_SetConfig+0xf8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a12      	ldr	r2, [pc, #72]	@ (80049bc <TIM_Base_SetConfig+0x124>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00b      	beq.n	8004990 <TIM_Base_SetConfig+0xf8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a11      	ldr	r2, [pc, #68]	@ (80049c0 <TIM_Base_SetConfig+0x128>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d007      	beq.n	8004990 <TIM_Base_SetConfig+0xf8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a10      	ldr	r2, [pc, #64]	@ (80049c4 <TIM_Base_SetConfig+0x12c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d003      	beq.n	8004990 <TIM_Base_SetConfig+0xf8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a0f      	ldr	r2, [pc, #60]	@ (80049c8 <TIM_Base_SetConfig+0x130>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d103      	bne.n	8004998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691a      	ldr	r2, [r3, #16]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	615a      	str	r2, [r3, #20]
}
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	40010000 	.word	0x40010000
 80049b0:	40000400 	.word	0x40000400
 80049b4:	40000800 	.word	0x40000800
 80049b8:	40000c00 	.word	0x40000c00
 80049bc:	40010400 	.word	0x40010400
 80049c0:	40014000 	.word	0x40014000
 80049c4:	40014400 	.word	0x40014400
 80049c8:	40014800 	.word	0x40014800

080049cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004a0e:	4b98      	ldr	r3, [pc, #608]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a10:	22c0      	movs	r2, #192	@ 0xc0
 8004a12:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004a14:	4b96      	ldr	r3, [pc, #600]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a16:	22a8      	movs	r2, #168	@ 0xa8
 8004a18:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 8004a1a:	4b95      	ldr	r3, [pc, #596]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 120;
 8004a20:	4b93      	ldr	r3, [pc, #588]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a22:	2278      	movs	r2, #120	@ 0x78
 8004a24:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004a26:	4b93      	ldr	r3, [pc, #588]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004a28:	22ff      	movs	r2, #255	@ 0xff
 8004a2a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004a2c:	4b91      	ldr	r3, [pc, #580]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004a2e:	22ff      	movs	r2, #255	@ 0xff
 8004a30:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004a32:	4b90      	ldr	r3, [pc, #576]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004a34:	22ff      	movs	r2, #255	@ 0xff
 8004a36:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004a38:	4b8e      	ldr	r3, [pc, #568]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004a3e:	4b8e      	ldr	r3, [pc, #568]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004a40:	22c0      	movs	r2, #192	@ 0xc0
 8004a42:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004a44:	4b8c      	ldr	r3, [pc, #560]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004a46:	22a8      	movs	r2, #168	@ 0xa8
 8004a48:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 8004a4a:	4b8b      	ldr	r3, [pc, #556]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004a4c:	2202      	movs	r2, #2
 8004a4e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004a50:	4b89      	ldr	r3, [pc, #548]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004a56:	2100      	movs	r1, #0
 8004a58:	2000      	movs	r0, #0
 8004a5a:	f00e f8a7 	bl	8012bac <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004a5e:	4b84      	ldr	r3, [pc, #528]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	061a      	lsls	r2, r3, #24
 8004a64:	4b82      	ldr	r3, [pc, #520]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a66:	785b      	ldrb	r3, [r3, #1]
 8004a68:	041b      	lsls	r3, r3, #16
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	4b80      	ldr	r3, [pc, #512]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a6e:	789b      	ldrb	r3, [r3, #2]
 8004a70:	021b      	lsls	r3, r3, #8
 8004a72:	4313      	orrs	r3, r2
 8004a74:	4a7e      	ldr	r2, [pc, #504]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a76:	78d2      	ldrb	r2, [r2, #3]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	061a      	lsls	r2, r3, #24
 8004a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	0619      	lsls	r1, r3, #24
 8004a82:	4b7b      	ldr	r3, [pc, #492]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	041b      	lsls	r3, r3, #16
 8004a88:	4319      	orrs	r1, r3
 8004a8a:	4b79      	ldr	r3, [pc, #484]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a8c:	789b      	ldrb	r3, [r3, #2]
 8004a8e:	021b      	lsls	r3, r3, #8
 8004a90:	430b      	orrs	r3, r1
 8004a92:	4977      	ldr	r1, [pc, #476]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004a94:	78c9      	ldrb	r1, [r1, #3]
 8004a96:	430b      	orrs	r3, r1
 8004a98:	021b      	lsls	r3, r3, #8
 8004a9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	4b73      	ldr	r3, [pc, #460]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	0619      	lsls	r1, r3, #24
 8004aa6:	4b72      	ldr	r3, [pc, #456]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004aa8:	785b      	ldrb	r3, [r3, #1]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	4319      	orrs	r1, r3
 8004aae:	4b70      	ldr	r3, [pc, #448]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004ab0:	789b      	ldrb	r3, [r3, #2]
 8004ab2:	021b      	lsls	r3, r3, #8
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	496e      	ldr	r1, [pc, #440]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004ab8:	78c9      	ldrb	r1, [r1, #3]
 8004aba:	430b      	orrs	r3, r1
 8004abc:	0a1b      	lsrs	r3, r3, #8
 8004abe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	0619      	lsls	r1, r3, #24
 8004aca:	4b69      	ldr	r3, [pc, #420]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004acc:	785b      	ldrb	r3, [r3, #1]
 8004ace:	041b      	lsls	r3, r3, #16
 8004ad0:	4319      	orrs	r1, r3
 8004ad2:	4b67      	ldr	r3, [pc, #412]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004ad4:	789b      	ldrb	r3, [r3, #2]
 8004ad6:	021b      	lsls	r3, r3, #8
 8004ad8:	430b      	orrs	r3, r1
 8004ada:	4965      	ldr	r1, [pc, #404]	@ (8004c70 <MX_LWIP_Init+0x268>)
 8004adc:	78c9      	ldrb	r1, [r1, #3]
 8004ade:	430b      	orrs	r3, r1
 8004ae0:	0e1b      	lsrs	r3, r3, #24
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	4a65      	ldr	r2, [pc, #404]	@ (8004c7c <MX_LWIP_Init+0x274>)
 8004ae6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004ae8:	4b62      	ldr	r3, [pc, #392]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	061a      	lsls	r2, r3, #24
 8004aee:	4b61      	ldr	r3, [pc, #388]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004af0:	785b      	ldrb	r3, [r3, #1]
 8004af2:	041b      	lsls	r3, r3, #16
 8004af4:	431a      	orrs	r2, r3
 8004af6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004af8:	789b      	ldrb	r3, [r3, #2]
 8004afa:	021b      	lsls	r3, r3, #8
 8004afc:	4313      	orrs	r3, r2
 8004afe:	4a5d      	ldr	r2, [pc, #372]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b00:	78d2      	ldrb	r2, [r2, #3]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	061a      	lsls	r2, r3, #24
 8004b06:	4b5b      	ldr	r3, [pc, #364]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	0619      	lsls	r1, r3, #24
 8004b0c:	4b59      	ldr	r3, [pc, #356]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	041b      	lsls	r3, r3, #16
 8004b12:	4319      	orrs	r1, r3
 8004b14:	4b57      	ldr	r3, [pc, #348]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b16:	789b      	ldrb	r3, [r3, #2]
 8004b18:	021b      	lsls	r3, r3, #8
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4955      	ldr	r1, [pc, #340]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b1e:	78c9      	ldrb	r1, [r1, #3]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	4b52      	ldr	r3, [pc, #328]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	0619      	lsls	r1, r3, #24
 8004b30:	4b50      	ldr	r3, [pc, #320]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b32:	785b      	ldrb	r3, [r3, #1]
 8004b34:	041b      	lsls	r3, r3, #16
 8004b36:	4319      	orrs	r1, r3
 8004b38:	4b4e      	ldr	r3, [pc, #312]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b3a:	789b      	ldrb	r3, [r3, #2]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	494c      	ldr	r1, [pc, #304]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b42:	78c9      	ldrb	r1, [r1, #3]
 8004b44:	430b      	orrs	r3, r1
 8004b46:	0a1b      	lsrs	r3, r3, #8
 8004b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	4b49      	ldr	r3, [pc, #292]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	0619      	lsls	r1, r3, #24
 8004b54:	4b47      	ldr	r3, [pc, #284]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	041b      	lsls	r3, r3, #16
 8004b5a:	4319      	orrs	r1, r3
 8004b5c:	4b45      	ldr	r3, [pc, #276]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b5e:	789b      	ldrb	r3, [r3, #2]
 8004b60:	021b      	lsls	r3, r3, #8
 8004b62:	430b      	orrs	r3, r1
 8004b64:	4943      	ldr	r1, [pc, #268]	@ (8004c74 <MX_LWIP_Init+0x26c>)
 8004b66:	78c9      	ldrb	r1, [r1, #3]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	0e1b      	lsrs	r3, r3, #24
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	4a44      	ldr	r2, [pc, #272]	@ (8004c80 <MX_LWIP_Init+0x278>)
 8004b70:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004b72:	4b41      	ldr	r3, [pc, #260]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	061a      	lsls	r2, r3, #24
 8004b78:	4b3f      	ldr	r3, [pc, #252]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004b7a:	785b      	ldrb	r3, [r3, #1]
 8004b7c:	041b      	lsls	r3, r3, #16
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	4b3d      	ldr	r3, [pc, #244]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004b82:	789b      	ldrb	r3, [r3, #2]
 8004b84:	021b      	lsls	r3, r3, #8
 8004b86:	4313      	orrs	r3, r2
 8004b88:	4a3b      	ldr	r2, [pc, #236]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004b8a:	78d2      	ldrb	r2, [r2, #3]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	061a      	lsls	r2, r3, #24
 8004b90:	4b39      	ldr	r3, [pc, #228]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	0619      	lsls	r1, r3, #24
 8004b96:	4b38      	ldr	r3, [pc, #224]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004b98:	785b      	ldrb	r3, [r3, #1]
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	4319      	orrs	r1, r3
 8004b9e:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004ba0:	789b      	ldrb	r3, [r3, #2]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	430b      	orrs	r3, r1
 8004ba6:	4934      	ldr	r1, [pc, #208]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004ba8:	78c9      	ldrb	r1, [r1, #3]
 8004baa:	430b      	orrs	r3, r1
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	4b30      	ldr	r3, [pc, #192]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	0619      	lsls	r1, r3, #24
 8004bba:	4b2f      	ldr	r3, [pc, #188]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	4319      	orrs	r1, r3
 8004bc2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004bc4:	789b      	ldrb	r3, [r3, #2]
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	430b      	orrs	r3, r1
 8004bca:	492b      	ldr	r1, [pc, #172]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004bcc:	78c9      	ldrb	r1, [r1, #3]
 8004bce:	430b      	orrs	r3, r1
 8004bd0:	0a1b      	lsrs	r3, r3, #8
 8004bd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	4b27      	ldr	r3, [pc, #156]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	0619      	lsls	r1, r3, #24
 8004bde:	4b26      	ldr	r3, [pc, #152]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004be0:	785b      	ldrb	r3, [r3, #1]
 8004be2:	041b      	lsls	r3, r3, #16
 8004be4:	4319      	orrs	r1, r3
 8004be6:	4b24      	ldr	r3, [pc, #144]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004be8:	789b      	ldrb	r3, [r3, #2]
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	430b      	orrs	r3, r1
 8004bee:	4922      	ldr	r1, [pc, #136]	@ (8004c78 <MX_LWIP_Init+0x270>)
 8004bf0:	78c9      	ldrb	r1, [r1, #3]
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	0e1b      	lsrs	r3, r3, #24
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	4a22      	ldr	r2, [pc, #136]	@ (8004c84 <MX_LWIP_Init+0x27c>)
 8004bfa:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004bfc:	4b22      	ldr	r3, [pc, #136]	@ (8004c88 <MX_LWIP_Init+0x280>)
 8004bfe:	9302      	str	r3, [sp, #8]
 8004c00:	4b22      	ldr	r3, [pc, #136]	@ (8004c8c <MX_LWIP_Init+0x284>)
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	2300      	movs	r3, #0
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <MX_LWIP_Init+0x27c>)
 8004c0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004c80 <MX_LWIP_Init+0x278>)
 8004c0c:	491b      	ldr	r1, [pc, #108]	@ (8004c7c <MX_LWIP_Init+0x274>)
 8004c0e:	4820      	ldr	r0, [pc, #128]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c10:	f007 fb42 	bl	800c298 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c14:	481e      	ldr	r0, [pc, #120]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c16:	f007 fcf1 	bl	800c5fc <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c1c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004c20:	089b      	lsrs	r3, r3, #2
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c2c:	4818      	ldr	r0, [pc, #96]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c2e:	f007 fcf5 	bl	800c61c <netif_set_up>
 8004c32:	e002      	b.n	8004c3a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c34:	4816      	ldr	r0, [pc, #88]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c36:	f007 fd5d 	bl	800c6f4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004c3a:	4916      	ldr	r1, [pc, #88]	@ (8004c94 <MX_LWIP_Init+0x28c>)
 8004c3c:	4814      	ldr	r0, [pc, #80]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c3e:	f007 fdef 	bl	800c820 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004c42:	2224      	movs	r2, #36	@ 0x24
 8004c44:	2100      	movs	r1, #0
 8004c46:	4814      	ldr	r0, [pc, #80]	@ (8004c98 <MX_LWIP_Init+0x290>)
 8004c48:	f00e fcb7 	bl	80135ba <memset>
  attributes.name = "EthLink";
 8004c4c:	4b12      	ldr	r3, [pc, #72]	@ (8004c98 <MX_LWIP_Init+0x290>)
 8004c4e:	4a13      	ldr	r2, [pc, #76]	@ (8004c9c <MX_LWIP_Init+0x294>)
 8004c50:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004c52:	4b11      	ldr	r3, [pc, #68]	@ (8004c98 <MX_LWIP_Init+0x290>)
 8004c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c58:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004c5a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c98 <MX_LWIP_Init+0x290>)
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004c60:	4a0d      	ldr	r2, [pc, #52]	@ (8004c98 <MX_LWIP_Init+0x290>)
 8004c62:	490b      	ldr	r1, [pc, #44]	@ (8004c90 <MX_LWIP_Init+0x288>)
 8004c64:	480e      	ldr	r0, [pc, #56]	@ (8004ca0 <MX_LWIP_Init+0x298>)
 8004c66:	f000 fd34 	bl	80056d2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	24000144 	.word	0x24000144
 8004c74:	24000148 	.word	0x24000148
 8004c78:	2400014c 	.word	0x2400014c
 8004c7c:	24000138 	.word	0x24000138
 8004c80:	2400013c 	.word	0x2400013c
 8004c84:	24000140 	.word	0x24000140
 8004c88:	08012ae9 	.word	0x08012ae9
 8004c8c:	08005359 	.word	0x08005359
 8004c90:	24000104 	.word	0x24000104
 8004c94:	08004ca5 	.word	0x08004ca5
 8004c98:	24000150 	.word	0x24000150
 8004c9c:	08014328 	.word	0x08014328
 8004ca0:	08005481 	.word	0x08005481

08004ca4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08e      	sub	sp, #56	@ 0x38
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	601a      	str	r2, [r3, #0]
 8004cc8:	605a      	str	r2, [r3, #4]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	60da      	str	r2, [r3, #12]
 8004cce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a5d      	ldr	r2, [pc, #372]	@ (8004e4c <HAL_ETH_MspInit+0x194>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	f040 80b3 	bne.w	8004e42 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8004cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004ce2:	4a5b      	ldr	r2, [pc, #364]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004ce4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ce8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004cec:	4b58      	ldr	r3, [pc, #352]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004cee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004cf2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004cf6:	623b      	str	r3, [r7, #32]
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8004cfa:	4b55      	ldr	r3, [pc, #340]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004cfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d00:	4a53      	ldr	r2, [pc, #332]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d0a:	4b51      	ldr	r3, [pc, #324]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d14:	61fb      	str	r3, [r7, #28]
 8004d16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8004d18:	4b4d      	ldr	r3, [pc, #308]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d1e:	4a4c      	ldr	r2, [pc, #304]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004d28:	4b49      	ldr	r3, [pc, #292]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d32:	61bb      	str	r3, [r7, #24]
 8004d34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d36:	4b46      	ldr	r3, [pc, #280]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d3c:	4a44      	ldr	r2, [pc, #272]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d46:	4b42      	ldr	r3, [pc, #264]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d54:	4b3e      	ldr	r3, [pc, #248]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d5a:	4a3d      	ldr	r2, [pc, #244]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d64:	4b3a      	ldr	r3, [pc, #232]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	613b      	str	r3, [r7, #16]
 8004d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d72:	4b37      	ldr	r3, [pc, #220]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d78:	4a35      	ldr	r2, [pc, #212]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d7a:	f043 0302 	orr.w	r3, r3, #2
 8004d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004d82:	4b33      	ldr	r3, [pc, #204]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004d90:	4b2f      	ldr	r3, [pc, #188]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004d96:	4a2e      	ldr	r2, [pc, #184]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004d98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004da0:	4b2b      	ldr	r3, [pc, #172]	@ (8004e50 <HAL_ETH_MspInit+0x198>)
 8004da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004daa:	60bb      	str	r3, [r7, #8]
 8004dac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004dae:	2332      	movs	r3, #50	@ 0x32
 8004db0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004db2:	2302      	movs	r3, #2
 8004db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004db6:	2300      	movs	r3, #0
 8004db8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dbe:	230b      	movs	r3, #11
 8004dc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4822      	ldr	r0, [pc, #136]	@ (8004e54 <HAL_ETH_MspInit+0x19c>)
 8004dca:	f7fe f94d 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004dce:	2386      	movs	r3, #134	@ 0x86
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004dde:	230b      	movs	r3, #11
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004de6:	4619      	mov	r1, r3
 8004de8:	481b      	ldr	r0, [pc, #108]	@ (8004e58 <HAL_ETH_MspInit+0x1a0>)
 8004dea:	f7fe f93d 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004dee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df4:	2302      	movs	r3, #2
 8004df6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e00:	230b      	movs	r3, #11
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e08:	4619      	mov	r1, r3
 8004e0a:	4814      	ldr	r0, [pc, #80]	@ (8004e5c <HAL_ETH_MspInit+0x1a4>)
 8004e0c:	f7fe f92c 	bl	8003068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8004e10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e16:	2302      	movs	r3, #2
 8004e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e1e:	2303      	movs	r3, #3
 8004e20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e22:	230b      	movs	r3, #11
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e2a:	4619      	mov	r1, r3
 8004e2c:	480c      	ldr	r0, [pc, #48]	@ (8004e60 <HAL_ETH_MspInit+0x1a8>)
 8004e2e:	f7fe f91b 	bl	8003068 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004e32:	2200      	movs	r2, #0
 8004e34:	2105      	movs	r1, #5
 8004e36:	203d      	movs	r0, #61	@ 0x3d
 8004e38:	f7fc f986 	bl	8001148 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004e3c:	203d      	movs	r0, #61	@ 0x3d
 8004e3e:	f7fc f99d 	bl	800117c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e42:	bf00      	nop
 8004e44:	3738      	adds	r7, #56	@ 0x38
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40028000 	.word	0x40028000
 8004e50:	58024400 	.word	0x58024400
 8004e54:	58020800 	.word	0x58020800
 8004e58:	58020000 	.word	0x58020000
 8004e5c:	58020400 	.word	0x58020400
 8004e60:	58021800 	.word	0x58021800

08004e64 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004e6c:	4b04      	ldr	r3, [pc, #16]	@ (8004e80 <HAL_ETH_RxCpltCallback+0x1c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f000 fec5 	bl	8005c00 <osSemaphoreRelease>
}
 8004e76:	bf00      	nop
 8004e78:	3708      	adds	r7, #8
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	24000174 	.word	0x24000174

08004e84 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b0ac      	sub	sp, #176	@ 0xb0
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004e9e:	4b8f      	ldr	r3, [pc, #572]	@ (80050dc <low_level_init+0x258>)
 8004ea0:	4a8f      	ldr	r2, [pc, #572]	@ (80050e0 <low_level_init+0x25c>)
 8004ea2:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004ea8:	2380      	movs	r3, #128	@ 0x80
 8004eaa:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004eac:	23e1      	movs	r3, #225	@ 0xe1
 8004eae:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004ebc:	4a87      	ldr	r2, [pc, #540]	@ (80050dc <low_level_init+0x258>)
 8004ebe:	f107 030c 	add.w	r3, r7, #12
 8004ec2:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004ec4:	4b85      	ldr	r3, [pc, #532]	@ (80050dc <low_level_init+0x258>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004eca:	4b84      	ldr	r3, [pc, #528]	@ (80050dc <low_level_init+0x258>)
 8004ecc:	4a85      	ldr	r2, [pc, #532]	@ (80050e4 <low_level_init+0x260>)
 8004ece:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004ed0:	4b82      	ldr	r3, [pc, #520]	@ (80050dc <low_level_init+0x258>)
 8004ed2:	4a85      	ldr	r2, [pc, #532]	@ (80050e8 <low_level_init+0x264>)
 8004ed4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004ed6:	4b81      	ldr	r3, [pc, #516]	@ (80050dc <low_level_init+0x258>)
 8004ed8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8004edc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ede:	487f      	ldr	r0, [pc, #508]	@ (80050dc <low_level_init+0x258>)
 8004ee0:	f7fc f9ea 	bl	80012b8 <HAL_ETH_Init>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004eea:	2234      	movs	r2, #52	@ 0x34
 8004eec:	2100      	movs	r1, #0
 8004eee:	487f      	ldr	r0, [pc, #508]	@ (80050ec <low_level_init+0x268>)
 8004ef0:	f00e fb63 	bl	80135ba <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004ef4:	4b7d      	ldr	r3, [pc, #500]	@ (80050ec <low_level_init+0x268>)
 8004ef6:	2221      	movs	r2, #33	@ 0x21
 8004ef8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004efa:	4b7c      	ldr	r3, [pc, #496]	@ (80050ec <low_level_init+0x268>)
 8004efc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004f00:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004f02:	4b7a      	ldr	r3, [pc, #488]	@ (80050ec <low_level_init+0x268>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004f08:	4879      	ldr	r0, [pc, #484]	@ (80050f0 <low_level_init+0x26c>)
 8004f0a:	f007 f87f 	bl	800c00c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2206      	movs	r2, #6
 8004f12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f16:	4b71      	ldr	r3, [pc, #452]	@ (80050dc <low_level_init+0x258>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	781a      	ldrb	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f22:	4b6e      	ldr	r3, [pc, #440]	@ (80050dc <low_level_init+0x258>)
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	785a      	ldrb	r2, [r3, #1]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80050dc <low_level_init+0x258>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	789a      	ldrb	r2, [r3, #2]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f3a:	4b68      	ldr	r3, [pc, #416]	@ (80050dc <low_level_init+0x258>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	78da      	ldrb	r2, [r3, #3]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f46:	4b65      	ldr	r3, [pc, #404]	@ (80050dc <low_level_init+0x258>)
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	791a      	ldrb	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f52:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <low_level_init+0x258>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	795a      	ldrb	r2, [r3, #5]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8004f64:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8004f6c:	f043 030a 	orr.w	r3, r3, #10
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f7e:	e012      	b.n	8004fa6 <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 8004f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004f84:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	4a59      	ldr	r2, [pc, #356]	@ (80050f4 <low_level_init+0x270>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	2300      	movs	r3, #0
 8004f92:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 8004f96:	4851      	ldr	r0, [pc, #324]	@ (80050dc <low_level_init+0x258>)
 8004f98:	f7fc fa6a 	bl	8001470 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 8004f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004fa0:	3301      	adds	r3, #1
 8004fa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fa6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004faa:	2b03      	cmp	r3, #3
 8004fac:	d9e8      	bls.n	8004f80 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8004fae:	2200      	movs	r2, #0
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	2001      	movs	r0, #1
 8004fb4:	f000 fd49 	bl	8005a4a <osSemaphoreNew>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4a4f      	ldr	r2, [pc, #316]	@ (80050f8 <low_level_init+0x274>)
 8004fbc:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004fbe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004fc2:	2224      	movs	r2, #36	@ 0x24
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f00e faf7 	bl	80135ba <memset>
  attributes.name = "EthIf";
 8004fcc:	4b4b      	ldr	r3, [pc, #300]	@ (80050fc <low_level_init+0x278>)
 8004fce:	67bb      	str	r3, [r7, #120]	@ 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004fd0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8004fd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  attributes.priority = osPriorityRealtime;
 8004fd8:	2330      	movs	r3, #48	@ 0x30
 8004fda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 8004fde:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	4846      	ldr	r0, [pc, #280]	@ (8005100 <low_level_init+0x27c>)
 8004fe8:	f000 fb73 	bl	80056d2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8004fec:	4945      	ldr	r1, [pc, #276]	@ (8005104 <low_level_init+0x280>)
 8004fee:	4846      	ldr	r0, [pc, #280]	@ (8005108 <low_level_init+0x284>)
 8004ff0:	f7fb fe15 	bl	8000c1e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8004ff4:	4844      	ldr	r0, [pc, #272]	@ (8005108 <low_level_init+0x284>)
 8004ff6:	f7fb fe44 	bl	8000c82 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8004ffa:	f897 30a3 	ldrb.w	r3, [r7, #163]	@ 0xa3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d165      	bne.n	80050ce <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005002:	4841      	ldr	r0, [pc, #260]	@ (8005108 <low_level_init+0x284>)
 8005004:	f7fb fee5 	bl	8000dd2 <LAN8742_GetLinkState>
 8005008:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800500c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005010:	2b01      	cmp	r3, #1
 8005012:	dc06      	bgt.n	8005022 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f007 fbd3 	bl	800c7c0 <netif_set_link_down>
      netif_set_down(netif);
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f007 fb6a 	bl	800c6f4 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005020:	e057      	b.n	80050d2 <low_level_init+0x24e>
      switch (PHYLinkState)
 8005022:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005026:	3b02      	subs	r3, #2
 8005028:	2b03      	cmp	r3, #3
 800502a:	d82b      	bhi.n	8005084 <low_level_init+0x200>
 800502c:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <low_level_init+0x1b0>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005045 	.word	0x08005045
 8005038:	08005057 	.word	0x08005057
 800503c:	08005067 	.word	0x08005067
 8005040:	08005077 	.word	0x08005077
        duplex = ETH_FULLDUPLEX_MODE;
 8005044:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005048:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        speed = ETH_SPEED_100M;
 800504c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005050:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        break;
 8005054:	e01f      	b.n	8005096 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8005056:	2300      	movs	r3, #0
 8005058:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        speed = ETH_SPEED_100M;
 800505c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005060:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        break;
 8005064:	e017      	b.n	8005096 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8005066:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800506a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        speed = ETH_SPEED_10M;
 800506e:	2300      	movs	r3, #0
 8005070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        break;
 8005074:	e00f      	b.n	8005096 <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 8005076:	2300      	movs	r3, #0
 8005078:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        speed = ETH_SPEED_10M;
 800507c:	2300      	movs	r3, #0
 800507e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        break;
 8005082:	e008      	b.n	8005096 <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 8005084:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005088:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        speed = ETH_SPEED_100M;
 800508c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005090:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        break;
 8005094:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005096:	f107 0314 	add.w	r3, r7, #20
 800509a:	4619      	mov	r1, r3
 800509c:	480f      	ldr	r0, [pc, #60]	@ (80050dc <low_level_init+0x258>)
 800509e:	f7fc ffdf 	bl	8002060 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80050a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MACConf.Speed = speed;
 80050a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80050ae:	f107 0314 	add.w	r3, r7, #20
 80050b2:	4619      	mov	r1, r3
 80050b4:	4809      	ldr	r0, [pc, #36]	@ (80050dc <low_level_init+0x258>)
 80050b6:	f7fd f9a7 	bl	8002408 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80050ba:	4808      	ldr	r0, [pc, #32]	@ (80050dc <low_level_init+0x258>)
 80050bc:	f7fc fa19 	bl	80014f2 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f007 faab 	bl	800c61c <netif_set_up>
    netif_set_link_up(netif);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f007 fb46 	bl	800c758 <netif_set_link_up>
}
 80050cc:	e001      	b.n	80050d2 <low_level_init+0x24e>
    Error_Handler();
 80050ce:	f7fb fbf3 	bl	80008b8 <Error_Handler>
}
 80050d2:	bf00      	nop
 80050d4:	37b0      	adds	r7, #176	@ 0xb0
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	24000178 	.word	0x24000178
 80050e0:	40028000 	.word	0x40028000
 80050e4:	30040060 	.word	0x30040060
 80050e8:	30040000 	.word	0x30040000
 80050ec:	24000200 	.word	0x24000200
 80050f0:	080170e0 	.word	0x080170e0
 80050f4:	30040200 	.word	0x30040200
 80050f8:	24000174 	.word	0x24000174
 80050fc:	08014330 	.word	0x08014330
 8005100:	08005309 	.word	0x08005309
 8005104:	24000010 	.word	0x24000010
 8005108:	24000304 	.word	0x24000304

0800510c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b092      	sub	sp, #72	@ 0x48
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 8005116:	2300      	movs	r3, #0
 8005118:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005120:	f107 030c 	add.w	r3, r7, #12
 8005124:	2230      	movs	r2, #48	@ 0x30
 8005126:	2100      	movs	r1, #0
 8005128:	4618      	mov	r0, r3
 800512a:	f00e fa46 	bl	80135ba <memset>

  for(q = p; q != NULL; q = q->next)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	643b      	str	r3, [r7, #64]	@ 0x40
 8005132:	e045      	b.n	80051c0 <low_level_output+0xb4>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	2b03      	cmp	r3, #3
 8005138:	d902      	bls.n	8005140 <low_level_output+0x34>
      return ERR_IF;
 800513a:	f06f 030b 	mvn.w	r3, #11
 800513e:	e052      	b.n	80051e6 <low_level_output+0xda>

    Txbuffer[i].buffer = q->payload;
 8005140:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005142:	6859      	ldr	r1, [r3, #4]
 8005144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005146:	4613      	mov	r3, r2
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	3348      	adds	r3, #72	@ 0x48
 8005150:	443b      	add	r3, r7
 8005152:	3b3c      	subs	r3, #60	@ 0x3c
 8005154:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005158:	895b      	ldrh	r3, [r3, #10]
 800515a:	4619      	mov	r1, r3
 800515c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	3348      	adds	r3, #72	@ 0x48
 8005168:	443b      	add	r3, r7
 800516a:	3b38      	subs	r3, #56	@ 0x38
 800516c:	6019      	str	r1, [r3, #0]

    if(i>0)
 800516e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005170:	2b00      	cmp	r3, #0
 8005172:	d011      	beq.n	8005198 <low_level_output+0x8c>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005176:	1e5a      	subs	r2, r3, #1
 8005178:	f107 000c 	add.w	r0, r7, #12
 800517c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800517e:	460b      	mov	r3, r1
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	440b      	add	r3, r1
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	18c1      	adds	r1, r0, r3
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	3348      	adds	r3, #72	@ 0x48
 8005192:	443b      	add	r3, r7
 8005194:	3b34      	subs	r3, #52	@ 0x34
 8005196:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005198:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d109      	bne.n	80051b4 <low_level_output+0xa8>
    {
      Txbuffer[i].next = NULL;
 80051a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	3348      	adds	r3, #72	@ 0x48
 80051ac:	443b      	add	r3, r7
 80051ae:	3b34      	subs	r3, #52	@ 0x34
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
    }

    i++;
 80051b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051b6:	3301      	adds	r3, #1
 80051b8:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80051ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1b6      	bne.n	8005134 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	891b      	ldrh	r3, [r3, #8]
 80051ca:	461a      	mov	r2, r3
 80051cc:	4b08      	ldr	r3, [pc, #32]	@ (80051f0 <low_level_output+0xe4>)
 80051ce:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80051d0:	4a07      	ldr	r2, [pc, #28]	@ (80051f0 <low_level_output+0xe4>)
 80051d2:	f107 030c 	add.w	r3, r7, #12
 80051d6:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80051d8:	2214      	movs	r2, #20
 80051da:	4905      	ldr	r1, [pc, #20]	@ (80051f0 <low_level_output+0xe4>)
 80051dc:	4805      	ldr	r0, [pc, #20]	@ (80051f4 <low_level_output+0xe8>)
 80051de:	f7fc fa89 	bl	80016f4 <HAL_ETH_Transmit>

  return errval;
 80051e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3748      	adds	r7, #72	@ 0x48
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	24000200 	.word	0x24000200
 80051f4:	24000178 	.word	0x24000178

080051f8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b098      	sub	sp, #96	@ 0x60
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005200:	2300      	movs	r3, #0
 8005202:	657b      	str	r3, [r7, #84]	@ 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	2300      	movs	r3, #0
 800520a:	653b      	str	r3, [r7, #80]	@ 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800520c:	f107 030c 	add.w	r3, r7, #12
 8005210:	2230      	movs	r2, #48	@ 0x30
 8005212:	2100      	movs	r1, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f00e f9d0 	bl	80135ba <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800521a:	2300      	movs	r3, #0
 800521c:	653b      	str	r3, [r7, #80]	@ 0x50
 800521e:	e014      	b.n	800524a <low_level_input+0x52>
  {
    RxBuff[i].next=&RxBuff[i+1];
 8005220:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	f107 010c 	add.w	r1, r7, #12
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4419      	add	r1, r3
 8005232:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005234:	4613      	mov	r3, r2
 8005236:	005b      	lsls	r3, r3, #1
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	3358      	adds	r3, #88	@ 0x58
 800523e:	443b      	add	r3, r7
 8005240:	3b44      	subs	r3, #68	@ 0x44
 8005242:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8005244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005246:	3301      	adds	r3, #1
 8005248:	653b      	str	r3, [r7, #80]	@ 0x50
 800524a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800524c:	2b02      	cmp	r3, #2
 800524e:	d9e7      	bls.n	8005220 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 8005250:	f107 030c 	add.w	r3, r7, #12
 8005254:	4619      	mov	r1, r3
 8005256:	4828      	ldr	r0, [pc, #160]	@ (80052f8 <low_level_input+0x100>)
 8005258:	f7fc fbc8 	bl	80019ec <HAL_ETH_GetRxDataBuffer>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d145      	bne.n	80052ee <low_level_input+0xf6>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 8005262:	f107 0308 	add.w	r3, r7, #8
 8005266:	4619      	mov	r1, r3
 8005268:	4823      	ldr	r0, [pc, #140]	@ (80052f8 <low_level_input+0x100>)
 800526a:	f7fc fc5d 	bl	8001b28 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800526e:	4822      	ldr	r0, [pc, #136]	@ (80052f8 <low_level_input+0x100>)
 8005270:	f7fc fc8d 	bl	8001b8e <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800527a:	647a      	str	r2, [r7, #68]	@ 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800527c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800527e:	2b00      	cmp	r3, #0
 8005280:	dd1d      	ble.n	80052be <low_level_input+0xc6>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8005282:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005284:	f003 021f 	and.w	r2, r3, #31
 8005288:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800528a:	4413      	add	r3, r2
 800528c:	643b      	str	r3, [r7, #64]	@ 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800528e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005290:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 8005292:	f3bf 8f4f 	dsb	sy
}
 8005296:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8005298:	4a18      	ldr	r2, [pc, #96]	@ (80052fc <low_level_input+0x104>)
 800529a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800529c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80052a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a2:	3320      	adds	r3, #32
 80052a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80052a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052a8:	3b20      	subs	r3, #32
 80052aa:	643b      	str	r3, [r7, #64]	@ 0x40
      } while ( op_size > 0 );
 80052ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dcf2      	bgt.n	8005298 <low_level_input+0xa0>
  __ASM volatile ("dsb 0xF":::"memory");
 80052b2:	f3bf 8f4f 	dsb	sy
}
 80052b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80052b8:	f3bf 8f6f 	isb	sy
}
 80052bc:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80052be:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 80052c0:	480f      	ldr	r0, [pc, #60]	@ (8005300 <low_level_input+0x108>)
 80052c2:	f006 ff1f 	bl	800c104 <memp_malloc_pool>
 80052c6:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if(custom_pbuf != NULL)
 80052c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00f      	beq.n	80052ee <low_level_input+0xf6>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 80052ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005304 <low_level_input+0x10c>)
 80052d2:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	b299      	uxth	r1, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	b292      	uxth	r2, r2
 80052de:	9201      	str	r2, [sp, #4]
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052e4:	2241      	movs	r2, #65	@ 0x41
 80052e6:	2000      	movs	r0, #0
 80052e8:	f007 fc8e 	bl	800cc08 <pbuf_alloced_custom>
 80052ec:	6578      	str	r0, [r7, #84]	@ 0x54
    }
  }

  return p;
 80052ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3758      	adds	r7, #88	@ 0x58
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	24000178 	.word	0x24000178
 80052fc:	e000ed00 	.word	0xe000ed00
 8005300:	080170e0 	.word	0x080170e0
 8005304:	080053b5 	.word	0x080053b5

08005308 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005314:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <ethernetif_input+0x4c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f04f 31ff 	mov.w	r1, #4294967295
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fc1d 	bl	8005b5c <osSemaphoreAcquire>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1f5      	bne.n	8005314 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff ff65 	bl	80051f8 <low_level_input>
 800532e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	68f9      	ldr	r1, [r7, #12]
 800533c:	68b8      	ldr	r0, [r7, #8]
 800533e:	4798      	blx	r3
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8005346:	68b8      	ldr	r0, [r7, #8]
 8005348:	f007 fe18 	bl	800cf7c <pbuf_free>
          }
        }
      } while(p!=NULL);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1ea      	bne.n	8005328 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005352:	e7df      	b.n	8005314 <ethernetif_input+0xc>
 8005354:	24000174 	.word	0x24000174

08005358 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <ethernetif_init+0x1c>
 8005366:	4b0e      	ldr	r3, [pc, #56]	@ (80053a0 <ethernetif_init+0x48>)
 8005368:	f240 224d 	movw	r2, #589	@ 0x24d
 800536c:	490d      	ldr	r1, [pc, #52]	@ (80053a4 <ethernetif_init+0x4c>)
 800536e:	480e      	ldr	r0, [pc, #56]	@ (80053a8 <ethernetif_init+0x50>)
 8005370:	f00e f8be 	bl	80134f0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2273      	movs	r2, #115	@ 0x73
 8005378:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2274      	movs	r2, #116	@ 0x74
 8005380:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a09      	ldr	r2, [pc, #36]	@ (80053ac <ethernetif_init+0x54>)
 8005388:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a08      	ldr	r2, [pc, #32]	@ (80053b0 <ethernetif_init+0x58>)
 800538e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f7ff fd77 	bl	8004e84 <low_level_init>

  return ERR_OK;
 8005396:	2300      	movs	r3, #0
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	08014338 	.word	0x08014338
 80053a4:	08014354 	.word	0x08014354
 80053a8:	08014364 	.word	0x08014364
 80053ac:	08009b09 	.word	0x08009b09
 80053b0:	0800510d 	.word	0x0800510d

080053b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	4803      	ldr	r0, [pc, #12]	@ (80053d0 <pbuf_free_custom+0x1c>)
 80053c4:	f006 ff12 	bl	800c1ec <memp_free_pool>
}
 80053c8:	bf00      	nop
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	080170e0 	.word	0x080170e0

080053d4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80053d8:	f7fb fdd2 	bl	8000f80 <HAL_GetTick>
 80053dc:	4603      	mov	r3, r0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80053e8:	4802      	ldr	r0, [pc, #8]	@ (80053f4 <ETH_PHY_IO_Init+0x10>)
 80053ea:	f7fd f827 	bl	800243c <HAL_ETH_SetMDIOClockRange>

  return 0;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	24000178 	.word	0x24000178

080053f8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return 0;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68ba      	ldr	r2, [r7, #8]
 8005418:	68f9      	ldr	r1, [r7, #12]
 800541a:	4807      	ldr	r0, [pc, #28]	@ (8005438 <ETH_PHY_IO_ReadReg+0x30>)
 800541c:	f7fc fd78 	bl	8001f10 <HAL_ETH_ReadPHYRegister>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005426:	f04f 33ff 	mov.w	r3, #4294967295
 800542a:	e000      	b.n	800542e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	24000178 	.word	0x24000178

0800543c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	4807      	ldr	r0, [pc, #28]	@ (800546c <ETH_PHY_IO_WriteReg+0x30>)
 8005450:	f7fc fdb2 	bl	8001fb8 <HAL_ETH_WritePHYRegister>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800545a:	f04f 33ff 	mov.w	r3, #4294967295
 800545e:	e000      	b.n	8005462 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	24000178 	.word	0x24000178

08005470 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005474:	f7fb fd84 	bl	8000f80 <HAL_GetTick>
 8005478:	4603      	mov	r3, r0
}
 800547a:	4618      	mov	r0, r3
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b0a0      	sub	sp, #128	@ 0x80
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8005488:	2300      	movs	r3, #0
 800548a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800548c:	2300      	movs	r3, #0
 800548e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005490:	2300      	movs	r3, #0
 8005492:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	673b      	str	r3, [r7, #112]	@ 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005498:	483a      	ldr	r0, [pc, #232]	@ (8005584 <ethernet_link_thread+0x104>)
 800549a:	f7fb fc9a 	bl	8000dd2 <LAN8742_GetLinkState>
 800549e:	66f8      	str	r0, [r7, #108]	@ 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80054a0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	f003 0301 	and.w	r3, r3, #1
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00c      	beq.n	80054cc <ethernet_link_thread+0x4c>
 80054b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	dc09      	bgt.n	80054cc <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 80054b8:	4833      	ldr	r0, [pc, #204]	@ (8005588 <ethernet_link_thread+0x108>)
 80054ba:	f7fc f8a1 	bl	8001600 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80054be:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80054c0:	f007 f918 	bl	800c6f4 <netif_set_down>
    netif_set_link_down(netif);
 80054c4:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 80054c6:	f007 f97b 	bl	800c7c0 <netif_set_link_down>
 80054ca:	e056      	b.n	800557a <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80054cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054ce:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80054d2:	f003 0304 	and.w	r3, r3, #4
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d14f      	bne.n	800557a <ethernet_link_thread+0xfa>
 80054da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054dc:	2b01      	cmp	r3, #1
 80054de:	dd4c      	ble.n	800557a <ethernet_link_thread+0xfa>
  {
    switch (PHYLinkState)
 80054e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054e2:	3b02      	subs	r3, #2
 80054e4:	2b03      	cmp	r3, #3
 80054e6:	d82b      	bhi.n	8005540 <ethernet_link_thread+0xc0>
 80054e8:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <ethernet_link_thread+0x70>)
 80054ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ee:	bf00      	nop
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005513 	.word	0x08005513
 80054f8:	08005523 	.word	0x08005523
 80054fc:	08005533 	.word	0x08005533
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005500:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005504:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005506:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800550a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800550c:	2301      	movs	r3, #1
 800550e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005510:	e017      	b.n	8005542 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005512:	2300      	movs	r3, #0
 8005514:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8005516:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800551a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800551c:	2301      	movs	r3, #1
 800551e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005520:	e00f      	b.n	8005542 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005522:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005526:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005528:	2300      	movs	r3, #0
 800552a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800552c:	2301      	movs	r3, #1
 800552e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8005530:	e007      	b.n	8005542 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005532:	2300      	movs	r3, #0
 8005534:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8005536:	2300      	movs	r3, #0
 8005538:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800553a:	2301      	movs	r3, #1
 800553c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800553e:	e000      	b.n	8005542 <ethernet_link_thread+0xc2>
    default:
      break;
 8005540:	bf00      	nop
    }

    if(linkchanged)
 8005542:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d018      	beq.n	800557a <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005548:	f107 0308 	add.w	r3, r7, #8
 800554c:	4619      	mov	r1, r3
 800554e:	480e      	ldr	r0, [pc, #56]	@ (8005588 <ethernet_link_thread+0x108>)
 8005550:	f7fc fd86 	bl	8002060 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8005554:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005556:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8005558:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800555a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800555c:	f107 0308 	add.w	r3, r7, #8
 8005560:	4619      	mov	r1, r3
 8005562:	4809      	ldr	r0, [pc, #36]	@ (8005588 <ethernet_link_thread+0x108>)
 8005564:	f7fc ff50 	bl	8002408 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 8005568:	4807      	ldr	r0, [pc, #28]	@ (8005588 <ethernet_link_thread+0x108>)
 800556a:	f7fb ffc2 	bl	80014f2 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800556e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8005570:	f007 f854 	bl	800c61c <netif_set_up>
      netif_set_link_up(netif);
 8005574:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8005576:	f007 f8ef 	bl	800c758 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800557a:	2064      	movs	r0, #100	@ 0x64
 800557c:	f000 f93c 	bl	80057f8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005580:	e78a      	b.n	8005498 <ethernet_link_thread+0x18>
 8005582:	bf00      	nop
 8005584:	24000304 	.word	0x24000304
 8005588:	24000178 	.word	0x24000178

0800558c <__NVIC_SetPriority>:
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	6039      	str	r1, [r7, #0]
 8005596:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005598:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800559c:	2b00      	cmp	r3, #0
 800559e:	db0a      	blt.n	80055b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	490c      	ldr	r1, [pc, #48]	@ (80055d8 <__NVIC_SetPriority+0x4c>)
 80055a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80055aa:	0112      	lsls	r2, r2, #4
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	440b      	add	r3, r1
 80055b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80055b4:	e00a      	b.n	80055cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4908      	ldr	r1, [pc, #32]	@ (80055dc <__NVIC_SetPriority+0x50>)
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	3b04      	subs	r3, #4
 80055c4:	0112      	lsls	r2, r2, #4
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	440b      	add	r3, r1
 80055ca:	761a      	strb	r2, [r3, #24]
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	e000e100 	.word	0xe000e100
 80055dc:	e000ed00 	.word	0xe000ed00

080055e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80055e4:	4b05      	ldr	r3, [pc, #20]	@ (80055fc <SysTick_Handler+0x1c>)
 80055e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80055e8:	f003 f8d8 	bl	800879c <xTaskGetSchedulerState>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d001      	beq.n	80055f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80055f2:	f001 f911 	bl	8006818 <xPortSysTickHandler>
  }
}
 80055f6:	bf00      	nop
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	e000e010 	.word	0xe000e010

08005600 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005604:	2100      	movs	r1, #0
 8005606:	f06f 0004 	mvn.w	r0, #4
 800560a:	f7ff ffbf 	bl	800558c <__NVIC_SetPriority>
#endif
}
 800560e:	bf00      	nop
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800561a:	f3ef 8305 	mrs	r3, IPSR
 800561e:	603b      	str	r3, [r7, #0]
  return(result);
 8005620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005626:	f06f 0305 	mvn.w	r3, #5
 800562a:	607b      	str	r3, [r7, #4]
 800562c:	e00c      	b.n	8005648 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800562e:	4b0a      	ldr	r3, [pc, #40]	@ (8005658 <osKernelInitialize+0x44>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d105      	bne.n	8005642 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005636:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <osKernelInitialize+0x44>)
 8005638:	2201      	movs	r2, #1
 800563a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800563c:	2300      	movs	r3, #0
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	e002      	b.n	8005648 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005642:	f04f 33ff 	mov.w	r3, #4294967295
 8005646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005648:	687b      	ldr	r3, [r7, #4]
}
 800564a:	4618      	mov	r0, r3
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	24000324 	.word	0x24000324

0800565c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b082      	sub	sp, #8
 8005660:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005662:	f3ef 8305 	mrs	r3, IPSR
 8005666:	603b      	str	r3, [r7, #0]
  return(result);
 8005668:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <osKernelStart+0x1a>
    stat = osErrorISR;
 800566e:	f06f 0305 	mvn.w	r3, #5
 8005672:	607b      	str	r3, [r7, #4]
 8005674:	e010      	b.n	8005698 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005676:	4b0b      	ldr	r3, [pc, #44]	@ (80056a4 <osKernelStart+0x48>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d109      	bne.n	8005692 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800567e:	f7ff ffbf 	bl	8005600 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005682:	4b08      	ldr	r3, [pc, #32]	@ (80056a4 <osKernelStart+0x48>)
 8005684:	2202      	movs	r2, #2
 8005686:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005688:	f002 fc18 	bl	8007ebc <vTaskStartScheduler>
      stat = osOK;
 800568c:	2300      	movs	r3, #0
 800568e:	607b      	str	r3, [r7, #4]
 8005690:	e002      	b.n	8005698 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295
 8005696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005698:	687b      	ldr	r3, [r7, #4]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3708      	adds	r7, #8
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	24000324 	.word	0x24000324

080056a8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056ae:	f3ef 8305 	mrs	r3, IPSR
 80056b2:	603b      	str	r3, [r7, #0]
  return(result);
 80056b4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80056ba:	f002 fd23 	bl	8008104 <xTaskGetTickCountFromISR>
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	e002      	b.n	80056c8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80056c2:	f002 fd0f 	bl	80080e4 <xTaskGetTickCount>
 80056c6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80056c8:	687b      	ldr	r3, [r7, #4]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b08e      	sub	sp, #56	@ 0x38
 80056d6:	af04      	add	r7, sp, #16
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056de:	2300      	movs	r3, #0
 80056e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e2:	f3ef 8305 	mrs	r3, IPSR
 80056e6:	617b      	str	r3, [r7, #20]
  return(result);
 80056e8:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d17f      	bne.n	80057ee <osThreadNew+0x11c>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d07c      	beq.n	80057ee <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80056f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80056fa:	2318      	movs	r3, #24
 80056fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005702:	f04f 33ff 	mov.w	r3, #4294967295
 8005706:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d045      	beq.n	800579a <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <osThreadNew+0x4a>
        name = attr->name;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <osThreadNew+0x70>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b38      	cmp	r3, #56	@ 0x38
 8005734:	d805      	bhi.n	8005742 <osThreadNew+0x70>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <osThreadNew+0x74>
        return (NULL);
 8005742:	2300      	movs	r3, #0
 8005744:	e054      	b.n	80057f0 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	089b      	lsrs	r3, r3, #2
 8005754:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00e      	beq.n	800577c <osThreadNew+0xaa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b5b      	cmp	r3, #91	@ 0x5b
 8005764:	d90a      	bls.n	800577c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800576a:	2b00      	cmp	r3, #0
 800576c:	d006      	beq.n	800577c <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <osThreadNew+0xaa>
        mem = 1;
 8005776:	2301      	movs	r3, #1
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	e010      	b.n	800579e <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10c      	bne.n	800579e <osThreadNew+0xcc>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d108      	bne.n	800579e <osThreadNew+0xcc>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <osThreadNew+0xcc>
          mem = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	61bb      	str	r3, [r7, #24]
 8005798:	e001      	b.n	800579e <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800579a:	2300      	movs	r3, #0
 800579c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d110      	bne.n	80057c6 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057ac:	9202      	str	r2, [sp, #8]
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	6a3a      	ldr	r2, [r7, #32]
 80057b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f002 f9a2 	bl	8007b04 <xTaskCreateStatic>
 80057c0:	4603      	mov	r3, r0
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	e013      	b.n	80057ee <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d110      	bne.n	80057ee <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	f107 0310 	add.w	r3, r7, #16
 80057d4:	9301      	str	r3, [sp, #4]
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057de:	68f8      	ldr	r0, [r7, #12]
 80057e0:	f002 f9f0 	bl	8007bc4 <xTaskCreate>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d001      	beq.n	80057ee <osThreadNew+0x11c>
            hTask = NULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80057ee:	693b      	ldr	r3, [r7, #16]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	@ 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005800:	f3ef 8305 	mrs	r3, IPSR
 8005804:	60bb      	str	r3, [r7, #8]
  return(result);
 8005806:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <osDelay+0x1c>
    stat = osErrorISR;
 800580c:	f06f 0305 	mvn.w	r3, #5
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e007      	b.n	8005824 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d002      	beq.n	8005824 <osDelay+0x2c>
      vTaskDelay(ticks);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f002 fb16 	bl	8007e50 <vTaskDelay>
    }
  }

  return (stat);
 8005824:	68fb      	ldr	r3, [r7, #12]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800583a:	f3ef 8305 	mrs	r3, IPSR
 800583e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005840:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005842:	2b00      	cmp	r3, #0
 8005844:	d174      	bne.n	8005930 <osMutexNew+0x102>
    if (attr != NULL) {
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d003      	beq.n	8005854 <osMutexNew+0x26>
      type = attr->attr_bits;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	61bb      	str	r3, [r7, #24]
 8005852:	e001      	b.n	8005858 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <osMutexNew+0x3a>
      rmtx = 1U;
 8005862:	2301      	movs	r3, #1
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e001      	b.n	800586c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d15c      	bne.n	8005930 <osMutexNew+0x102>
      mem = -1;
 8005876:	f04f 33ff 	mov.w	r3, #4294967295
 800587a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d015      	beq.n	80058ae <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d006      	beq.n	8005898 <osMutexNew+0x6a>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005890:	d902      	bls.n	8005898 <osMutexNew+0x6a>
          mem = 1;
 8005892:	2301      	movs	r3, #1
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e00c      	b.n	80058b2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d108      	bne.n	80058b2 <osMutexNew+0x84>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d104      	bne.n	80058b2 <osMutexNew+0x84>
            mem = 0;
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e001      	b.n	80058b2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d112      	bne.n	80058de <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	4619      	mov	r1, r3
 80058c4:	2004      	movs	r0, #4
 80058c6:	f001 f9b0 	bl	8006c2a <xQueueCreateMutexStatic>
 80058ca:	61f8      	str	r0, [r7, #28]
 80058cc:	e016      	b.n	80058fc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	4619      	mov	r1, r3
 80058d4:	2001      	movs	r0, #1
 80058d6:	f001 f9a8 	bl	8006c2a <xQueueCreateMutexStatic>
 80058da:	61f8      	str	r0, [r7, #28]
 80058dc:	e00e      	b.n	80058fc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d10b      	bne.n	80058fc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80058ea:	2004      	movs	r0, #4
 80058ec:	f001 f985 	bl	8006bfa <xQueueCreateMutex>
 80058f0:	61f8      	str	r0, [r7, #28]
 80058f2:	e003      	b.n	80058fc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80058f4:	2001      	movs	r0, #1
 80058f6:	f001 f980 	bl	8006bfa <xQueueCreateMutex>
 80058fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <osMutexNew+0xee>
        if (attr != NULL) {
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <osMutexNew+0xe2>
          name = attr->name;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	e001      	b.n	8005914 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	69f8      	ldr	r0, [r7, #28]
 8005918:	f002 f86c 	bl	80079f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d006      	beq.n	8005930 <osMutexNew+0x102>
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d003      	beq.n	8005930 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	f043 0301 	orr.w	r3, r3, #1
 800592e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005930:	69fb      	ldr	r3, [r7, #28]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3720      	adds	r7, #32
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f023 0301 	bic.w	r3, r3, #1
 800594a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005958:	f3ef 8305 	mrs	r3, IPSR
 800595c:	60bb      	str	r3, [r7, #8]
  return(result);
 800595e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005964:	f06f 0305 	mvn.w	r3, #5
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e02c      	b.n	80059c6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005972:	f06f 0303 	mvn.w	r3, #3
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	e025      	b.n	80059c6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d011      	beq.n	80059a4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6938      	ldr	r0, [r7, #16]
 8005984:	f001 f9a1 	bl	8006cca <xQueueTakeMutexRecursive>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d01b      	beq.n	80059c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005994:	f06f 0301 	mvn.w	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e014      	b.n	80059c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800599c:	f06f 0302 	mvn.w	r3, #2
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e010      	b.n	80059c6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	6938      	ldr	r0, [r7, #16]
 80059a8:	f001 fd46 	bl	8007438 <xQueueSemaphoreTake>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d009      	beq.n	80059c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d003      	beq.n	80059c0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80059b8:	f06f 0301 	mvn.w	r3, #1
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e002      	b.n	80059c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80059c0:	f06f 0302 	mvn.w	r3, #2
 80059c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80059c6:	697b      	ldr	r3, [r7, #20]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3718      	adds	r7, #24
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f023 0301 	bic.w	r3, r3, #1
 80059de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ec:	f3ef 8305 	mrs	r3, IPSR
 80059f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80059f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <osMutexRelease+0x30>
    stat = osErrorISR;
 80059f8:	f06f 0305 	mvn.w	r3, #5
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e01f      	b.n	8005a40 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d103      	bne.n	8005a0e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005a06:	f06f 0303 	mvn.w	r3, #3
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e018      	b.n	8005a40 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d009      	beq.n	8005a28 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005a14:	6938      	ldr	r0, [r7, #16]
 8005a16:	f001 f923 	bl	8006c60 <xQueueGiveMutexRecursive>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d00f      	beq.n	8005a40 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a20:	f06f 0302 	mvn.w	r3, #2
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e00b      	b.n	8005a40 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	6938      	ldr	r0, [r7, #16]
 8005a30:	f001 f9f0 	bl	8006e14 <xQueueGenericSend>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d002      	beq.n	8005a40 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a3a:	f06f 0302 	mvn.w	r3, #2
 8005a3e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a40:	697b      	ldr	r3, [r7, #20]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b08a      	sub	sp, #40	@ 0x28
 8005a4e:	af02      	add	r7, sp, #8
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a5a:	f3ef 8305 	mrs	r3, IPSR
 8005a5e:	613b      	str	r3, [r7, #16]
  return(result);
 8005a60:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d175      	bne.n	8005b52 <osSemaphoreNew+0x108>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d072      	beq.n	8005b52 <osSemaphoreNew+0x108>
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d86e      	bhi.n	8005b52 <osSemaphoreNew+0x108>
    mem = -1;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
 8005a78:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d015      	beq.n	8005aac <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d006      	beq.n	8005a96 <osSemaphoreNew+0x4c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a8e:	d902      	bls.n	8005a96 <osSemaphoreNew+0x4c>
        mem = 1;
 8005a90:	2301      	movs	r3, #1
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	e00c      	b.n	8005ab0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <osSemaphoreNew+0x66>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d104      	bne.n	8005ab0 <osSemaphoreNew+0x66>
          mem = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	61bb      	str	r3, [r7, #24]
 8005aaa:	e001      	b.n	8005ab0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005aac:	2300      	movs	r3, #0
 8005aae:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ab6:	d04c      	beq.n	8005b52 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d128      	bne.n	8005b10 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d10a      	bne.n	8005ada <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2203      	movs	r2, #3
 8005aca:	9200      	str	r2, [sp, #0]
 8005acc:	2200      	movs	r2, #0
 8005ace:	2100      	movs	r1, #0
 8005ad0:	2001      	movs	r0, #1
 8005ad2:	f000 ff9d 	bl	8006a10 <xQueueGenericCreateStatic>
 8005ad6:	61f8      	str	r0, [r7, #28]
 8005ad8:	e005      	b.n	8005ae6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005ada:	2203      	movs	r2, #3
 8005adc:	2100      	movs	r1, #0
 8005ade:	2001      	movs	r0, #1
 8005ae0:	f001 f813 	bl	8006b0a <xQueueGenericCreate>
 8005ae4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d022      	beq.n	8005b32 <osSemaphoreNew+0xe8>
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d01f      	beq.n	8005b32 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	2200      	movs	r2, #0
 8005af6:	2100      	movs	r1, #0
 8005af8:	69f8      	ldr	r0, [r7, #28]
 8005afa:	f001 f98b 	bl	8006e14 <xQueueGenericSend>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d016      	beq.n	8005b32 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005b04:	69f8      	ldr	r0, [r7, #28]
 8005b06:	f001 fe29 	bl	800775c <vQueueDelete>
            hSemaphore = NULL;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	61fb      	str	r3, [r7, #28]
 8005b0e:	e010      	b.n	8005b32 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d108      	bne.n	8005b28 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f001 f90a 	bl	8006d38 <xQueueCreateCountingSemaphoreStatic>
 8005b24:	61f8      	str	r0, [r7, #28]
 8005b26:	e004      	b.n	8005b32 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f001 f93d 	bl	8006daa <xQueueCreateCountingSemaphore>
 8005b30:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005b32:	69fb      	ldr	r3, [r7, #28]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00c      	beq.n	8005b52 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	e001      	b.n	8005b4a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b4a:	6979      	ldr	r1, [r7, #20]
 8005b4c:	69f8      	ldr	r0, [r7, #28]
 8005b4e:	f001 ff51 	bl	80079f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b52:	69fb      	ldr	r3, [r7, #28]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3720      	adds	r7, #32
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d103      	bne.n	8005b7c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b74:	f06f 0303 	mvn.w	r3, #3
 8005b78:	617b      	str	r3, [r7, #20]
 8005b7a:	e039      	b.n	8005bf0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b7c:	f3ef 8305 	mrs	r3, IPSR
 8005b80:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b82:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d022      	beq.n	8005bce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b8e:	f06f 0303 	mvn.w	r3, #3
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	e02c      	b.n	8005bf0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b9a:	f107 0308 	add.w	r3, r7, #8
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6938      	ldr	r0, [r7, #16]
 8005ba4:	f001 fd58 	bl	8007658 <xQueueReceiveFromISR>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d003      	beq.n	8005bb6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005bae:	f06f 0302 	mvn.w	r3, #2
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	e01c      	b.n	8005bf0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d019      	beq.n	8005bf0 <osSemaphoreAcquire+0x94>
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005bfc <osSemaphoreAcquire+0xa0>)
 8005bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bc2:	601a      	str	r2, [r3, #0]
 8005bc4:	f3bf 8f4f 	dsb	sy
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	e010      	b.n	8005bf0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6938      	ldr	r0, [r7, #16]
 8005bd2:	f001 fc31 	bl	8007438 <xQueueSemaphoreTake>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d009      	beq.n	8005bf0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005be2:	f06f 0301 	mvn.w	r3, #1
 8005be6:	617b      	str	r3, [r7, #20]
 8005be8:	e002      	b.n	8005bf0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005bea:	f06f 0302 	mvn.w	r3, #2
 8005bee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bf0:	697b      	ldr	r3, [r7, #20]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	e000ed04 	.word	0xe000ed04

08005c00 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d103      	bne.n	8005c1e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005c16:	f06f 0303 	mvn.w	r3, #3
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e02c      	b.n	8005c78 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c1e:	f3ef 8305 	mrs	r3, IPSR
 8005c22:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c24:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d01a      	beq.n	8005c60 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c2e:	f107 0308 	add.w	r3, r7, #8
 8005c32:	4619      	mov	r1, r3
 8005c34:	6938      	ldr	r0, [r7, #16]
 8005c36:	f001 fa8d 	bl	8007154 <xQueueGiveFromISR>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d003      	beq.n	8005c48 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005c40:	f06f 0302 	mvn.w	r3, #2
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	e017      	b.n	8005c78 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d014      	beq.n	8005c78 <osSemaphoreRelease+0x78>
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <osSemaphoreRelease+0x84>)
 8005c50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	e00b      	b.n	8005c78 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c60:	2300      	movs	r3, #0
 8005c62:	2200      	movs	r2, #0
 8005c64:	2100      	movs	r1, #0
 8005c66:	6938      	ldr	r0, [r7, #16]
 8005c68:	f001 f8d4 	bl	8006e14 <xQueueGenericSend>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d002      	beq.n	8005c78 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c72:	f06f 0302 	mvn.w	r3, #2
 8005c76:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c78:	697b      	ldr	r3, [r7, #20]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	e000ed04 	.word	0xe000ed04

08005c88 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08a      	sub	sp, #40	@ 0x28
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c98:	f3ef 8305 	mrs	r3, IPSR
 8005c9c:	613b      	str	r3, [r7, #16]
  return(result);
 8005c9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d15f      	bne.n	8005d64 <osMessageQueueNew+0xdc>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d05c      	beq.n	8005d64 <osMessageQueueNew+0xdc>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d059      	beq.n	8005d64 <osMessageQueueNew+0xdc>
    mem = -1;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d029      	beq.n	8005d10 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d012      	beq.n	8005cea <osMessageQueueNew+0x62>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	2b4f      	cmp	r3, #79	@ 0x4f
 8005cca:	d90e      	bls.n	8005cea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	695a      	ldr	r2, [r3, #20]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68b9      	ldr	r1, [r7, #8]
 8005cdc:	fb01 f303 	mul.w	r3, r1, r3
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d302      	bcc.n	8005cea <osMessageQueueNew+0x62>
        mem = 1;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e014      	b.n	8005d14 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d110      	bne.n	8005d14 <osMessageQueueNew+0x8c>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10c      	bne.n	8005d14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d108      	bne.n	8005d14 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <osMessageQueueNew+0x8c>
          mem = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
 8005d0e:	e001      	b.n	8005d14 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	2b01      	cmp	r3, #1
 8005d18:	d10b      	bne.n	8005d32 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691a      	ldr	r2, [r3, #16]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2100      	movs	r1, #0
 8005d24:	9100      	str	r1, [sp, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 fe71 	bl	8006a10 <xQueueGenericCreateStatic>
 8005d2e:	61f8      	str	r0, [r7, #28]
 8005d30:	e008      	b.n	8005d44 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d38:	2200      	movs	r2, #0
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fee4 	bl	8006b0a <xQueueGenericCreate>
 8005d42:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00c      	beq.n	8005d64 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d003      	beq.n	8005d58 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	e001      	b.n	8005d5c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	69f8      	ldr	r0, [r7, #28]
 8005d60:	f001 fe48 	bl	80079f4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d64:	69fb      	ldr	r3, [r7, #28]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b088      	sub	sp, #32
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	603b      	str	r3, [r7, #0]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d88:	f3ef 8305 	mrs	r3, IPSR
 8005d8c:	617b      	str	r3, [r7, #20]
  return(result);
 8005d8e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d028      	beq.n	8005de6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d005      	beq.n	8005da6 <osMessageQueuePut+0x36>
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d002      	beq.n	8005da6 <osMessageQueuePut+0x36>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005da6:	f06f 0303 	mvn.w	r3, #3
 8005daa:	61fb      	str	r3, [r7, #28]
 8005dac:	e038      	b.n	8005e20 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005dae:	2300      	movs	r3, #0
 8005db0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005db2:	f107 0210 	add.w	r2, r7, #16
 8005db6:	2300      	movs	r3, #0
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	69b8      	ldr	r0, [r7, #24]
 8005dbc:	f001 f92c 	bl	8007018 <xQueueGenericSendFromISR>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d003      	beq.n	8005dce <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005dc6:	f06f 0302 	mvn.w	r3, #2
 8005dca:	61fb      	str	r3, [r7, #28]
 8005dcc:	e028      	b.n	8005e20 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d025      	beq.n	8005e20 <osMessageQueuePut+0xb0>
 8005dd4:	4b15      	ldr	r3, [pc, #84]	@ (8005e2c <osMessageQueuePut+0xbc>)
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	e01c      	b.n	8005e20 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d002      	beq.n	8005df2 <osMessageQueuePut+0x82>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d103      	bne.n	8005dfa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005df2:	f06f 0303 	mvn.w	r3, #3
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	e012      	b.n	8005e20 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	683a      	ldr	r2, [r7, #0]
 8005dfe:	68b9      	ldr	r1, [r7, #8]
 8005e00:	69b8      	ldr	r0, [r7, #24]
 8005e02:	f001 f807 	bl	8006e14 <xQueueGenericSend>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b01      	cmp	r3, #1
 8005e0a:	d009      	beq.n	8005e20 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d003      	beq.n	8005e1a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005e12:	f06f 0301 	mvn.w	r3, #1
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e002      	b.n	8005e20 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005e1a:	f06f 0302 	mvn.w	r3, #2
 8005e1e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e20:	69fb      	ldr	r3, [r7, #28]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b088      	sub	sp, #32
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e46:	f3ef 8305 	mrs	r3, IPSR
 8005e4a:	617b      	str	r3, [r7, #20]
  return(result);
 8005e4c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d028      	beq.n	8005ea4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <osMessageQueueGet+0x34>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <osMessageQueueGet+0x34>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d003      	beq.n	8005e6c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005e64:	f06f 0303 	mvn.w	r3, #3
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	e037      	b.n	8005edc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005e70:	f107 0310 	add.w	r3, r7, #16
 8005e74:	461a      	mov	r2, r3
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	69b8      	ldr	r0, [r7, #24]
 8005e7a:	f001 fbed 	bl	8007658 <xQueueReceiveFromISR>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d003      	beq.n	8005e8c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005e84:	f06f 0302 	mvn.w	r3, #2
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e027      	b.n	8005edc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d024      	beq.n	8005edc <osMessageQueueGet+0xac>
 8005e92:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <osMessageQueueGet+0xb8>)
 8005e94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	e01b      	b.n	8005edc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d002      	beq.n	8005eb0 <osMessageQueueGet+0x80>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d103      	bne.n	8005eb8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005eb0:	f06f 0303 	mvn.w	r3, #3
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e011      	b.n	8005edc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	69b8      	ldr	r0, [r7, #24]
 8005ebe:	f001 f9d9 	bl	8007274 <xQueueReceive>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d009      	beq.n	8005edc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005ece:	f06f 0301 	mvn.w	r3, #1
 8005ed2:	61fb      	str	r3, [r7, #28]
 8005ed4:	e002      	b.n	8005edc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005ed6:	f06f 0302 	mvn.w	r3, #2
 8005eda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005edc:	69fb      	ldr	r3, [r7, #28]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3720      	adds	r7, #32
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	e000ed04 	.word	0xe000ed04

08005eec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4a07      	ldr	r2, [pc, #28]	@ (8005f18 <vApplicationGetIdleTaskMemory+0x2c>)
 8005efc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	4a06      	ldr	r2, [pc, #24]	@ (8005f1c <vApplicationGetIdleTaskMemory+0x30>)
 8005f02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f0a:	601a      	str	r2, [r3, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	24000328 	.word	0x24000328
 8005f1c:	24000384 	.word	0x24000384

08005f20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	60b9      	str	r1, [r7, #8]
 8005f2a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4a07      	ldr	r2, [pc, #28]	@ (8005f4c <vApplicationGetTimerTaskMemory+0x2c>)
 8005f30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4a06      	ldr	r2, [pc, #24]	@ (8005f50 <vApplicationGetTimerTaskMemory+0x30>)
 8005f36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f3e:	601a      	str	r2, [r3, #0]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	24000784 	.word	0x24000784
 8005f50:	240007e0 	.word	0x240007e0

08005f54 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f60:	f002 f814 	bl	8007f8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f64:	4b5c      	ldr	r3, [pc, #368]	@ (80060d8 <pvPortMalloc+0x184>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d101      	bne.n	8005f70 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f6c:	f000 f924 	bl	80061b8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f70:	4b5a      	ldr	r3, [pc, #360]	@ (80060dc <pvPortMalloc+0x188>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4013      	ands	r3, r2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f040 8095 	bne.w	80060a8 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d01e      	beq.n	8005fc2 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f84:	2208      	movs	r2, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4413      	add	r3, r2
 8005f8a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f003 0307 	and.w	r3, r3, #7
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d015      	beq.n	8005fc2 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00b      	beq.n	8005fc2 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fae:	f383 8811 	msr	BASEPRI, r3
 8005fb2:	f3bf 8f6f 	isb	sy
 8005fb6:	f3bf 8f4f 	dsb	sy
 8005fba:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005fbc:	bf00      	nop
 8005fbe:	bf00      	nop
 8005fc0:	e7fd      	b.n	8005fbe <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d06f      	beq.n	80060a8 <pvPortMalloc+0x154>
 8005fc8:	4b45      	ldr	r3, [pc, #276]	@ (80060e0 <pvPortMalloc+0x18c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d86a      	bhi.n	80060a8 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005fd2:	4b44      	ldr	r3, [pc, #272]	@ (80060e4 <pvPortMalloc+0x190>)
 8005fd4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005fd6:	4b43      	ldr	r3, [pc, #268]	@ (80060e4 <pvPortMalloc+0x190>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fdc:	e004      	b.n	8005fe8 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d903      	bls.n	8005ffa <pvPortMalloc+0xa6>
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1f1      	bne.n	8005fde <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ffa:	4b37      	ldr	r3, [pc, #220]	@ (80060d8 <pvPortMalloc+0x184>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006000:	429a      	cmp	r2, r3
 8006002:	d051      	beq.n	80060a8 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2208      	movs	r2, #8
 800600a:	4413      	add	r3, r2
 800600c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800600e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	6a3b      	ldr	r3, [r7, #32]
 8006014:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	1ad2      	subs	r2, r2, r3
 800601e:	2308      	movs	r3, #8
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	429a      	cmp	r2, r3
 8006024:	d920      	bls.n	8006068 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4413      	add	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00b      	beq.n	8006050 <pvPortMalloc+0xfc>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	613b      	str	r3, [r7, #16]
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	e7fd      	b.n	800604c <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	685a      	ldr	r2, [r3, #4]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	1ad2      	subs	r2, r2, r3
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006062:	69b8      	ldr	r0, [r7, #24]
 8006064:	f000 f90a 	bl	800627c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006068:	4b1d      	ldr	r3, [pc, #116]	@ (80060e0 <pvPortMalloc+0x18c>)
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	4a1b      	ldr	r2, [pc, #108]	@ (80060e0 <pvPortMalloc+0x18c>)
 8006074:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006076:	4b1a      	ldr	r3, [pc, #104]	@ (80060e0 <pvPortMalloc+0x18c>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4b1b      	ldr	r3, [pc, #108]	@ (80060e8 <pvPortMalloc+0x194>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d203      	bcs.n	800608a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006082:	4b17      	ldr	r3, [pc, #92]	@ (80060e0 <pvPortMalloc+0x18c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a18      	ldr	r2, [pc, #96]	@ (80060e8 <pvPortMalloc+0x194>)
 8006088:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608c:	685a      	ldr	r2, [r3, #4]
 800608e:	4b13      	ldr	r3, [pc, #76]	@ (80060dc <pvPortMalloc+0x188>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	431a      	orrs	r2, r3
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800609e:	4b13      	ldr	r3, [pc, #76]	@ (80060ec <pvPortMalloc+0x198>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a11      	ldr	r2, [pc, #68]	@ (80060ec <pvPortMalloc+0x198>)
 80060a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80060a8:	f001 ff7e 	bl	8007fa8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	f003 0307 	and.w	r3, r3, #7
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00b      	beq.n	80060ce <pvPortMalloc+0x17a>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60fb      	str	r3, [r7, #12]
}
 80060c8:	bf00      	nop
 80060ca:	bf00      	nop
 80060cc:	e7fd      	b.n	80060ca <pvPortMalloc+0x176>
	return pvReturn;
 80060ce:	69fb      	ldr	r3, [r7, #28]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3728      	adds	r7, #40	@ 0x28
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	24004be8 	.word	0x24004be8
 80060dc:	24004bfc 	.word	0x24004bfc
 80060e0:	24004bec 	.word	0x24004bec
 80060e4:	24004be0 	.word	0x24004be0
 80060e8:	24004bf0 	.word	0x24004bf0
 80060ec:	24004bf4 	.word	0x24004bf4

080060f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d04f      	beq.n	80061a2 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006102:	2308      	movs	r3, #8
 8006104:	425b      	negs	r3, r3
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	4b25      	ldr	r3, [pc, #148]	@ (80061ac <vPortFree+0xbc>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4013      	ands	r3, r2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d10b      	bne.n	8006136 <vPortFree+0x46>
	__asm volatile
 800611e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006122:	f383 8811 	msr	BASEPRI, r3
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	f3bf 8f4f 	dsb	sy
 800612e:	60fb      	str	r3, [r7, #12]
}
 8006130:	bf00      	nop
 8006132:	bf00      	nop
 8006134:	e7fd      	b.n	8006132 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <vPortFree+0x66>
	__asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	60bb      	str	r3, [r7, #8]
}
 8006150:	bf00      	nop
 8006152:	bf00      	nop
 8006154:	e7fd      	b.n	8006152 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	4b14      	ldr	r3, [pc, #80]	@ (80061ac <vPortFree+0xbc>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4013      	ands	r3, r2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01e      	beq.n	80061a2 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11a      	bne.n	80061a2 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <vPortFree+0xbc>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	43db      	mvns	r3, r3
 8006176:	401a      	ands	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800617c:	f001 ff06 	bl	8007f8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	685a      	ldr	r2, [r3, #4]
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <vPortFree+0xc0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4413      	add	r3, r2
 800618a:	4a09      	ldr	r2, [pc, #36]	@ (80061b0 <vPortFree+0xc0>)
 800618c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800618e:	6938      	ldr	r0, [r7, #16]
 8006190:	f000 f874 	bl	800627c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006194:	4b07      	ldr	r3, [pc, #28]	@ (80061b4 <vPortFree+0xc4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	4a06      	ldr	r2, [pc, #24]	@ (80061b4 <vPortFree+0xc4>)
 800619c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800619e:	f001 ff03 	bl	8007fa8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061a2:	bf00      	nop
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	bf00      	nop
 80061ac:	24004bfc 	.word	0x24004bfc
 80061b0:	24004bec 	.word	0x24004bec
 80061b4:	24004bf8 	.word	0x24004bf8

080061b8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061b8:	b480      	push	{r7}
 80061ba:	b085      	sub	sp, #20
 80061bc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061be:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80061c2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061c4:	4b27      	ldr	r3, [pc, #156]	@ (8006264 <prvHeapInit+0xac>)
 80061c6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00c      	beq.n	80061ec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3307      	adds	r3, #7
 80061d6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f023 0307 	bic.w	r3, r3, #7
 80061de:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80061e0:	68ba      	ldr	r2, [r7, #8]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	4a1f      	ldr	r2, [pc, #124]	@ (8006264 <prvHeapInit+0xac>)
 80061e8:	4413      	add	r3, r2
 80061ea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061f0:	4a1d      	ldr	r2, [pc, #116]	@ (8006268 <prvHeapInit+0xb0>)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061f6:	4b1c      	ldr	r3, [pc, #112]	@ (8006268 <prvHeapInit+0xb0>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006204:	2208      	movs	r2, #8
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1a9b      	subs	r3, r3, r2
 800620a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f023 0307 	bic.w	r3, r3, #7
 8006212:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4a15      	ldr	r2, [pc, #84]	@ (800626c <prvHeapInit+0xb4>)
 8006218:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800621a:	4b14      	ldr	r3, [pc, #80]	@ (800626c <prvHeapInit+0xb4>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2200      	movs	r2, #0
 8006220:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006222:	4b12      	ldr	r3, [pc, #72]	@ (800626c <prvHeapInit+0xb4>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	1ad2      	subs	r2, r2, r3
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006238:	4b0c      	ldr	r3, [pc, #48]	@ (800626c <prvHeapInit+0xb4>)
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a0a      	ldr	r2, [pc, #40]	@ (8006270 <prvHeapInit+0xb8>)
 8006246:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a09      	ldr	r2, [pc, #36]	@ (8006274 <prvHeapInit+0xbc>)
 800624e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006250:	4b09      	ldr	r3, [pc, #36]	@ (8006278 <prvHeapInit+0xc0>)
 8006252:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006256:	601a      	str	r2, [r3, #0]
}
 8006258:	bf00      	nop
 800625a:	3714      	adds	r7, #20
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr
 8006264:	24000fe0 	.word	0x24000fe0
 8006268:	24004be0 	.word	0x24004be0
 800626c:	24004be8 	.word	0x24004be8
 8006270:	24004bf0 	.word	0x24004bf0
 8006274:	24004bec 	.word	0x24004bec
 8006278:	24004bfc 	.word	0x24004bfc

0800627c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006284:	4b28      	ldr	r3, [pc, #160]	@ (8006328 <prvInsertBlockIntoFreeList+0xac>)
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e002      	b.n	8006290 <prvInsertBlockIntoFreeList+0x14>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	429a      	cmp	r2, r3
 8006298:	d8f7      	bhi.n	800628a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	4413      	add	r3, r2
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d108      	bne.n	80062be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	441a      	add	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	441a      	add	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d118      	bne.n	8006304 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	4b15      	ldr	r3, [pc, #84]	@ (800632c <prvInsertBlockIntoFreeList+0xb0>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d00d      	beq.n	80062fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	441a      	add	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e008      	b.n	800630c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062fa:	4b0c      	ldr	r3, [pc, #48]	@ (800632c <prvInsertBlockIntoFreeList+0xb0>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	601a      	str	r2, [r3, #0]
 8006302:	e003      	b.n	800630c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	429a      	cmp	r2, r3
 8006312:	d002      	beq.n	800631a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	24004be0 	.word	0x24004be0
 800632c:	24004be8 	.word	0x24004be8

08006330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f103 0208 	add.w	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f04f 32ff 	mov.w	r2, #4294967295
 8006348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f103 0208 	add.w	r2, r3, #8
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f103 0208 	add.w	r2, r3, #8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800638a:	b480      	push	{r7}
 800638c:	b085      	sub	sp, #20
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	689a      	ldr	r2, [r3, #8]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	601a      	str	r2, [r3, #0]
}
 80063c6:	bf00      	nop
 80063c8:	3714      	adds	r7, #20
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e8:	d103      	bne.n	80063f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	e00c      	b.n	800640c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3308      	adds	r3, #8
 80063f6:	60fb      	str	r3, [r7, #12]
 80063f8:	e002      	b.n	8006400 <vListInsert+0x2e>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	60fb      	str	r3, [r7, #12]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	68ba      	ldr	r2, [r7, #8]
 8006408:	429a      	cmp	r2, r3
 800640a:	d2f6      	bcs.n	80063fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	683a      	ldr	r2, [r7, #0]
 8006426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	601a      	str	r2, [r3, #0]
}
 8006438:	bf00      	nop
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6892      	ldr	r2, [r2, #8]
 800645a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	6852      	ldr	r2, [r2, #4]
 8006464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d103      	bne.n	8006478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	689a      	ldr	r2, [r3, #8]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2200      	movs	r2, #0
 800647c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	1e5a      	subs	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006498:	b480      	push	{r7}
 800649a:	b085      	sub	sp, #20
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	3b04      	subs	r3, #4
 80064a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	3b04      	subs	r3, #4
 80064b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f023 0201 	bic.w	r2, r3, #1
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064c8:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <pxPortInitialiseStack+0x64>)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3b14      	subs	r3, #20
 80064d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	3b04      	subs	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f06f 0202 	mvn.w	r2, #2
 80064e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3b20      	subs	r3, #32
 80064ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064ee:	68fb      	ldr	r3, [r7, #12]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	08006501 	.word	0x08006501

08006500 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006506:	2300      	movs	r3, #0
 8006508:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800650a:	4b13      	ldr	r3, [pc, #76]	@ (8006558 <prvTaskExitError+0x58>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d00b      	beq.n	800652c <prvTaskExitError+0x2c>
	__asm volatile
 8006514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006518:	f383 8811 	msr	BASEPRI, r3
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f3bf 8f4f 	dsb	sy
 8006524:	60fb      	str	r3, [r7, #12]
}
 8006526:	bf00      	nop
 8006528:	bf00      	nop
 800652a:	e7fd      	b.n	8006528 <prvTaskExitError+0x28>
	__asm volatile
 800652c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006530:	f383 8811 	msr	BASEPRI, r3
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	f3bf 8f4f 	dsb	sy
 800653c:	60bb      	str	r3, [r7, #8]
}
 800653e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006540:	bf00      	nop
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d0fc      	beq.n	8006542 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	24000024 	.word	0x24000024
 800655c:	00000000 	.word	0x00000000

08006560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006560:	4b07      	ldr	r3, [pc, #28]	@ (8006580 <pxCurrentTCBConst2>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	6808      	ldr	r0, [r1, #0]
 8006566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800656a:	f380 8809 	msr	PSP, r0
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8811 	msr	BASEPRI, r0
 800657a:	4770      	bx	lr
 800657c:	f3af 8000 	nop.w

08006580 <pxCurrentTCBConst2>:
 8006580:	24004c48 	.word	0x24004c48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006584:	bf00      	nop
 8006586:	bf00      	nop

08006588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006588:	4808      	ldr	r0, [pc, #32]	@ (80065ac <prvPortStartFirstTask+0x24>)
 800658a:	6800      	ldr	r0, [r0, #0]
 800658c:	6800      	ldr	r0, [r0, #0]
 800658e:	f380 8808 	msr	MSP, r0
 8006592:	f04f 0000 	mov.w	r0, #0
 8006596:	f380 8814 	msr	CONTROL, r0
 800659a:	b662      	cpsie	i
 800659c:	b661      	cpsie	f
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	df00      	svc	0
 80065a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80065aa:	bf00      	nop
 80065ac:	e000ed08 	.word	0xe000ed08

080065b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065b6:	4b47      	ldr	r3, [pc, #284]	@ (80066d4 <xPortStartScheduler+0x124>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a47      	ldr	r2, [pc, #284]	@ (80066d8 <xPortStartScheduler+0x128>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10b      	bne.n	80065d8 <xPortStartScheduler+0x28>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	613b      	str	r3, [r7, #16]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065d8:	4b3e      	ldr	r3, [pc, #248]	@ (80066d4 <xPortStartScheduler+0x124>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a3f      	ldr	r2, [pc, #252]	@ (80066dc <xPortStartScheduler+0x12c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10b      	bne.n	80065fa <xPortStartScheduler+0x4a>
	__asm volatile
 80065e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e6:	f383 8811 	msr	BASEPRI, r3
 80065ea:	f3bf 8f6f 	isb	sy
 80065ee:	f3bf 8f4f 	dsb	sy
 80065f2:	60fb      	str	r3, [r7, #12]
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	e7fd      	b.n	80065f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065fa:	4b39      	ldr	r3, [pc, #228]	@ (80066e0 <xPortStartScheduler+0x130>)
 80065fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	b2db      	uxtb	r3, r3
 8006604:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	22ff      	movs	r2, #255	@ 0xff
 800660a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	b2db      	uxtb	r3, r3
 8006618:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800661c:	b2da      	uxtb	r2, r3
 800661e:	4b31      	ldr	r3, [pc, #196]	@ (80066e4 <xPortStartScheduler+0x134>)
 8006620:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006622:	4b31      	ldr	r3, [pc, #196]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006624:	2207      	movs	r2, #7
 8006626:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006628:	e009      	b.n	800663e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800662a:	4b2f      	ldr	r3, [pc, #188]	@ (80066e8 <xPortStartScheduler+0x138>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3b01      	subs	r3, #1
 8006630:	4a2d      	ldr	r2, [pc, #180]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006632:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	b2db      	uxtb	r3, r3
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	b2db      	uxtb	r3, r3
 800663c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006646:	2b80      	cmp	r3, #128	@ 0x80
 8006648:	d0ef      	beq.n	800662a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800664a:	4b27      	ldr	r3, [pc, #156]	@ (80066e8 <xPortStartScheduler+0x138>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1c3 0307 	rsb	r3, r3, #7
 8006652:	2b04      	cmp	r3, #4
 8006654:	d00b      	beq.n	800666e <xPortStartScheduler+0xbe>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	60bb      	str	r3, [r7, #8]
}
 8006668:	bf00      	nop
 800666a:	bf00      	nop
 800666c:	e7fd      	b.n	800666a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800666e:	4b1e      	ldr	r3, [pc, #120]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	4a1c      	ldr	r2, [pc, #112]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006676:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006678:	4b1b      	ldr	r3, [pc, #108]	@ (80066e8 <xPortStartScheduler+0x138>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006680:	4a19      	ldr	r2, [pc, #100]	@ (80066e8 <xPortStartScheduler+0x138>)
 8006682:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	b2da      	uxtb	r2, r3
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800668c:	4b17      	ldr	r3, [pc, #92]	@ (80066ec <xPortStartScheduler+0x13c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a16      	ldr	r2, [pc, #88]	@ (80066ec <xPortStartScheduler+0x13c>)
 8006692:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006696:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006698:	4b14      	ldr	r3, [pc, #80]	@ (80066ec <xPortStartScheduler+0x13c>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a13      	ldr	r2, [pc, #76]	@ (80066ec <xPortStartScheduler+0x13c>)
 800669e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80066a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80066a4:	f000 f8da 	bl	800685c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80066a8:	4b11      	ldr	r3, [pc, #68]	@ (80066f0 <xPortStartScheduler+0x140>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80066ae:	f000 f8f9 	bl	80068a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80066b2:	4b10      	ldr	r3, [pc, #64]	@ (80066f4 <xPortStartScheduler+0x144>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a0f      	ldr	r2, [pc, #60]	@ (80066f4 <xPortStartScheduler+0x144>)
 80066b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80066bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80066be:	f7ff ff63 	bl	8006588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80066c2:	f001 fdeb 	bl	800829c <vTaskSwitchContext>
	prvTaskExitError();
 80066c6:	f7ff ff1b 	bl	8006500 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3718      	adds	r7, #24
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	e000ed00 	.word	0xe000ed00
 80066d8:	410fc271 	.word	0x410fc271
 80066dc:	410fc270 	.word	0x410fc270
 80066e0:	e000e400 	.word	0xe000e400
 80066e4:	24004c00 	.word	0x24004c00
 80066e8:	24004c04 	.word	0x24004c04
 80066ec:	e000ed20 	.word	0xe000ed20
 80066f0:	24000024 	.word	0x24000024
 80066f4:	e000ef34 	.word	0xe000ef34

080066f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	607b      	str	r3, [r7, #4]
}
 8006710:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006712:	4b10      	ldr	r3, [pc, #64]	@ (8006754 <vPortEnterCritical+0x5c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3301      	adds	r3, #1
 8006718:	4a0e      	ldr	r2, [pc, #56]	@ (8006754 <vPortEnterCritical+0x5c>)
 800671a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800671c:	4b0d      	ldr	r3, [pc, #52]	@ (8006754 <vPortEnterCritical+0x5c>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d110      	bne.n	8006746 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006724:	4b0c      	ldr	r3, [pc, #48]	@ (8006758 <vPortEnterCritical+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <vPortEnterCritical+0x4e>
	__asm volatile
 800672e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006732:	f383 8811 	msr	BASEPRI, r3
 8006736:	f3bf 8f6f 	isb	sy
 800673a:	f3bf 8f4f 	dsb	sy
 800673e:	603b      	str	r3, [r7, #0]
}
 8006740:	bf00      	nop
 8006742:	bf00      	nop
 8006744:	e7fd      	b.n	8006742 <vPortEnterCritical+0x4a>
	}
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	24000024 	.word	0x24000024
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006762:	4b12      	ldr	r3, [pc, #72]	@ (80067ac <vPortExitCritical+0x50>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <vPortExitCritical+0x26>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	607b      	str	r3, [r7, #4]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006782:	4b0a      	ldr	r3, [pc, #40]	@ (80067ac <vPortExitCritical+0x50>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3b01      	subs	r3, #1
 8006788:	4a08      	ldr	r2, [pc, #32]	@ (80067ac <vPortExitCritical+0x50>)
 800678a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800678c:	4b07      	ldr	r3, [pc, #28]	@ (80067ac <vPortExitCritical+0x50>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d105      	bne.n	80067a0 <vPortExitCritical+0x44>
 8006794:	2300      	movs	r3, #0
 8006796:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800679e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr
 80067ac:	24000024 	.word	0x24000024

080067b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80067b0:	f3ef 8009 	mrs	r0, PSP
 80067b4:	f3bf 8f6f 	isb	sy
 80067b8:	4b15      	ldr	r3, [pc, #84]	@ (8006810 <pxCurrentTCBConst>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	f01e 0f10 	tst.w	lr, #16
 80067c0:	bf08      	it	eq
 80067c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ca:	6010      	str	r0, [r2, #0]
 80067cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80067d4:	f380 8811 	msr	BASEPRI, r0
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f001 fd5c 	bl	800829c <vTaskSwitchContext>
 80067e4:	f04f 0000 	mov.w	r0, #0
 80067e8:	f380 8811 	msr	BASEPRI, r0
 80067ec:	bc09      	pop	{r0, r3}
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	6808      	ldr	r0, [r1, #0]
 80067f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f6:	f01e 0f10 	tst.w	lr, #16
 80067fa:	bf08      	it	eq
 80067fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006800:	f380 8809 	msr	PSP, r0
 8006804:	f3bf 8f6f 	isb	sy
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst>:
 8006810:	24004c48 	.word	0x24004c48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006832:	f001 fc79 	bl	8008128 <xTaskIncrementTick>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800683c:	4b06      	ldr	r3, [pc, #24]	@ (8006858 <xPortSysTickHandler+0x40>)
 800683e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006842:	601a      	str	r2, [r3, #0]
 8006844:	2300      	movs	r3, #0
 8006846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	f383 8811 	msr	BASEPRI, r3
}
 800684e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006850:	bf00      	nop
 8006852:	3708      	adds	r7, #8
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	e000ed04 	.word	0xe000ed04

0800685c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800685c:	b480      	push	{r7}
 800685e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <vPortSetupTimerInterrupt+0x34>)
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006866:	4b0b      	ldr	r3, [pc, #44]	@ (8006894 <vPortSetupTimerInterrupt+0x38>)
 8006868:	2200      	movs	r2, #0
 800686a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800686c:	4b0a      	ldr	r3, [pc, #40]	@ (8006898 <vPortSetupTimerInterrupt+0x3c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a0a      	ldr	r2, [pc, #40]	@ (800689c <vPortSetupTimerInterrupt+0x40>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	099b      	lsrs	r3, r3, #6
 8006878:	4a09      	ldr	r2, [pc, #36]	@ (80068a0 <vPortSetupTimerInterrupt+0x44>)
 800687a:	3b01      	subs	r3, #1
 800687c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800687e:	4b04      	ldr	r3, [pc, #16]	@ (8006890 <vPortSetupTimerInterrupt+0x34>)
 8006880:	2207      	movs	r2, #7
 8006882:	601a      	str	r2, [r3, #0]
}
 8006884:	bf00      	nop
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	e000e010 	.word	0xe000e010
 8006894:	e000e018 	.word	0xe000e018
 8006898:	24000000 	.word	0x24000000
 800689c:	10624dd3 	.word	0x10624dd3
 80068a0:	e000e014 	.word	0xe000e014

080068a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80068a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068b4 <vPortEnableVFP+0x10>
 80068a8:	6801      	ldr	r1, [r0, #0]
 80068aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068ae:	6001      	str	r1, [r0, #0]
 80068b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80068b2:	bf00      	nop
 80068b4:	e000ed88 	.word	0xe000ed88

080068b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80068be:	f3ef 8305 	mrs	r3, IPSR
 80068c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d915      	bls.n	80068f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068ca:	4a18      	ldr	r2, [pc, #96]	@ (800692c <vPortValidateInterruptPriority+0x74>)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068d4:	4b16      	ldr	r3, [pc, #88]	@ (8006930 <vPortValidateInterruptPriority+0x78>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	7afa      	ldrb	r2, [r7, #11]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d20b      	bcs.n	80068f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	607b      	str	r3, [r7, #4]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006934 <vPortValidateInterruptPriority+0x7c>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068fe:	4b0e      	ldr	r3, [pc, #56]	@ (8006938 <vPortValidateInterruptPriority+0x80>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d90b      	bls.n	800691e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	603b      	str	r3, [r7, #0]
}
 8006918:	bf00      	nop
 800691a:	bf00      	nop
 800691c:	e7fd      	b.n	800691a <vPortValidateInterruptPriority+0x62>
	}
 800691e:	bf00      	nop
 8006920:	3714      	adds	r7, #20
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	e000e3f0 	.word	0xe000e3f0
 8006930:	24004c00 	.word	0x24004c00
 8006934:	e000ed0c 	.word	0xe000ed0c
 8006938:	24004c04 	.word	0x24004c04

0800693c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <xQueueGenericReset+0x2c>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60bb      	str	r3, [r7, #8]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006968:	f7ff fec6 	bl	80066f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006974:	68f9      	ldr	r1, [r7, #12]
 8006976:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	441a      	add	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006998:	3b01      	subs	r3, #1
 800699a:	68f9      	ldr	r1, [r7, #12]
 800699c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800699e:	fb01 f303 	mul.w	r3, r1, r3
 80069a2:	441a      	add	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	22ff      	movs	r2, #255	@ 0xff
 80069ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	22ff      	movs	r2, #255	@ 0xff
 80069b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d114      	bne.n	80069e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d01a      	beq.n	80069fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3310      	adds	r3, #16
 80069ca:	4618      	mov	r0, r3
 80069cc:	f001 fd16 	bl	80083fc <xTaskRemoveFromEventList>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d012      	beq.n	80069fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069d6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a0c <xQueueGenericReset+0xd0>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	e009      	b.n	80069fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	3310      	adds	r3, #16
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fc9f 	bl	8006330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	3324      	adds	r3, #36	@ 0x24
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7ff fc9a 	bl	8006330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069fc:	f7ff feae 	bl	800675c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a00:	2301      	movs	r3, #1
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	e000ed04 	.word	0xe000ed04

08006a10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08e      	sub	sp, #56	@ 0x38
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
 8006a1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <xQueueGenericCreateStatic+0x56>
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <xQueueGenericCreateStatic+0x5a>
 8006a66:	2301      	movs	r3, #1
 8006a68:	e000      	b.n	8006a6c <xQueueGenericCreateStatic+0x5c>
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a74:	f383 8811 	msr	BASEPRI, r3
 8006a78:	f3bf 8f6f 	isb	sy
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	623b      	str	r3, [r7, #32]
}
 8006a82:	bf00      	nop
 8006a84:	bf00      	nop
 8006a86:	e7fd      	b.n	8006a84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d102      	bne.n	8006a94 <xQueueGenericCreateStatic+0x84>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <xQueueGenericCreateStatic+0x88>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <xQueueGenericCreateStatic+0x8a>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	61fb      	str	r3, [r7, #28]
}
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ab6:	2350      	movs	r3, #80	@ 0x50
 8006ab8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b50      	cmp	r3, #80	@ 0x50
 8006abe:	d00b      	beq.n	8006ad8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac4:	f383 8811 	msr	BASEPRI, r3
 8006ac8:	f3bf 8f6f 	isb	sy
 8006acc:	f3bf 8f4f 	dsb	sy
 8006ad0:	61bb      	str	r3, [r7, #24]
}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	e7fd      	b.n	8006ad4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006ad8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d00d      	beq.n	8006b00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006aec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006af0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f840 	bl	8006b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3730      	adds	r7, #48	@ 0x30
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b08a      	sub	sp, #40	@ 0x28
 8006b0e:	af02      	add	r7, sp, #8
 8006b10:	60f8      	str	r0, [r7, #12]
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	4613      	mov	r3, r2
 8006b16:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d10b      	bne.n	8006b36 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b22:	f383 8811 	msr	BASEPRI, r3
 8006b26:	f3bf 8f6f 	isb	sy
 8006b2a:	f3bf 8f4f 	dsb	sy
 8006b2e:	613b      	str	r3, [r7, #16]
}
 8006b30:	bf00      	nop
 8006b32:	bf00      	nop
 8006b34:	e7fd      	b.n	8006b32 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	fb02 f303 	mul.w	r3, r2, r3
 8006b3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	3350      	adds	r3, #80	@ 0x50
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff fa05 	bl	8005f54 <pvPortMalloc>
 8006b4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d011      	beq.n	8006b76 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	3350      	adds	r3, #80	@ 0x50
 8006b5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b64:	79fa      	ldrb	r2, [r7, #7]
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	9300      	str	r3, [sp, #0]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	68b9      	ldr	r1, [r7, #8]
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f000 f805 	bl	8006b80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b76:	69bb      	ldr	r3, [r7, #24]
	}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3720      	adds	r7, #32
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	60f8      	str	r0, [r7, #12]
 8006b88:	60b9      	str	r1, [r7, #8]
 8006b8a:	607a      	str	r2, [r7, #4]
 8006b8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d103      	bne.n	8006b9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	69ba      	ldr	r2, [r7, #24]
 8006b98:	601a      	str	r2, [r3, #0]
 8006b9a:	e002      	b.n	8006ba2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	68ba      	ldr	r2, [r7, #8]
 8006bac:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006bae:	2101      	movs	r1, #1
 8006bb0:	69b8      	ldr	r0, [r7, #24]
 8006bb2:	f7ff fec3 	bl	800693c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006bb6:	69bb      	ldr	r3, [r7, #24]
 8006bb8:	78fa      	ldrb	r2, [r7, #3]
 8006bba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006bbe:	bf00      	nop
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d00e      	beq.n	8006bf2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006be6:	2300      	movs	r3, #0
 8006be8:	2200      	movs	r2, #0
 8006bea:	2100      	movs	r1, #0
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	f000 f911 	bl	8006e14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006bf2:	bf00      	nop
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	4603      	mov	r3, r0
 8006c02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c04:	2301      	movs	r3, #1
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	2300      	movs	r3, #0
 8006c0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006c0c:	79fb      	ldrb	r3, [r7, #7]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	6939      	ldr	r1, [r7, #16]
 8006c12:	6978      	ldr	r0, [r7, #20]
 8006c14:	f7ff ff79 	bl	8006b0a <xQueueGenericCreate>
 8006c18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff ffd3 	bl	8006bc6 <prvInitialiseMutex>

		return xNewQueue;
 8006c20:	68fb      	ldr	r3, [r7, #12]
	}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006c2a:	b580      	push	{r7, lr}
 8006c2c:	b088      	sub	sp, #32
 8006c2e:	af02      	add	r7, sp, #8
 8006c30:	4603      	mov	r3, r0
 8006c32:	6039      	str	r1, [r7, #0]
 8006c34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c36:	2301      	movs	r3, #1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006c3e:	79fb      	ldrb	r3, [r7, #7]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2200      	movs	r2, #0
 8006c46:	6939      	ldr	r1, [r7, #16]
 8006c48:	6978      	ldr	r0, [r7, #20]
 8006c4a:	f7ff fee1 	bl	8006a10 <xQueueGenericCreateStatic>
 8006c4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f7ff ffb8 	bl	8006bc6 <prvInitialiseMutex>

		return xNewQueue;
 8006c56:	68fb      	ldr	r3, [r7, #12]
	}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006c60:	b590      	push	{r4, r7, lr}
 8006c62:	b087      	sub	sp, #28
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d10b      	bne.n	8006c8a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	60fb      	str	r3, [r7, #12]
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop
 8006c88:	e7fd      	b.n	8006c86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	689c      	ldr	r4, [r3, #8]
 8006c8e:	f001 fd75 	bl	800877c <xTaskGetCurrentTaskHandle>
 8006c92:	4603      	mov	r3, r0
 8006c94:	429c      	cmp	r4, r3
 8006c96:	d111      	bne.n	8006cbc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	1e5a      	subs	r2, r3, #1
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	68db      	ldr	r3, [r3, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d105      	bne.n	8006cb6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006caa:	2300      	movs	r3, #0
 8006cac:	2200      	movs	r2, #0
 8006cae:	2100      	movs	r1, #0
 8006cb0:	6938      	ldr	r0, [r7, #16]
 8006cb2:	f000 f8af 	bl	8006e14 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	e001      	b.n	8006cc0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006cc0:	697b      	ldr	r3, [r7, #20]
	}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd90      	pop	{r4, r7, pc}

08006cca <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006cca:	b590      	push	{r4, r7, lr}
 8006ccc:	b087      	sub	sp, #28
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
 8006cd2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce2:	f383 8811 	msr	BASEPRI, r3
 8006ce6:	f3bf 8f6f 	isb	sy
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	60fb      	str	r3, [r7, #12]
}
 8006cf0:	bf00      	nop
 8006cf2:	bf00      	nop
 8006cf4:	e7fd      	b.n	8006cf2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	689c      	ldr	r4, [r3, #8]
 8006cfa:	f001 fd3f 	bl	800877c <xTaskGetCurrentTaskHandle>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	429c      	cmp	r4, r3
 8006d02:	d107      	bne.n	8006d14 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e00c      	b.n	8006d2e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006d14:	6839      	ldr	r1, [r7, #0]
 8006d16:	6938      	ldr	r0, [r7, #16]
 8006d18:	f000 fb8e 	bl	8007438 <xQueueSemaphoreTake>
 8006d1c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	68db      	ldr	r3, [r3, #12]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006d2e:	697b      	ldr	r3, [r7, #20]
	}
 8006d30:	4618      	mov	r0, r3
 8006d32:	371c      	adds	r7, #28
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd90      	pop	{r4, r7, pc}

08006d38 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08a      	sub	sp, #40	@ 0x28
 8006d3c:	af02      	add	r7, sp, #8
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	61bb      	str	r3, [r7, #24]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d90b      	bls.n	8006d82 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	617b      	str	r3, [r7, #20]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006d82:	2302      	movs	r3, #2
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	68f8      	ldr	r0, [r7, #12]
 8006d8e:	f7ff fe3f 	bl	8006a10 <xQueueGenericCreateStatic>
 8006d92:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006da0:	69fb      	ldr	r3, [r7, #28]
	}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3720      	adds	r7, #32
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d10b      	bne.n	8006dd2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	613b      	str	r3, [r7, #16]
}
 8006dcc:	bf00      	nop
 8006dce:	bf00      	nop
 8006dd0:	e7fd      	b.n	8006dce <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d90b      	bls.n	8006df2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	60fb      	str	r3, [r7, #12]
}
 8006dec:	bf00      	nop
 8006dee:	bf00      	nop
 8006df0:	e7fd      	b.n	8006dee <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006df2:	2202      	movs	r2, #2
 8006df4:	2100      	movs	r1, #0
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fe87 	bl	8006b0a <xQueueGenericCreate>
 8006dfc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006e0a:	697b      	ldr	r3, [r7, #20]
	}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b08e      	sub	sp, #56	@ 0x38
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e22:	2300      	movs	r3, #0
 8006e24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10b      	bne.n	8006e48 <xQueueGenericSend+0x34>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d103      	bne.n	8006e56 <xQueueGenericSend+0x42>
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <xQueueGenericSend+0x46>
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <xQueueGenericSend+0x48>
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d10b      	bne.n	8006e78 <xQueueGenericSend+0x64>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x72>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d101      	bne.n	8006e8a <xQueueGenericSend+0x76>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <xQueueGenericSend+0x78>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <xQueueGenericSend+0x94>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	623b      	str	r3, [r7, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ea8:	f001 fc78 	bl	800879c <xTaskGetSchedulerState>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d102      	bne.n	8006eb8 <xQueueGenericSend+0xa4>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <xQueueGenericSend+0xa8>
 8006eb8:	2301      	movs	r3, #1
 8006eba:	e000      	b.n	8006ebe <xQueueGenericSend+0xaa>
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <xQueueGenericSend+0xc6>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	61fb      	str	r3, [r7, #28]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eda:	f7ff fc0d 	bl	80066f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d302      	bcc.n	8006ef0 <xQueueGenericSend+0xdc>
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d129      	bne.n	8006f44 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	68b9      	ldr	r1, [r7, #8]
 8006ef4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ef6:	f000 fc6d 	bl	80077d4 <prvCopyDataToQueue>
 8006efa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d010      	beq.n	8006f26 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f06:	3324      	adds	r3, #36	@ 0x24
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f001 fa77 	bl	80083fc <xTaskRemoveFromEventList>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d013      	beq.n	8006f3c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f14:	4b3f      	ldr	r3, [pc, #252]	@ (8007014 <xQueueGenericSend+0x200>)
 8006f16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	f3bf 8f6f 	isb	sy
 8006f24:	e00a      	b.n	8006f3c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d007      	beq.n	8006f3c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f2c:	4b39      	ldr	r3, [pc, #228]	@ (8007014 <xQueueGenericSend+0x200>)
 8006f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f3c:	f7ff fc0e 	bl	800675c <vPortExitCritical>
				return pdPASS;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e063      	b.n	800700c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f4a:	f7ff fc07 	bl	800675c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	e05c      	b.n	800700c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d106      	bne.n	8006f66 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f58:	f107 0314 	add.w	r3, r7, #20
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f001 fab1 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f62:	2301      	movs	r3, #1
 8006f64:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f66:	f7ff fbf9 	bl	800675c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f6a:	f001 f80f 	bl	8007f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f6e:	f7ff fbc3 	bl	80066f8 <vPortEnterCritical>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f78:	b25b      	sxtb	r3, r3
 8006f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7e:	d103      	bne.n	8006f88 <xQueueGenericSend+0x174>
 8006f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f8e:	b25b      	sxtb	r3, r3
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d103      	bne.n	8006f9e <xQueueGenericSend+0x18a>
 8006f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f9e:	f7ff fbdd 	bl	800675c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fa2:	1d3a      	adds	r2, r7, #4
 8006fa4:	f107 0314 	add.w	r3, r7, #20
 8006fa8:	4611      	mov	r1, r2
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 faa0 	bl	80084f0 <xTaskCheckForTimeOut>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d124      	bne.n	8007000 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fb6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fb8:	f000 fd04 	bl	80079c4 <prvIsQueueFull>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d018      	beq.n	8006ff4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc4:	3310      	adds	r3, #16
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	4611      	mov	r1, r2
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f001 f9c4 	bl	8008358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fd0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006fd2:	f000 fc8f 	bl	80078f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fd6:	f000 ffe7 	bl	8007fa8 <xTaskResumeAll>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	f47f af7c 	bne.w	8006eda <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <xQueueGenericSend+0x200>)
 8006fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	e772      	b.n	8006eda <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ff4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ff6:	f000 fc7d 	bl	80078f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ffa:	f000 ffd5 	bl	8007fa8 <xTaskResumeAll>
 8006ffe:	e76c      	b.n	8006eda <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007000:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007002:	f000 fc77 	bl	80078f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007006:	f000 ffcf 	bl	8007fa8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800700a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800700c:	4618      	mov	r0, r3
 800700e:	3738      	adds	r7, #56	@ 0x38
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	e000ed04 	.word	0xe000ed04

08007018 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b090      	sub	sp, #64	@ 0x40
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
 8007024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800702a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10b      	bne.n	8007048 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	e7fd      	b.n	8007044 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d103      	bne.n	8007056 <xQueueGenericSendFromISR+0x3e>
 800704e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d101      	bne.n	800705a <xQueueGenericSendFromISR+0x42>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <xQueueGenericSendFromISR+0x44>
 800705a:	2300      	movs	r3, #0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007064:	f383 8811 	msr	BASEPRI, r3
 8007068:	f3bf 8f6f 	isb	sy
 800706c:	f3bf 8f4f 	dsb	sy
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007072:	bf00      	nop
 8007074:	bf00      	nop
 8007076:	e7fd      	b.n	8007074 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d103      	bne.n	8007086 <xQueueGenericSendFromISR+0x6e>
 800707e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <xQueueGenericSendFromISR+0x72>
 8007086:	2301      	movs	r3, #1
 8007088:	e000      	b.n	800708c <xQueueGenericSendFromISR+0x74>
 800708a:	2300      	movs	r3, #0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d10b      	bne.n	80070a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	623b      	str	r3, [r7, #32]
}
 80070a2:	bf00      	nop
 80070a4:	bf00      	nop
 80070a6:	e7fd      	b.n	80070a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070a8:	f7ff fc06 	bl	80068b8 <vPortValidateInterruptPriority>
	__asm volatile
 80070ac:	f3ef 8211 	mrs	r2, BASEPRI
 80070b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	61fa      	str	r2, [r7, #28]
 80070c2:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80070c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d302      	bcc.n	80070da <xQueueGenericSendFromISR+0xc2>
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d12f      	bne.n	800713a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070ea:	683a      	ldr	r2, [r7, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070f0:	f000 fb70 	bl	80077d4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80070f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070fc:	d112      	bne.n	8007124 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	d016      	beq.n	8007134 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007108:	3324      	adds	r3, #36	@ 0x24
 800710a:	4618      	mov	r0, r3
 800710c:	f001 f976 	bl	80083fc <xTaskRemoveFromEventList>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00e      	beq.n	8007134 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d00b      	beq.n	8007134 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	e007      	b.n	8007134 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007124:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007128:	3301      	adds	r3, #1
 800712a:	b2db      	uxtb	r3, r3
 800712c:	b25a      	sxtb	r2, r3
 800712e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007134:	2301      	movs	r3, #1
 8007136:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007138:	e001      	b.n	800713e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800713a:	2300      	movs	r3, #0
 800713c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800713e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007140:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f383 8811 	msr	BASEPRI, r3
}
 8007148:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800714a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800714c:	4618      	mov	r0, r3
 800714e:	3740      	adds	r7, #64	@ 0x40
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	@ 0x38
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10b      	bne.n	8007180 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	623b      	str	r3, [r7, #32]
}
 800717a:	bf00      	nop
 800717c:	bf00      	nop
 800717e:	e7fd      	b.n	800717c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	61fb      	str	r3, [r7, #28]
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <xQueueGiveFromISR+0x5c>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <xQueueGiveFromISR+0x60>
 80071b0:	2301      	movs	r3, #1
 80071b2:	e000      	b.n	80071b6 <xQueueGiveFromISR+0x62>
 80071b4:	2300      	movs	r3, #0
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61bb      	str	r3, [r7, #24]
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80071d2:	f7ff fb71 	bl	80068b8 <vPortValidateInterruptPriority>
	__asm volatile
 80071d6:	f3ef 8211 	mrs	r2, BASEPRI
 80071da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071de:	f383 8811 	msr	BASEPRI, r3
 80071e2:	f3bf 8f6f 	isb	sy
 80071e6:	f3bf 8f4f 	dsb	sy
 80071ea:	617a      	str	r2, [r7, #20]
 80071ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80071ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80071f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80071f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071fe:	429a      	cmp	r2, r3
 8007200:	d22b      	bcs.n	800725a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007208:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007214:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721c:	d112      	bne.n	8007244 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800721e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007222:	2b00      	cmp	r3, #0
 8007224:	d016      	beq.n	8007254 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	3324      	adds	r3, #36	@ 0x24
 800722a:	4618      	mov	r0, r3
 800722c:	f001 f8e6 	bl	80083fc <xTaskRemoveFromEventList>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00e      	beq.n	8007254 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00b      	beq.n	8007254 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2201      	movs	r2, #1
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	e007      	b.n	8007254 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007244:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007248:	3301      	adds	r3, #1
 800724a:	b2db      	uxtb	r3, r3
 800724c:	b25a      	sxtb	r2, r3
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007254:	2301      	movs	r3, #1
 8007256:	637b      	str	r3, [r7, #52]	@ 0x34
 8007258:	e001      	b.n	800725e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800725a:	2300      	movs	r3, #0
 800725c:	637b      	str	r3, [r7, #52]	@ 0x34
 800725e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007260:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f383 8811 	msr	BASEPRI, r3
}
 8007268:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800726a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800726c:	4618      	mov	r0, r3
 800726e:	3738      	adds	r7, #56	@ 0x38
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08c      	sub	sp, #48	@ 0x30
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007280:	2300      	movs	r3, #0
 8007282:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10b      	bne.n	80072a6 <xQueueReceive+0x32>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	623b      	str	r3, [r7, #32]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <xQueueReceive+0x40>
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d101      	bne.n	80072b8 <xQueueReceive+0x44>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <xQueueReceive+0x46>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d10b      	bne.n	80072d6 <xQueueReceive+0x62>
	__asm volatile
 80072be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	61fb      	str	r3, [r7, #28]
}
 80072d0:	bf00      	nop
 80072d2:	bf00      	nop
 80072d4:	e7fd      	b.n	80072d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072d6:	f001 fa61 	bl	800879c <xTaskGetSchedulerState>
 80072da:	4603      	mov	r3, r0
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <xQueueReceive+0x72>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d101      	bne.n	80072ea <xQueueReceive+0x76>
 80072e6:	2301      	movs	r3, #1
 80072e8:	e000      	b.n	80072ec <xQueueReceive+0x78>
 80072ea:	2300      	movs	r3, #0
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <xQueueReceive+0x94>
	__asm volatile
 80072f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	61bb      	str	r3, [r7, #24]
}
 8007302:	bf00      	nop
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007308:	f7ff f9f6 	bl	80066f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800730c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01f      	beq.n	8007358 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007318:	68b9      	ldr	r1, [r7, #8]
 800731a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800731c:	f000 fac4 	bl	80078a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	1e5a      	subs	r2, r3, #1
 8007324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007326:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00f      	beq.n	8007350 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007332:	3310      	adds	r3, #16
 8007334:	4618      	mov	r0, r3
 8007336:	f001 f861 	bl	80083fc <xTaskRemoveFromEventList>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007340:	4b3c      	ldr	r3, [pc, #240]	@ (8007434 <xQueueReceive+0x1c0>)
 8007342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007346:	601a      	str	r2, [r3, #0]
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007350:	f7ff fa04 	bl	800675c <vPortExitCritical>
				return pdPASS;
 8007354:	2301      	movs	r3, #1
 8007356:	e069      	b.n	800742c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d103      	bne.n	8007366 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800735e:	f7ff f9fd 	bl	800675c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007362:	2300      	movs	r3, #0
 8007364:	e062      	b.n	800742c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d106      	bne.n	800737a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800736c:	f107 0310 	add.w	r3, r7, #16
 8007370:	4618      	mov	r0, r3
 8007372:	f001 f8a7 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007376:	2301      	movs	r3, #1
 8007378:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800737a:	f7ff f9ef 	bl	800675c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800737e:	f000 fe05 	bl	8007f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007382:	f7ff f9b9 	bl	80066f8 <vPortEnterCritical>
 8007386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007388:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800738c:	b25b      	sxtb	r3, r3
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d103      	bne.n	800739c <xQueueReceive+0x128>
 8007394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800739c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800739e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073a2:	b25b      	sxtb	r3, r3
 80073a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073a8:	d103      	bne.n	80073b2 <xQueueReceive+0x13e>
 80073aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073ac:	2200      	movs	r2, #0
 80073ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073b2:	f7ff f9d3 	bl	800675c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073b6:	1d3a      	adds	r2, r7, #4
 80073b8:	f107 0310 	add.w	r3, r7, #16
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f001 f896 	bl	80084f0 <xTaskCheckForTimeOut>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d123      	bne.n	8007412 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80073ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073cc:	f000 fae4 	bl	8007998 <prvIsQueueEmpty>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d017      	beq.n	8007406 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80073d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073d8:	3324      	adds	r3, #36	@ 0x24
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	4611      	mov	r1, r2
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 ffba 	bl	8008358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80073e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80073e6:	f000 fa85 	bl	80078f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80073ea:	f000 fddd 	bl	8007fa8 <xTaskResumeAll>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d189      	bne.n	8007308 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80073f4:	4b0f      	ldr	r3, [pc, #60]	@ (8007434 <xQueueReceive+0x1c0>)
 80073f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073fa:	601a      	str	r2, [r3, #0]
 80073fc:	f3bf 8f4f 	dsb	sy
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	e780      	b.n	8007308 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007408:	f000 fa74 	bl	80078f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800740c:	f000 fdcc 	bl	8007fa8 <xTaskResumeAll>
 8007410:	e77a      	b.n	8007308 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007414:	f000 fa6e 	bl	80078f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007418:	f000 fdc6 	bl	8007fa8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800741c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800741e:	f000 fabb 	bl	8007998 <prvIsQueueEmpty>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	f43f af6f 	beq.w	8007308 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800742a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800742c:	4618      	mov	r0, r3
 800742e:	3730      	adds	r7, #48	@ 0x30
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	e000ed04 	.word	0xe000ed04

08007438 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08e      	sub	sp, #56	@ 0x38
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007442:	2300      	movs	r3, #0
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800744a:	2300      	movs	r3, #0
 800744c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800744e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	623b      	str	r3, [r7, #32]
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800746c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00b      	beq.n	800748c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8007474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007478:	f383 8811 	msr	BASEPRI, r3
 800747c:	f3bf 8f6f 	isb	sy
 8007480:	f3bf 8f4f 	dsb	sy
 8007484:	61fb      	str	r3, [r7, #28]
}
 8007486:	bf00      	nop
 8007488:	bf00      	nop
 800748a:	e7fd      	b.n	8007488 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800748c:	f001 f986 	bl	800879c <xTaskGetSchedulerState>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d102      	bne.n	800749c <xQueueSemaphoreTake+0x64>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <xQueueSemaphoreTake+0x68>
 800749c:	2301      	movs	r3, #1
 800749e:	e000      	b.n	80074a2 <xQueueSemaphoreTake+0x6a>
 80074a0:	2300      	movs	r3, #0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10b      	bne.n	80074be <xQueueSemaphoreTake+0x86>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	61bb      	str	r3, [r7, #24]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074be:	f7ff f91b 	bl	80066f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80074c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d024      	beq.n	8007518 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	1e5a      	subs	r2, r3, #1
 80074d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d104      	bne.n	80074e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80074de:	f001 fad7 	bl	8008a90 <pvTaskIncrementMutexHeldCount>
 80074e2:	4602      	mov	r2, r0
 80074e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d00f      	beq.n	8007510 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f2:	3310      	adds	r3, #16
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 ff81 	bl	80083fc <xTaskRemoveFromEventList>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d007      	beq.n	8007510 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007500:	4b54      	ldr	r3, [pc, #336]	@ (8007654 <xQueueSemaphoreTake+0x21c>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007510:	f7ff f924 	bl	800675c <vPortExitCritical>
				return pdPASS;
 8007514:	2301      	movs	r3, #1
 8007516:	e098      	b.n	800764a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d112      	bne.n	8007544 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800751e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8007524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007528:	f383 8811 	msr	BASEPRI, r3
 800752c:	f3bf 8f6f 	isb	sy
 8007530:	f3bf 8f4f 	dsb	sy
 8007534:	617b      	str	r3, [r7, #20]
}
 8007536:	bf00      	nop
 8007538:	bf00      	nop
 800753a:	e7fd      	b.n	8007538 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800753c:	f7ff f90e 	bl	800675c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007540:	2300      	movs	r3, #0
 8007542:	e082      	b.n	800764a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800754a:	f107 030c 	add.w	r3, r7, #12
 800754e:	4618      	mov	r0, r3
 8007550:	f000 ffb8 	bl	80084c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007554:	2301      	movs	r3, #1
 8007556:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007558:	f7ff f900 	bl	800675c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755c:	f000 fd16 	bl	8007f8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007560:	f7ff f8ca 	bl	80066f8 <vPortEnterCritical>
 8007564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007566:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800756a:	b25b      	sxtb	r3, r3
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007570:	d103      	bne.n	800757a <xQueueSemaphoreTake+0x142>
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	2200      	movs	r2, #0
 8007576:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800757a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800757c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007580:	b25b      	sxtb	r3, r3
 8007582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007586:	d103      	bne.n	8007590 <xQueueSemaphoreTake+0x158>
 8007588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758a:	2200      	movs	r2, #0
 800758c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007590:	f7ff f8e4 	bl	800675c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007594:	463a      	mov	r2, r7
 8007596:	f107 030c 	add.w	r3, r7, #12
 800759a:	4611      	mov	r1, r2
 800759c:	4618      	mov	r0, r3
 800759e:	f000 ffa7 	bl	80084f0 <xTaskCheckForTimeOut>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d132      	bne.n	800760e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075aa:	f000 f9f5 	bl	8007998 <prvIsQueueEmpty>
 80075ae:	4603      	mov	r3, r0
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d026      	beq.n	8007602 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80075b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80075bc:	f7ff f89c 	bl	80066f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	4618      	mov	r0, r3
 80075c6:	f001 f907 	bl	80087d8 <xTaskPriorityInherit>
 80075ca:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80075cc:	f7ff f8c6 	bl	800675c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075d2:	3324      	adds	r3, #36	@ 0x24
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 febd 	bl	8008358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80075e0:	f000 f988 	bl	80078f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075e4:	f000 fce0 	bl	8007fa8 <xTaskResumeAll>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f47f af67 	bne.w	80074be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80075f0:	4b18      	ldr	r3, [pc, #96]	@ (8007654 <xQueueSemaphoreTake+0x21c>)
 80075f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f6:	601a      	str	r2, [r3, #0]
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	e75d      	b.n	80074be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007602:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007604:	f000 f976 	bl	80078f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007608:	f000 fcce 	bl	8007fa8 <xTaskResumeAll>
 800760c:	e757      	b.n	80074be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800760e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007610:	f000 f970 	bl	80078f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007614:	f000 fcc8 	bl	8007fa8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007618:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800761a:	f000 f9bd 	bl	8007998 <prvIsQueueEmpty>
 800761e:	4603      	mov	r3, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f43f af4c 	beq.w	80074be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00d      	beq.n	8007648 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800762c:	f7ff f864 	bl	80066f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007630:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007632:	f000 f8b7 	bl	80077a4 <prvGetDisinheritPriorityAfterTimeout>
 8007636:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800763e:	4618      	mov	r0, r3
 8007640:	f001 f9a2 	bl	8008988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007644:	f7ff f88a 	bl	800675c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007648:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800764a:	4618      	mov	r0, r3
 800764c:	3738      	adds	r7, #56	@ 0x38
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08e      	sub	sp, #56	@ 0x38
 800765c:	af00      	add	r7, sp, #0
 800765e:	60f8      	str	r0, [r7, #12]
 8007660:	60b9      	str	r1, [r7, #8]
 8007662:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	623b      	str	r3, [r7, #32]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d103      	bne.n	8007694 <xQueueReceiveFromISR+0x3c>
 800768c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <xQueueReceiveFromISR+0x40>
 8007694:	2301      	movs	r3, #1
 8007696:	e000      	b.n	800769a <xQueueReceiveFromISR+0x42>
 8007698:	2300      	movs	r3, #0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d10b      	bne.n	80076b6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800769e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076a2:	f383 8811 	msr	BASEPRI, r3
 80076a6:	f3bf 8f6f 	isb	sy
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	61fb      	str	r3, [r7, #28]
}
 80076b0:	bf00      	nop
 80076b2:	bf00      	nop
 80076b4:	e7fd      	b.n	80076b2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076b6:	f7ff f8ff 	bl	80068b8 <vPortValidateInterruptPriority>
	__asm volatile
 80076ba:	f3ef 8211 	mrs	r2, BASEPRI
 80076be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c2:	f383 8811 	msr	BASEPRI, r3
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	f3bf 8f4f 	dsb	sy
 80076ce:	61ba      	str	r2, [r7, #24]
 80076d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80076d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076da:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d02f      	beq.n	8007742 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076f0:	f000 f8da 	bl	80078a8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80076f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f6:	1e5a      	subs	r2, r3, #1
 80076f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076fa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80076fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d112      	bne.n	800772c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d016      	beq.n	800773c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800770e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007710:	3310      	adds	r3, #16
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fe72 	bl	80083fc <xTaskRemoveFromEventList>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00e      	beq.n	800773c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	601a      	str	r2, [r3, #0]
 800772a:	e007      	b.n	800773c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800772c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007730:	3301      	adds	r3, #1
 8007732:	b2db      	uxtb	r3, r3
 8007734:	b25a      	sxtb	r2, r3
 8007736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007738:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800773c:	2301      	movs	r3, #1
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007740:	e001      	b.n	8007746 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007742:	2300      	movs	r3, #0
 8007744:	637b      	str	r3, [r7, #52]	@ 0x34
 8007746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007748:	613b      	str	r3, [r7, #16]
	__asm volatile
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f383 8811 	msr	BASEPRI, r3
}
 8007750:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007754:	4618      	mov	r0, r3
 8007756:	3738      	adds	r7, #56	@ 0x38
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10b      	bne.n	8007786 <vQueueDelete+0x2a>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60bb      	str	r3, [r7, #8]
}
 8007780:	bf00      	nop
 8007782:	bf00      	nop
 8007784:	e7fd      	b.n	8007782 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f000 f95e 	bl	8007a48 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007792:	2b00      	cmp	r3, #0
 8007794:	d102      	bne.n	800779c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f7fe fcaa 	bl	80060f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800779c:	bf00      	nop
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80077a4:	b480      	push	{r7}
 80077a6:	b085      	sub	sp, #20
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d006      	beq.n	80077c2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80077be:	60fb      	str	r3, [r7, #12]
 80077c0:	e001      	b.n	80077c6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80077c6:	68fb      	ldr	r3, [r7, #12]
	}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077e8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10d      	bne.n	800780e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d14d      	bne.n	8007896 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f001 f852 	bl	80088a8 <xTaskPriorityDisinherit>
 8007804:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	609a      	str	r2, [r3, #8]
 800780c:	e043      	b.n	8007896 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d119      	bne.n	8007848 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6858      	ldr	r0, [r3, #4]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781c:	461a      	mov	r2, r3
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	f00b ff41 	bl	80136a6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685a      	ldr	r2, [r3, #4]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800782c:	441a      	add	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	d32b      	bcc.n	8007896 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]
 8007846:	e026      	b.n	8007896 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	68d8      	ldr	r0, [r3, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	461a      	mov	r2, r3
 8007852:	68b9      	ldr	r1, [r7, #8]
 8007854:	f00b ff27 	bl	80136a6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007860:	425b      	negs	r3, r3
 8007862:	441a      	add	r2, r3
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d207      	bcs.n	8007884 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	689a      	ldr	r2, [r3, #8]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787c:	425b      	negs	r3, r3
 800787e:	441a      	add	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b02      	cmp	r3, #2
 8007888:	d105      	bne.n	8007896 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	3b01      	subs	r3, #1
 8007894:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800789e:	697b      	ldr	r3, [r7, #20]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3718      	adds	r7, #24
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d018      	beq.n	80078ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	68da      	ldr	r2, [r3, #12]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c2:	441a      	add	r2, r3
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d303      	bcc.n	80078dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68d9      	ldr	r1, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078e4:	461a      	mov	r2, r3
 80078e6:	6838      	ldr	r0, [r7, #0]
 80078e8:	f00b fedd 	bl	80136a6 <memcpy>
	}
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80078fc:	f7fe fefc 	bl	80066f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007906:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007908:	e011      	b.n	800792e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790e:	2b00      	cmp	r3, #0
 8007910:	d012      	beq.n	8007938 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	3324      	adds	r3, #36	@ 0x24
 8007916:	4618      	mov	r0, r3
 8007918:	f000 fd70 	bl	80083fc <xTaskRemoveFromEventList>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007922:	f000 fe49 	bl	80085b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	3b01      	subs	r3, #1
 800792a:	b2db      	uxtb	r3, r3
 800792c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800792e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007932:	2b00      	cmp	r3, #0
 8007934:	dce9      	bgt.n	800790a <prvUnlockQueue+0x16>
 8007936:	e000      	b.n	800793a <prvUnlockQueue+0x46>
					break;
 8007938:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	22ff      	movs	r2, #255	@ 0xff
 800793e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007942:	f7fe ff0b 	bl	800675c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007946:	f7fe fed7 	bl	80066f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007950:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007952:	e011      	b.n	8007978 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d012      	beq.n	8007982 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3310      	adds	r3, #16
 8007960:	4618      	mov	r0, r3
 8007962:	f000 fd4b 	bl	80083fc <xTaskRemoveFromEventList>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d001      	beq.n	8007970 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800796c:	f000 fe24 	bl	80085b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	3b01      	subs	r3, #1
 8007974:	b2db      	uxtb	r3, r3
 8007976:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800797c:	2b00      	cmp	r3, #0
 800797e:	dce9      	bgt.n	8007954 <prvUnlockQueue+0x60>
 8007980:	e000      	b.n	8007984 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007982:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	22ff      	movs	r2, #255	@ 0xff
 8007988:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800798c:	f7fe fee6 	bl	800675c <vPortExitCritical>
}
 8007990:	bf00      	nop
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079a0:	f7fe feaa 	bl	80066f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80079ac:	2301      	movs	r3, #1
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	e001      	b.n	80079b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079b6:	f7fe fed1 	bl	800675c <vPortExitCritical>

	return xReturn;
 80079ba:	68fb      	ldr	r3, [r7, #12]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80079cc:	f7fe fe94 	bl	80066f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	429a      	cmp	r2, r3
 80079da:	d102      	bne.n	80079e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80079dc:	2301      	movs	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	e001      	b.n	80079e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80079e6:	f7fe feb9 	bl	800675c <vPortExitCritical>

	return xReturn;
 80079ea:	68fb      	ldr	r3, [r7, #12]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e014      	b.n	8007a2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007a04:	4a0f      	ldr	r2, [pc, #60]	@ (8007a44 <vQueueAddToRegistry+0x50>)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10b      	bne.n	8007a28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007a10:	490c      	ldr	r1, [pc, #48]	@ (8007a44 <vQueueAddToRegistry+0x50>)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8007a44 <vQueueAddToRegistry+0x50>)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007a26:	e006      	b.n	8007a36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	60fb      	str	r3, [r7, #12]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2b07      	cmp	r3, #7
 8007a32:	d9e7      	bls.n	8007a04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a34:	bf00      	nop
 8007a36:	bf00      	nop
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	24004c08 	.word	0x24004c08

08007a48 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
 8007a54:	e016      	b.n	8007a84 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007a56:	4a10      	ldr	r2, [pc, #64]	@ (8007a98 <vQueueUnregisterQueue+0x50>)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	4413      	add	r3, r2
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d10b      	bne.n	8007a7e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007a66:	4a0c      	ldr	r2, [pc, #48]	@ (8007a98 <vQueueUnregisterQueue+0x50>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007a70:	4a09      	ldr	r2, [pc, #36]	@ (8007a98 <vQueueUnregisterQueue+0x50>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	00db      	lsls	r3, r3, #3
 8007a76:	4413      	add	r3, r2
 8007a78:	2200      	movs	r2, #0
 8007a7a:	605a      	str	r2, [r3, #4]
				break;
 8007a7c:	e006      	b.n	8007a8c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	3301      	adds	r3, #1
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b07      	cmp	r3, #7
 8007a88:	d9e5      	bls.n	8007a56 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007a8a:	bf00      	nop
 8007a8c:	bf00      	nop
 8007a8e:	3714      	adds	r7, #20
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr
 8007a98:	24004c08 	.word	0x24004c08

08007a9c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b086      	sub	sp, #24
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007aac:	f7fe fe24 	bl	80066f8 <vPortEnterCritical>
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007ab6:	b25b      	sxtb	r3, r3
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007abc:	d103      	bne.n	8007ac6 <vQueueWaitForMessageRestricted+0x2a>
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007acc:	b25b      	sxtb	r3, r3
 8007ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ad2:	d103      	bne.n	8007adc <vQueueWaitForMessageRestricted+0x40>
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007adc:	f7fe fe3e 	bl	800675c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d106      	bne.n	8007af6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	3324      	adds	r3, #36	@ 0x24
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	68b9      	ldr	r1, [r7, #8]
 8007af0:	4618      	mov	r0, r3
 8007af2:	f000 fc57 	bl	80083a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007af6:	6978      	ldr	r0, [r7, #20]
 8007af8:	f7ff fefc 	bl	80078f4 <prvUnlockQueue>
	}
 8007afc:	bf00      	nop
 8007afe:	3718      	adds	r7, #24
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08e      	sub	sp, #56	@ 0x38
 8007b08:	af04      	add	r7, sp, #16
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007b12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10b      	bne.n	8007b30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	623b      	str	r3, [r7, #32]
}
 8007b2a:	bf00      	nop
 8007b2c:	bf00      	nop
 8007b2e:	e7fd      	b.n	8007b2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10b      	bne.n	8007b4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	61fb      	str	r3, [r7, #28]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007b4e:	235c      	movs	r3, #92	@ 0x5c
 8007b50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b5c      	cmp	r3, #92	@ 0x5c
 8007b56:	d00b      	beq.n	8007b70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	61bb      	str	r3, [r7, #24]
}
 8007b6a:	bf00      	nop
 8007b6c:	bf00      	nop
 8007b6e:	e7fd      	b.n	8007b6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007b70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d01e      	beq.n	8007bb6 <xTaskCreateStatic+0xb2>
 8007b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d01b      	beq.n	8007bb6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007b86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b8a:	2202      	movs	r2, #2
 8007b8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007b90:	2300      	movs	r3, #0
 8007b92:	9303      	str	r3, [sp, #12]
 8007b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b96:	9302      	str	r3, [sp, #8]
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	9301      	str	r3, [sp, #4]
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba0:	9300      	str	r3, [sp, #0]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68b9      	ldr	r1, [r7, #8]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f850 	bl	8007c4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007bae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007bb0:	f000 f8de 	bl	8007d70 <prvAddNewTaskToReadyList>
 8007bb4:	e001      	b.n	8007bba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007bba:	697b      	ldr	r3, [r7, #20]
	}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3728      	adds	r7, #40	@ 0x28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08c      	sub	sp, #48	@ 0x30
 8007bc8:	af04      	add	r7, sp, #16
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	603b      	str	r3, [r7, #0]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007bd4:	88fb      	ldrh	r3, [r7, #6]
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe f9bb 	bl	8005f54 <pvPortMalloc>
 8007bde:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00e      	beq.n	8007c04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007be6:	205c      	movs	r0, #92	@ 0x5c
 8007be8:	f7fe f9b4 	bl	8005f54 <pvPortMalloc>
 8007bec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d003      	beq.n	8007bfc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007bfa:	e005      	b.n	8007c08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007bfc:	6978      	ldr	r0, [r7, #20]
 8007bfe:	f7fe fa77 	bl	80060f0 <vPortFree>
 8007c02:	e001      	b.n	8007c08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007c04:	2300      	movs	r3, #0
 8007c06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007c08:	69fb      	ldr	r3, [r7, #28]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d017      	beq.n	8007c3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007c0e:	69fb      	ldr	r3, [r7, #28]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007c16:	88fa      	ldrh	r2, [r7, #6]
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9303      	str	r3, [sp, #12]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	9302      	str	r3, [sp, #8]
 8007c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c22:	9301      	str	r3, [sp, #4]
 8007c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	68b9      	ldr	r1, [r7, #8]
 8007c2c:	68f8      	ldr	r0, [r7, #12]
 8007c2e:	f000 f80e 	bl	8007c4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c32:	69f8      	ldr	r0, [r7, #28]
 8007c34:	f000 f89c 	bl	8007d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	61bb      	str	r3, [r7, #24]
 8007c3c:	e002      	b.n	8007c44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007c44:	69bb      	ldr	r3, [r7, #24]
	}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3720      	adds	r7, #32
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b088      	sub	sp, #32
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	60f8      	str	r0, [r7, #12]
 8007c56:	60b9      	str	r1, [r7, #8]
 8007c58:	607a      	str	r2, [r7, #4]
 8007c5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	461a      	mov	r2, r3
 8007c66:	21a5      	movs	r1, #165	@ 0xa5
 8007c68:	f00b fca7 	bl	80135ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007c76:	440b      	add	r3, r1
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	f023 0307 	bic.w	r3, r3, #7
 8007c84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00b      	beq.n	8007ca8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	617b      	str	r3, [r7, #20]
}
 8007ca2:	bf00      	nop
 8007ca4:	bf00      	nop
 8007ca6:	e7fd      	b.n	8007ca4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01f      	beq.n	8007cee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cae:	2300      	movs	r3, #0
 8007cb0:	61fb      	str	r3, [r7, #28]
 8007cb2:	e012      	b.n	8007cda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	4413      	add	r3, r2
 8007cba:	7819      	ldrb	r1, [r3, #0]
 8007cbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cbe:	69fb      	ldr	r3, [r7, #28]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3334      	adds	r3, #52	@ 0x34
 8007cc4:	460a      	mov	r2, r1
 8007cc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	4413      	add	r3, r2
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	61fb      	str	r3, [r7, #28]
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	2b0f      	cmp	r3, #15
 8007cde:	d9e9      	bls.n	8007cb4 <prvInitialiseNewTask+0x66>
 8007ce0:	e000      	b.n	8007ce4 <prvInitialiseNewTask+0x96>
			{
				break;
 8007ce2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cec:	e003      	b.n	8007cf6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf8:	2b37      	cmp	r3, #55	@ 0x37
 8007cfa:	d901      	bls.n	8007d00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007cfc:	2337      	movs	r3, #55	@ 0x37
 8007cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d0e:	2200      	movs	r2, #0
 8007d10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d14:	3304      	adds	r3, #4
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fb2a 	bl	8006370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d1e:	3318      	adds	r3, #24
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe fb25 	bl	8006370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d3e:	2200      	movs	r2, #0
 8007d40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007d4a:	683a      	ldr	r2, [r7, #0]
 8007d4c:	68f9      	ldr	r1, [r7, #12]
 8007d4e:	69b8      	ldr	r0, [r7, #24]
 8007d50:	f7fe fba2 	bl	8006498 <pxPortInitialiseStack>
 8007d54:	4602      	mov	r2, r0
 8007d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007d5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d66:	bf00      	nop
 8007d68:	3720      	adds	r7, #32
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007d78:	f7fe fcbe 	bl	80066f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007e34 <prvAddNewTaskToReadyList+0xc4>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	4a2c      	ldr	r2, [pc, #176]	@ (8007e34 <prvAddNewTaskToReadyList+0xc4>)
 8007d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007d86:	4b2c      	ldr	r3, [pc, #176]	@ (8007e38 <prvAddNewTaskToReadyList+0xc8>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d109      	bne.n	8007da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8007e38 <prvAddNewTaskToReadyList+0xc8>)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007d94:	4b27      	ldr	r3, [pc, #156]	@ (8007e34 <prvAddNewTaskToReadyList+0xc4>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d110      	bne.n	8007dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007d9c:	f000 fc30 	bl	8008600 <prvInitialiseTaskLists>
 8007da0:	e00d      	b.n	8007dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007da2:	4b26      	ldr	r3, [pc, #152]	@ (8007e3c <prvAddNewTaskToReadyList+0xcc>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d109      	bne.n	8007dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007daa:	4b23      	ldr	r3, [pc, #140]	@ (8007e38 <prvAddNewTaskToReadyList+0xc8>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d802      	bhi.n	8007dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007db8:	4a1f      	ldr	r2, [pc, #124]	@ (8007e38 <prvAddNewTaskToReadyList+0xc8>)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007dbe:	4b20      	ldr	r3, [pc, #128]	@ (8007e40 <prvAddNewTaskToReadyList+0xd0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8007e40 <prvAddNewTaskToReadyList+0xd0>)
 8007dc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8007e40 <prvAddNewTaskToReadyList+0xd0>)
 8007dca:	681a      	ldr	r2, [r3, #0]
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e44 <prvAddNewTaskToReadyList+0xd4>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d903      	bls.n	8007de4 <prvAddNewTaskToReadyList+0x74>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007de0:	4a18      	ldr	r2, [pc, #96]	@ (8007e44 <prvAddNewTaskToReadyList+0xd4>)
 8007de2:	6013      	str	r3, [r2, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de8:	4613      	mov	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	4413      	add	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4a15      	ldr	r2, [pc, #84]	@ (8007e48 <prvAddNewTaskToReadyList+0xd8>)
 8007df2:	441a      	add	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	3304      	adds	r3, #4
 8007df8:	4619      	mov	r1, r3
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f7fe fac5 	bl	800638a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007e00:	f7fe fcac 	bl	800675c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007e04:	4b0d      	ldr	r3, [pc, #52]	@ (8007e3c <prvAddNewTaskToReadyList+0xcc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00e      	beq.n	8007e2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e38 <prvAddNewTaskToReadyList+0xc8>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d207      	bcs.n	8007e2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8007e4c <prvAddNewTaskToReadyList+0xdc>)
 8007e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e20:	601a      	str	r2, [r3, #0]
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e2a:	bf00      	nop
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	2400511c 	.word	0x2400511c
 8007e38:	24004c48 	.word	0x24004c48
 8007e3c:	24005128 	.word	0x24005128
 8007e40:	24005138 	.word	0x24005138
 8007e44:	24005124 	.word	0x24005124
 8007e48:	24004c4c 	.word	0x24004c4c
 8007e4c:	e000ed04 	.word	0xe000ed04

08007e50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d018      	beq.n	8007e94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e62:	4b14      	ldr	r3, [pc, #80]	@ (8007eb4 <vTaskDelay+0x64>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <vTaskDelay+0x32>
	__asm volatile
 8007e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6e:	f383 8811 	msr	BASEPRI, r3
 8007e72:	f3bf 8f6f 	isb	sy
 8007e76:	f3bf 8f4f 	dsb	sy
 8007e7a:	60bb      	str	r3, [r7, #8]
}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	e7fd      	b.n	8007e7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e82:	f000 f883 	bl	8007f8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e86:	2100      	movs	r1, #0
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fe15 	bl	8008ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e8e:	f000 f88b 	bl	8007fa8 <xTaskResumeAll>
 8007e92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d107      	bne.n	8007eaa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007e9a:	4b07      	ldr	r3, [pc, #28]	@ (8007eb8 <vTaskDelay+0x68>)
 8007e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea0:	601a      	str	r2, [r3, #0]
 8007ea2:	f3bf 8f4f 	dsb	sy
 8007ea6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007eaa:	bf00      	nop
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	24005144 	.word	0x24005144
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08a      	sub	sp, #40	@ 0x28
 8007ec0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007eca:	463a      	mov	r2, r7
 8007ecc:	1d39      	adds	r1, r7, #4
 8007ece:	f107 0308 	add.w	r3, r7, #8
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe f80a 	bl	8005eec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007ed8:	6839      	ldr	r1, [r7, #0]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	9202      	str	r2, [sp, #8]
 8007ee0:	9301      	str	r3, [sp, #4]
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	460a      	mov	r2, r1
 8007eea:	4922      	ldr	r1, [pc, #136]	@ (8007f74 <vTaskStartScheduler+0xb8>)
 8007eec:	4822      	ldr	r0, [pc, #136]	@ (8007f78 <vTaskStartScheduler+0xbc>)
 8007eee:	f7ff fe09 	bl	8007b04 <xTaskCreateStatic>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4a21      	ldr	r2, [pc, #132]	@ (8007f7c <vTaskStartScheduler+0xc0>)
 8007ef6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ef8:	4b20      	ldr	r3, [pc, #128]	@ (8007f7c <vTaskStartScheduler+0xc0>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007f00:	2301      	movs	r3, #1
 8007f02:	617b      	str	r3, [r7, #20]
 8007f04:	e001      	b.n	8007f0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007f06:	2300      	movs	r3, #0
 8007f08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	d102      	bne.n	8007f16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007f10:	f000 fe26 	bl	8008b60 <xTimerCreateTimerTask>
 8007f14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d116      	bne.n	8007f4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	613b      	str	r3, [r7, #16]
}
 8007f2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f30:	4b13      	ldr	r3, [pc, #76]	@ (8007f80 <vTaskStartScheduler+0xc4>)
 8007f32:	f04f 32ff 	mov.w	r2, #4294967295
 8007f36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f38:	4b12      	ldr	r3, [pc, #72]	@ (8007f84 <vTaskStartScheduler+0xc8>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f3e:	4b12      	ldr	r3, [pc, #72]	@ (8007f88 <vTaskStartScheduler+0xcc>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f44:	f7fe fb34 	bl	80065b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f48:	e00f      	b.n	8007f6a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d10b      	bne.n	8007f6a <vTaskStartScheduler+0xae>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	60fb      	str	r3, [r7, #12]
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop
 8007f68:	e7fd      	b.n	8007f66 <vTaskStartScheduler+0xaa>
}
 8007f6a:	bf00      	nop
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	0801438c 	.word	0x0801438c
 8007f78:	080085d1 	.word	0x080085d1
 8007f7c:	24005140 	.word	0x24005140
 8007f80:	2400513c 	.word	0x2400513c
 8007f84:	24005128 	.word	0x24005128
 8007f88:	24005120 	.word	0x24005120

08007f8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f90:	4b04      	ldr	r3, [pc, #16]	@ (8007fa4 <vTaskSuspendAll+0x18>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	4a03      	ldr	r2, [pc, #12]	@ (8007fa4 <vTaskSuspendAll+0x18>)
 8007f98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f9a:	bf00      	nop
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	24005144 	.word	0x24005144

08007fa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b084      	sub	sp, #16
 8007fac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007fb6:	4b42      	ldr	r3, [pc, #264]	@ (80080c0 <xTaskResumeAll+0x118>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10b      	bne.n	8007fd6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	603b      	str	r3, [r7, #0]
}
 8007fd0:	bf00      	nop
 8007fd2:	bf00      	nop
 8007fd4:	e7fd      	b.n	8007fd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fd6:	f7fe fb8f 	bl	80066f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fda:	4b39      	ldr	r3, [pc, #228]	@ (80080c0 <xTaskResumeAll+0x118>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4a37      	ldr	r2, [pc, #220]	@ (80080c0 <xTaskResumeAll+0x118>)
 8007fe2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fe4:	4b36      	ldr	r3, [pc, #216]	@ (80080c0 <xTaskResumeAll+0x118>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d162      	bne.n	80080b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fec:	4b35      	ldr	r3, [pc, #212]	@ (80080c4 <xTaskResumeAll+0x11c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d05e      	beq.n	80080b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ff4:	e02f      	b.n	8008056 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ff6:	4b34      	ldr	r3, [pc, #208]	@ (80080c8 <xTaskResumeAll+0x120>)
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	3318      	adds	r3, #24
 8008002:	4618      	mov	r0, r3
 8008004:	f7fe fa1e 	bl	8006444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3304      	adds	r3, #4
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe fa19 	bl	8006444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008016:	4b2d      	ldr	r3, [pc, #180]	@ (80080cc <xTaskResumeAll+0x124>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	429a      	cmp	r2, r3
 800801c:	d903      	bls.n	8008026 <xTaskResumeAll+0x7e>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008022:	4a2a      	ldr	r2, [pc, #168]	@ (80080cc <xTaskResumeAll+0x124>)
 8008024:	6013      	str	r3, [r2, #0]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802a:	4613      	mov	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4a27      	ldr	r2, [pc, #156]	@ (80080d0 <xTaskResumeAll+0x128>)
 8008034:	441a      	add	r2, r3
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	3304      	adds	r3, #4
 800803a:	4619      	mov	r1, r3
 800803c:	4610      	mov	r0, r2
 800803e:	f7fe f9a4 	bl	800638a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008046:	4b23      	ldr	r3, [pc, #140]	@ (80080d4 <xTaskResumeAll+0x12c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800804c:	429a      	cmp	r2, r3
 800804e:	d302      	bcc.n	8008056 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008050:	4b21      	ldr	r3, [pc, #132]	@ (80080d8 <xTaskResumeAll+0x130>)
 8008052:	2201      	movs	r2, #1
 8008054:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008056:	4b1c      	ldr	r3, [pc, #112]	@ (80080c8 <xTaskResumeAll+0x120>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1cb      	bne.n	8007ff6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008064:	f000 fb6a 	bl	800873c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008068:	4b1c      	ldr	r3, [pc, #112]	@ (80080dc <xTaskResumeAll+0x134>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d010      	beq.n	8008096 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008074:	f000 f858 	bl	8008128 <xTaskIncrementTick>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800807e:	4b16      	ldr	r3, [pc, #88]	@ (80080d8 <xTaskResumeAll+0x130>)
 8008080:	2201      	movs	r2, #1
 8008082:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	3b01      	subs	r3, #1
 8008088:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f1      	bne.n	8008074 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008090:	4b12      	ldr	r3, [pc, #72]	@ (80080dc <xTaskResumeAll+0x134>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008096:	4b10      	ldr	r3, [pc, #64]	@ (80080d8 <xTaskResumeAll+0x130>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800809e:	2301      	movs	r3, #1
 80080a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80080a2:	4b0f      	ldr	r3, [pc, #60]	@ (80080e0 <xTaskResumeAll+0x138>)
 80080a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	f3bf 8f4f 	dsb	sy
 80080ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080b2:	f7fe fb53 	bl	800675c <vPortExitCritical>

	return xAlreadyYielded;
 80080b6:	68bb      	ldr	r3, [r7, #8]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	24005144 	.word	0x24005144
 80080c4:	2400511c 	.word	0x2400511c
 80080c8:	240050dc 	.word	0x240050dc
 80080cc:	24005124 	.word	0x24005124
 80080d0:	24004c4c 	.word	0x24004c4c
 80080d4:	24004c48 	.word	0x24004c48
 80080d8:	24005130 	.word	0x24005130
 80080dc:	2400512c 	.word	0x2400512c
 80080e0:	e000ed04 	.word	0xe000ed04

080080e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080ea:	4b05      	ldr	r3, [pc, #20]	@ (8008100 <xTaskGetTickCount+0x1c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080f0:	687b      	ldr	r3, [r7, #4]
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	370c      	adds	r7, #12
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr
 80080fe:	bf00      	nop
 8008100:	24005120 	.word	0x24005120

08008104 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800810a:	f7fe fbd5 	bl	80068b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800810e:	2300      	movs	r3, #0
 8008110:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008112:	4b04      	ldr	r3, [pc, #16]	@ (8008124 <xTaskGetTickCountFromISR+0x20>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008118:	683b      	ldr	r3, [r7, #0]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
 8008122:	bf00      	nop
 8008124:	24005120 	.word	0x24005120

08008128 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008132:	4b4f      	ldr	r3, [pc, #316]	@ (8008270 <xTaskIncrementTick+0x148>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	f040 8090 	bne.w	800825c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800813c:	4b4d      	ldr	r3, [pc, #308]	@ (8008274 <xTaskIncrementTick+0x14c>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3301      	adds	r3, #1
 8008142:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008144:	4a4b      	ldr	r2, [pc, #300]	@ (8008274 <xTaskIncrementTick+0x14c>)
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d121      	bne.n	8008194 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008150:	4b49      	ldr	r3, [pc, #292]	@ (8008278 <xTaskIncrementTick+0x150>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <xTaskIncrementTick+0x4a>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	603b      	str	r3, [r7, #0]
}
 800816c:	bf00      	nop
 800816e:	bf00      	nop
 8008170:	e7fd      	b.n	800816e <xTaskIncrementTick+0x46>
 8008172:	4b41      	ldr	r3, [pc, #260]	@ (8008278 <xTaskIncrementTick+0x150>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	4b40      	ldr	r3, [pc, #256]	@ (800827c <xTaskIncrementTick+0x154>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a3e      	ldr	r2, [pc, #248]	@ (8008278 <xTaskIncrementTick+0x150>)
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	4a3e      	ldr	r2, [pc, #248]	@ (800827c <xTaskIncrementTick+0x154>)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	4b3e      	ldr	r3, [pc, #248]	@ (8008280 <xTaskIncrementTick+0x158>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	3301      	adds	r3, #1
 800818c:	4a3c      	ldr	r2, [pc, #240]	@ (8008280 <xTaskIncrementTick+0x158>)
 800818e:	6013      	str	r3, [r2, #0]
 8008190:	f000 fad4 	bl	800873c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008194:	4b3b      	ldr	r3, [pc, #236]	@ (8008284 <xTaskIncrementTick+0x15c>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	429a      	cmp	r2, r3
 800819c:	d349      	bcc.n	8008232 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800819e:	4b36      	ldr	r3, [pc, #216]	@ (8008278 <xTaskIncrementTick+0x150>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d104      	bne.n	80081b2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a8:	4b36      	ldr	r3, [pc, #216]	@ (8008284 <xTaskIncrementTick+0x15c>)
 80081aa:	f04f 32ff 	mov.w	r2, #4294967295
 80081ae:	601a      	str	r2, [r3, #0]
					break;
 80081b0:	e03f      	b.n	8008232 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b2:	4b31      	ldr	r3, [pc, #196]	@ (8008278 <xTaskIncrementTick+0x150>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d203      	bcs.n	80081d2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80081ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008284 <xTaskIncrementTick+0x15c>)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80081d0:	e02f      	b.n	8008232 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	3304      	adds	r3, #4
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe f934 	bl	8006444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d004      	beq.n	80081ee <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	3318      	adds	r3, #24
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fe f92b 	bl	8006444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f2:	4b25      	ldr	r3, [pc, #148]	@ (8008288 <xTaskIncrementTick+0x160>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	429a      	cmp	r2, r3
 80081f8:	d903      	bls.n	8008202 <xTaskIncrementTick+0xda>
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	4a22      	ldr	r2, [pc, #136]	@ (8008288 <xTaskIncrementTick+0x160>)
 8008200:	6013      	str	r3, [r2, #0]
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008206:	4613      	mov	r3, r2
 8008208:	009b      	lsls	r3, r3, #2
 800820a:	4413      	add	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4a1f      	ldr	r2, [pc, #124]	@ (800828c <xTaskIncrementTick+0x164>)
 8008210:	441a      	add	r2, r3
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	3304      	adds	r3, #4
 8008216:	4619      	mov	r1, r3
 8008218:	4610      	mov	r0, r2
 800821a:	f7fe f8b6 	bl	800638a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008222:	4b1b      	ldr	r3, [pc, #108]	@ (8008290 <xTaskIncrementTick+0x168>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008228:	429a      	cmp	r2, r3
 800822a:	d3b8      	bcc.n	800819e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008230:	e7b5      	b.n	800819e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008232:	4b17      	ldr	r3, [pc, #92]	@ (8008290 <xTaskIncrementTick+0x168>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008238:	4914      	ldr	r1, [pc, #80]	@ (800828c <xTaskIncrementTick+0x164>)
 800823a:	4613      	mov	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	440b      	add	r3, r1
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d901      	bls.n	800824e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800824a:	2301      	movs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800824e:	4b11      	ldr	r3, [pc, #68]	@ (8008294 <xTaskIncrementTick+0x16c>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d007      	beq.n	8008266 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008256:	2301      	movs	r3, #1
 8008258:	617b      	str	r3, [r7, #20]
 800825a:	e004      	b.n	8008266 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800825c:	4b0e      	ldr	r3, [pc, #56]	@ (8008298 <xTaskIncrementTick+0x170>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	3301      	adds	r3, #1
 8008262:	4a0d      	ldr	r2, [pc, #52]	@ (8008298 <xTaskIncrementTick+0x170>)
 8008264:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008266:	697b      	ldr	r3, [r7, #20]
}
 8008268:	4618      	mov	r0, r3
 800826a:	3718      	adds	r7, #24
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	24005144 	.word	0x24005144
 8008274:	24005120 	.word	0x24005120
 8008278:	240050d4 	.word	0x240050d4
 800827c:	240050d8 	.word	0x240050d8
 8008280:	24005134 	.word	0x24005134
 8008284:	2400513c 	.word	0x2400513c
 8008288:	24005124 	.word	0x24005124
 800828c:	24004c4c 	.word	0x24004c4c
 8008290:	24004c48 	.word	0x24004c48
 8008294:	24005130 	.word	0x24005130
 8008298:	2400512c 	.word	0x2400512c

0800829c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80082a2:	4b28      	ldr	r3, [pc, #160]	@ (8008344 <vTaskSwitchContext+0xa8>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80082aa:	4b27      	ldr	r3, [pc, #156]	@ (8008348 <vTaskSwitchContext+0xac>)
 80082ac:	2201      	movs	r2, #1
 80082ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80082b0:	e042      	b.n	8008338 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80082b2:	4b25      	ldr	r3, [pc, #148]	@ (8008348 <vTaskSwitchContext+0xac>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b8:	4b24      	ldr	r3, [pc, #144]	@ (800834c <vTaskSwitchContext+0xb0>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	e011      	b.n	80082e4 <vTaskSwitchContext+0x48>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10b      	bne.n	80082de <vTaskSwitchContext+0x42>
	__asm volatile
 80082c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ca:	f383 8811 	msr	BASEPRI, r3
 80082ce:	f3bf 8f6f 	isb	sy
 80082d2:	f3bf 8f4f 	dsb	sy
 80082d6:	607b      	str	r3, [r7, #4]
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	e7fd      	b.n	80082da <vTaskSwitchContext+0x3e>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3b01      	subs	r3, #1
 80082e2:	60fb      	str	r3, [r7, #12]
 80082e4:	491a      	ldr	r1, [pc, #104]	@ (8008350 <vTaskSwitchContext+0xb4>)
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	4613      	mov	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4413      	add	r3, r2
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	440b      	add	r3, r1
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d0e3      	beq.n	80082c0 <vTaskSwitchContext+0x24>
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4613      	mov	r3, r2
 80082fc:	009b      	lsls	r3, r3, #2
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	4a13      	ldr	r2, [pc, #76]	@ (8008350 <vTaskSwitchContext+0xb4>)
 8008304:	4413      	add	r3, r2
 8008306:	60bb      	str	r3, [r7, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	605a      	str	r2, [r3, #4]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	685a      	ldr	r2, [r3, #4]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	3308      	adds	r3, #8
 800831a:	429a      	cmp	r2, r3
 800831c:	d104      	bne.n	8008328 <vTaskSwitchContext+0x8c>
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	605a      	str	r2, [r3, #4]
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	4a09      	ldr	r2, [pc, #36]	@ (8008354 <vTaskSwitchContext+0xb8>)
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	4a06      	ldr	r2, [pc, #24]	@ (800834c <vTaskSwitchContext+0xb0>)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6013      	str	r3, [r2, #0]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	24005144 	.word	0x24005144
 8008348:	24005130 	.word	0x24005130
 800834c:	24005124 	.word	0x24005124
 8008350:	24004c4c 	.word	0x24004c4c
 8008354:	24004c48 	.word	0x24004c48

08008358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
}
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <vTaskPlaceOnEventList+0x48>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3318      	adds	r3, #24
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fe f822 	bl	80063d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800838e:	2101      	movs	r1, #1
 8008390:	6838      	ldr	r0, [r7, #0]
 8008392:	f000 fb91 	bl	8008ab8 <prvAddCurrentTaskToDelayedList>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	24004c48 	.word	0x24004c48

080083a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80083b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ba:	f383 8811 	msr	BASEPRI, r3
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f3bf 8f4f 	dsb	sy
 80083c6:	617b      	str	r3, [r7, #20]
}
 80083c8:	bf00      	nop
 80083ca:	bf00      	nop
 80083cc:	e7fd      	b.n	80083ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80083ce:	4b0a      	ldr	r3, [pc, #40]	@ (80083f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	3318      	adds	r3, #24
 80083d4:	4619      	mov	r1, r3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7fd ffd7 	bl	800638a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295
 80083e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80083e8:	6879      	ldr	r1, [r7, #4]
 80083ea:	68b8      	ldr	r0, [r7, #8]
 80083ec:	f000 fb64 	bl	8008ab8 <prvAddCurrentTaskToDelayedList>
	}
 80083f0:	bf00      	nop
 80083f2:	3718      	adds	r7, #24
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	24004c48 	.word	0x24004c48

080083fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	68db      	ldr	r3, [r3, #12]
 800840a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10b      	bne.n	800842a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	60fb      	str	r3, [r7, #12]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	3318      	adds	r3, #24
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe f808 	bl	8006444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008434:	4b1d      	ldr	r3, [pc, #116]	@ (80084ac <xTaskRemoveFromEventList+0xb0>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d11d      	bne.n	8008478 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	3304      	adds	r3, #4
 8008440:	4618      	mov	r0, r3
 8008442:	f7fd ffff 	bl	8006444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844a:	4b19      	ldr	r3, [pc, #100]	@ (80084b0 <xTaskRemoveFromEventList+0xb4>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d903      	bls.n	800845a <xTaskRemoveFromEventList+0x5e>
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	4a16      	ldr	r2, [pc, #88]	@ (80084b0 <xTaskRemoveFromEventList+0xb4>)
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a13      	ldr	r2, [pc, #76]	@ (80084b4 <xTaskRemoveFromEventList+0xb8>)
 8008468:	441a      	add	r2, r3
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fd ff8a 	bl	800638a <vListInsertEnd>
 8008476:	e005      	b.n	8008484 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3318      	adds	r3, #24
 800847c:	4619      	mov	r1, r3
 800847e:	480e      	ldr	r0, [pc, #56]	@ (80084b8 <xTaskRemoveFromEventList+0xbc>)
 8008480:	f7fd ff83 	bl	800638a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008488:	4b0c      	ldr	r3, [pc, #48]	@ (80084bc <xTaskRemoveFromEventList+0xc0>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800848e:	429a      	cmp	r2, r3
 8008490:	d905      	bls.n	800849e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008492:	2301      	movs	r3, #1
 8008494:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008496:	4b0a      	ldr	r3, [pc, #40]	@ (80084c0 <xTaskRemoveFromEventList+0xc4>)
 8008498:	2201      	movs	r2, #1
 800849a:	601a      	str	r2, [r3, #0]
 800849c:	e001      	b.n	80084a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80084a2:	697b      	ldr	r3, [r7, #20]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3718      	adds	r7, #24
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}
 80084ac:	24005144 	.word	0x24005144
 80084b0:	24005124 	.word	0x24005124
 80084b4:	24004c4c 	.word	0x24004c4c
 80084b8:	240050dc 	.word	0x240050dc
 80084bc:	24004c48 	.word	0x24004c48
 80084c0:	24005130 	.word	0x24005130

080084c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80084cc:	4b06      	ldr	r3, [pc, #24]	@ (80084e8 <vTaskInternalSetTimeOutState+0x24>)
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80084d4:	4b05      	ldr	r3, [pc, #20]	@ (80084ec <vTaskInternalSetTimeOutState+0x28>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	605a      	str	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	24005134 	.word	0x24005134
 80084ec:	24005120 	.word	0x24005120

080084f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	613b      	str	r3, [r7, #16]
}
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	e7fd      	b.n	8008514 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10b      	bne.n	8008536 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	60fb      	str	r3, [r7, #12]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008536:	f7fe f8df 	bl	80066f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800853a:	4b1d      	ldr	r3, [pc, #116]	@ (80085b0 <xTaskCheckForTimeOut+0xc0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	1ad3      	subs	r3, r2, r3
 8008548:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008552:	d102      	bne.n	800855a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008554:	2300      	movs	r3, #0
 8008556:	61fb      	str	r3, [r7, #28]
 8008558:	e023      	b.n	80085a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	4b15      	ldr	r3, [pc, #84]	@ (80085b4 <xTaskCheckForTimeOut+0xc4>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d007      	beq.n	8008576 <xTaskCheckForTimeOut+0x86>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	69ba      	ldr	r2, [r7, #24]
 800856c:	429a      	cmp	r2, r3
 800856e:	d302      	bcc.n	8008576 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008570:	2301      	movs	r3, #1
 8008572:	61fb      	str	r3, [r7, #28]
 8008574:	e015      	b.n	80085a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	697a      	ldr	r2, [r7, #20]
 800857c:	429a      	cmp	r2, r3
 800857e:	d20b      	bcs.n	8008598 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	1ad2      	subs	r2, r2, r3
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f7ff ff99 	bl	80084c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008592:	2300      	movs	r3, #0
 8008594:	61fb      	str	r3, [r7, #28]
 8008596:	e004      	b.n	80085a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800859e:	2301      	movs	r3, #1
 80085a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80085a2:	f7fe f8db 	bl	800675c <vPortExitCritical>

	return xReturn;
 80085a6:	69fb      	ldr	r3, [r7, #28]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	24005120 	.word	0x24005120
 80085b4:	24005134 	.word	0x24005134

080085b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80085b8:	b480      	push	{r7}
 80085ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80085bc:	4b03      	ldr	r3, [pc, #12]	@ (80085cc <vTaskMissedYield+0x14>)
 80085be:	2201      	movs	r2, #1
 80085c0:	601a      	str	r2, [r3, #0]
}
 80085c2:	bf00      	nop
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	24005130 	.word	0x24005130

080085d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085d8:	f000 f852 	bl	8008680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085dc:	4b06      	ldr	r3, [pc, #24]	@ (80085f8 <prvIdleTask+0x28>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d9f9      	bls.n	80085d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80085e4:	4b05      	ldr	r3, [pc, #20]	@ (80085fc <prvIdleTask+0x2c>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085f4:	e7f0      	b.n	80085d8 <prvIdleTask+0x8>
 80085f6:	bf00      	nop
 80085f8:	24004c4c 	.word	0x24004c4c
 80085fc:	e000ed04 	.word	0xe000ed04

08008600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008606:	2300      	movs	r3, #0
 8008608:	607b      	str	r3, [r7, #4]
 800860a:	e00c      	b.n	8008626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4a12      	ldr	r2, [pc, #72]	@ (8008660 <prvInitialiseTaskLists+0x60>)
 8008618:	4413      	add	r3, r2
 800861a:	4618      	mov	r0, r3
 800861c:	f7fd fe88 	bl	8006330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3301      	adds	r3, #1
 8008624:	607b      	str	r3, [r7, #4]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b37      	cmp	r3, #55	@ 0x37
 800862a:	d9ef      	bls.n	800860c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800862c:	480d      	ldr	r0, [pc, #52]	@ (8008664 <prvInitialiseTaskLists+0x64>)
 800862e:	f7fd fe7f 	bl	8006330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008632:	480d      	ldr	r0, [pc, #52]	@ (8008668 <prvInitialiseTaskLists+0x68>)
 8008634:	f7fd fe7c 	bl	8006330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008638:	480c      	ldr	r0, [pc, #48]	@ (800866c <prvInitialiseTaskLists+0x6c>)
 800863a:	f7fd fe79 	bl	8006330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800863e:	480c      	ldr	r0, [pc, #48]	@ (8008670 <prvInitialiseTaskLists+0x70>)
 8008640:	f7fd fe76 	bl	8006330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008644:	480b      	ldr	r0, [pc, #44]	@ (8008674 <prvInitialiseTaskLists+0x74>)
 8008646:	f7fd fe73 	bl	8006330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800864a:	4b0b      	ldr	r3, [pc, #44]	@ (8008678 <prvInitialiseTaskLists+0x78>)
 800864c:	4a05      	ldr	r2, [pc, #20]	@ (8008664 <prvInitialiseTaskLists+0x64>)
 800864e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008650:	4b0a      	ldr	r3, [pc, #40]	@ (800867c <prvInitialiseTaskLists+0x7c>)
 8008652:	4a05      	ldr	r2, [pc, #20]	@ (8008668 <prvInitialiseTaskLists+0x68>)
 8008654:	601a      	str	r2, [r3, #0]
}
 8008656:	bf00      	nop
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	24004c4c 	.word	0x24004c4c
 8008664:	240050ac 	.word	0x240050ac
 8008668:	240050c0 	.word	0x240050c0
 800866c:	240050dc 	.word	0x240050dc
 8008670:	240050f0 	.word	0x240050f0
 8008674:	24005108 	.word	0x24005108
 8008678:	240050d4 	.word	0x240050d4
 800867c:	240050d8 	.word	0x240050d8

08008680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008686:	e019      	b.n	80086bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008688:	f7fe f836 	bl	80066f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868c:	4b10      	ldr	r3, [pc, #64]	@ (80086d0 <prvCheckTasksWaitingTermination+0x50>)
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	3304      	adds	r3, #4
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fed3 	bl	8006444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800869e:	4b0d      	ldr	r3, [pc, #52]	@ (80086d4 <prvCheckTasksWaitingTermination+0x54>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	4a0b      	ldr	r2, [pc, #44]	@ (80086d4 <prvCheckTasksWaitingTermination+0x54>)
 80086a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086a8:	4b0b      	ldr	r3, [pc, #44]	@ (80086d8 <prvCheckTasksWaitingTermination+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	4a0a      	ldr	r2, [pc, #40]	@ (80086d8 <prvCheckTasksWaitingTermination+0x58>)
 80086b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80086b2:	f7fe f853 	bl	800675c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f810 	bl	80086dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086bc:	4b06      	ldr	r3, [pc, #24]	@ (80086d8 <prvCheckTasksWaitingTermination+0x58>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e1      	bne.n	8008688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086c4:	bf00      	nop
 80086c6:	bf00      	nop
 80086c8:	3708      	adds	r7, #8
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	240050f0 	.word	0x240050f0
 80086d4:	2400511c 	.word	0x2400511c
 80086d8:	24005104 	.word	0x24005104

080086dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d108      	bne.n	8008700 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fd fcfc 	bl	80060f0 <vPortFree>
				vPortFree( pxTCB );
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7fd fcf9 	bl	80060f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086fe:	e019      	b.n	8008734 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008706:	2b01      	cmp	r3, #1
 8008708:	d103      	bne.n	8008712 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7fd fcf0 	bl	80060f0 <vPortFree>
	}
 8008710:	e010      	b.n	8008734 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008718:	2b02      	cmp	r3, #2
 800871a:	d00b      	beq.n	8008734 <prvDeleteTCB+0x58>
	__asm volatile
 800871c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008720:	f383 8811 	msr	BASEPRI, r3
 8008724:	f3bf 8f6f 	isb	sy
 8008728:	f3bf 8f4f 	dsb	sy
 800872c:	60fb      	str	r3, [r7, #12]
}
 800872e:	bf00      	nop
 8008730:	bf00      	nop
 8008732:	e7fd      	b.n	8008730 <prvDeleteTCB+0x54>
	}
 8008734:	bf00      	nop
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008742:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <prvResetNextTaskUnblockTime+0x38>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800874c:	4b0a      	ldr	r3, [pc, #40]	@ (8008778 <prvResetNextTaskUnblockTime+0x3c>)
 800874e:	f04f 32ff 	mov.w	r2, #4294967295
 8008752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008754:	e008      	b.n	8008768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008756:	4b07      	ldr	r3, [pc, #28]	@ (8008774 <prvResetNextTaskUnblockTime+0x38>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	4a04      	ldr	r2, [pc, #16]	@ (8008778 <prvResetNextTaskUnblockTime+0x3c>)
 8008766:	6013      	str	r3, [r2, #0]
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	240050d4 	.word	0x240050d4
 8008778:	2400513c 	.word	0x2400513c

0800877c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008782:	4b05      	ldr	r3, [pc, #20]	@ (8008798 <xTaskGetCurrentTaskHandle+0x1c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008788:	687b      	ldr	r3, [r7, #4]
	}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	24004c48 	.word	0x24004c48

0800879c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80087a2:	4b0b      	ldr	r3, [pc, #44]	@ (80087d0 <xTaskGetSchedulerState+0x34>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d102      	bne.n	80087b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80087aa:	2301      	movs	r3, #1
 80087ac:	607b      	str	r3, [r7, #4]
 80087ae:	e008      	b.n	80087c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087b0:	4b08      	ldr	r3, [pc, #32]	@ (80087d4 <xTaskGetSchedulerState+0x38>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d102      	bne.n	80087be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80087b8:	2302      	movs	r3, #2
 80087ba:	607b      	str	r3, [r7, #4]
 80087bc:	e001      	b.n	80087c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80087c2:	687b      	ldr	r3, [r7, #4]
	}
 80087c4:	4618      	mov	r0, r3
 80087c6:	370c      	adds	r7, #12
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	24005128 	.word	0x24005128
 80087d4:	24005144 	.word	0x24005144

080087d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d051      	beq.n	8008892 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	4b2a      	ldr	r3, [pc, #168]	@ (800889c <xTaskPriorityInherit+0xc4>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d241      	bcs.n	8008880 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	2b00      	cmp	r3, #0
 8008802:	db06      	blt.n	8008812 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008804:	4b25      	ldr	r3, [pc, #148]	@ (800889c <xTaskPriorityInherit+0xc4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800880a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6959      	ldr	r1, [r3, #20]
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4a1f      	ldr	r2, [pc, #124]	@ (80088a0 <xTaskPriorityInherit+0xc8>)
 8008824:	4413      	add	r3, r2
 8008826:	4299      	cmp	r1, r3
 8008828:	d122      	bne.n	8008870 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	3304      	adds	r3, #4
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd fe08 	bl	8006444 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008834:	4b19      	ldr	r3, [pc, #100]	@ (800889c <xTaskPriorityInherit+0xc4>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008842:	4b18      	ldr	r3, [pc, #96]	@ (80088a4 <xTaskPriorityInherit+0xcc>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d903      	bls.n	8008852 <xTaskPriorityInherit+0x7a>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800884e:	4a15      	ldr	r2, [pc, #84]	@ (80088a4 <xTaskPriorityInherit+0xcc>)
 8008850:	6013      	str	r3, [r2, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008856:	4613      	mov	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4413      	add	r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4a10      	ldr	r2, [pc, #64]	@ (80088a0 <xTaskPriorityInherit+0xc8>)
 8008860:	441a      	add	r2, r3
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	3304      	adds	r3, #4
 8008866:	4619      	mov	r1, r3
 8008868:	4610      	mov	r0, r2
 800886a:	f7fd fd8e 	bl	800638a <vListInsertEnd>
 800886e:	e004      	b.n	800887a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008870:	4b0a      	ldr	r3, [pc, #40]	@ (800889c <xTaskPriorityInherit+0xc4>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800887a:	2301      	movs	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
 800887e:	e008      	b.n	8008892 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008884:	4b05      	ldr	r3, [pc, #20]	@ (800889c <xTaskPriorityInherit+0xc4>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800888a:	429a      	cmp	r2, r3
 800888c:	d201      	bcs.n	8008892 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800888e:	2301      	movs	r3, #1
 8008890:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008892:	68fb      	ldr	r3, [r7, #12]
	}
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	24004c48 	.word	0x24004c48
 80088a0:	24004c4c 	.word	0x24004c4c
 80088a4:	24005124 	.word	0x24005124

080088a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80088b4:	2300      	movs	r3, #0
 80088b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d058      	beq.n	8008970 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80088be:	4b2f      	ldr	r3, [pc, #188]	@ (800897c <xTaskPriorityDisinherit+0xd4>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d00b      	beq.n	80088e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80088c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088cc:	f383 8811 	msr	BASEPRI, r3
 80088d0:	f3bf 8f6f 	isb	sy
 80088d4:	f3bf 8f4f 	dsb	sy
 80088d8:	60fb      	str	r3, [r7, #12]
}
 80088da:	bf00      	nop
 80088dc:	bf00      	nop
 80088de:	e7fd      	b.n	80088dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10b      	bne.n	8008900 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ec:	f383 8811 	msr	BASEPRI, r3
 80088f0:	f3bf 8f6f 	isb	sy
 80088f4:	f3bf 8f4f 	dsb	sy
 80088f8:	60bb      	str	r3, [r7, #8]
}
 80088fa:	bf00      	nop
 80088fc:	bf00      	nop
 80088fe:	e7fd      	b.n	80088fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008904:	1e5a      	subs	r2, r3, #1
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008912:	429a      	cmp	r2, r3
 8008914:	d02c      	beq.n	8008970 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800891a:	2b00      	cmp	r3, #0
 800891c:	d128      	bne.n	8008970 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800891e:	693b      	ldr	r3, [r7, #16]
 8008920:	3304      	adds	r3, #4
 8008922:	4618      	mov	r0, r3
 8008924:	f7fd fd8e 	bl	8006444 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008934:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008940:	4b0f      	ldr	r3, [pc, #60]	@ (8008980 <xTaskPriorityDisinherit+0xd8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d903      	bls.n	8008950 <xTaskPriorityDisinherit+0xa8>
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800894c:	4a0c      	ldr	r2, [pc, #48]	@ (8008980 <xTaskPriorityDisinherit+0xd8>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4a09      	ldr	r2, [pc, #36]	@ (8008984 <xTaskPriorityDisinherit+0xdc>)
 800895e:	441a      	add	r2, r3
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7fd fd0f 	bl	800638a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800896c:	2301      	movs	r3, #1
 800896e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008970:	697b      	ldr	r3, [r7, #20]
	}
 8008972:	4618      	mov	r0, r3
 8008974:	3718      	adds	r7, #24
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	24004c48 	.word	0x24004c48
 8008980:	24005124 	.word	0x24005124
 8008984:	24004c4c 	.word	0x24004c4c

08008988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008988:	b580      	push	{r7, lr}
 800898a:	b088      	sub	sp, #32
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008996:	2301      	movs	r3, #1
 8008998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d06c      	beq.n	8008a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80089a0:	69bb      	ldr	r3, [r7, #24]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d10b      	bne.n	80089c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80089a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	60fb      	str	r3, [r7, #12]
}
 80089ba:	bf00      	nop
 80089bc:	bf00      	nop
 80089be:	e7fd      	b.n	80089bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80089c0:	69bb      	ldr	r3, [r7, #24]
 80089c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089c4:	683a      	ldr	r2, [r7, #0]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d902      	bls.n	80089d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	61fb      	str	r3, [r7, #28]
 80089ce:	e002      	b.n	80089d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089da:	69fa      	ldr	r2, [r7, #28]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d04c      	beq.n	8008a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d147      	bne.n	8008a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80089ea:	4b26      	ldr	r3, [pc, #152]	@ (8008a84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d10b      	bne.n	8008a0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80089f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f8:	f383 8811 	msr	BASEPRI, r3
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f3bf 8f4f 	dsb	sy
 8008a04:	60bb      	str	r3, [r7, #8]
}
 8008a06:	bf00      	nop
 8008a08:	bf00      	nop
 8008a0a:	e7fd      	b.n	8008a08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	69fa      	ldr	r2, [r7, #28]
 8008a16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	db04      	blt.n	8008a2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	6959      	ldr	r1, [r3, #20]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4a13      	ldr	r2, [pc, #76]	@ (8008a88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a3a:	4413      	add	r3, r2
 8008a3c:	4299      	cmp	r1, r3
 8008a3e:	d11c      	bne.n	8008a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	3304      	adds	r3, #4
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7fd fcfd 	bl	8006444 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d903      	bls.n	8008a5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8008a8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a62:	4613      	mov	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4413      	add	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4a07      	ldr	r2, [pc, #28]	@ (8008a88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008a6c:	441a      	add	r2, r3
 8008a6e:	69bb      	ldr	r3, [r7, #24]
 8008a70:	3304      	adds	r3, #4
 8008a72:	4619      	mov	r1, r3
 8008a74:	4610      	mov	r0, r2
 8008a76:	f7fd fc88 	bl	800638a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a7a:	bf00      	nop
 8008a7c:	3720      	adds	r7, #32
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	24004c48 	.word	0x24004c48
 8008a88:	24004c4c 	.word	0x24004c4c
 8008a8c:	24005124 	.word	0x24005124

08008a90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008a90:	b480      	push	{r7}
 8008a92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008a94:	4b07      	ldr	r3, [pc, #28]	@ (8008ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d004      	beq.n	8008aa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008aa2:	3201      	adds	r2, #1
 8008aa4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8008aa6:	4b03      	ldr	r3, [pc, #12]	@ (8008ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
	}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	24004c48 	.word	0x24004c48

08008ab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008ac2:	4b21      	ldr	r3, [pc, #132]	@ (8008b48 <prvAddCurrentTaskToDelayedList+0x90>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac8:	4b20      	ldr	r3, [pc, #128]	@ (8008b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fd fcb8 	bl	8006444 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ada:	d10a      	bne.n	8008af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d007      	beq.n	8008af2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8008b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3304      	adds	r3, #4
 8008ae8:	4619      	mov	r1, r3
 8008aea:	4819      	ldr	r0, [pc, #100]	@ (8008b50 <prvAddCurrentTaskToDelayedList+0x98>)
 8008aec:	f7fd fc4d 	bl	800638a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008af0:	e026      	b.n	8008b40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008af2:	68fa      	ldr	r2, [r7, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	4413      	add	r3, r2
 8008af8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008afa:	4b14      	ldr	r3, [pc, #80]	@ (8008b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d209      	bcs.n	8008b1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b0a:	4b12      	ldr	r3, [pc, #72]	@ (8008b54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8008b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	3304      	adds	r3, #4
 8008b14:	4619      	mov	r1, r3
 8008b16:	4610      	mov	r0, r2
 8008b18:	f7fd fc5b 	bl	80063d2 <vListInsert>
}
 8008b1c:	e010      	b.n	8008b40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	4b0a      	ldr	r3, [pc, #40]	@ (8008b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	3304      	adds	r3, #4
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	f7fd fc51 	bl	80063d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008b30:	4b0a      	ldr	r3, [pc, #40]	@ (8008b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	68ba      	ldr	r2, [r7, #8]
 8008b36:	429a      	cmp	r2, r3
 8008b38:	d202      	bcs.n	8008b40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b3a:	4a08      	ldr	r2, [pc, #32]	@ (8008b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	6013      	str	r3, [r2, #0]
}
 8008b40:	bf00      	nop
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}
 8008b48:	24005120 	.word	0x24005120
 8008b4c:	24004c48 	.word	0x24004c48
 8008b50:	24005108 	.word	0x24005108
 8008b54:	240050d8 	.word	0x240050d8
 8008b58:	240050d4 	.word	0x240050d4
 8008b5c:	2400513c 	.word	0x2400513c

08008b60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b08a      	sub	sp, #40	@ 0x28
 8008b64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b6a:	f000 fb13 	bl	8009194 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8008be4 <xTimerCreateTimerTask+0x84>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d021      	beq.n	8008bba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b76:	2300      	movs	r3, #0
 8008b78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b7e:	1d3a      	adds	r2, r7, #4
 8008b80:	f107 0108 	add.w	r1, r7, #8
 8008b84:	f107 030c 	add.w	r3, r7, #12
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fd f9c9 	bl	8005f20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	68fa      	ldr	r2, [r7, #12]
 8008b94:	9202      	str	r2, [sp, #8]
 8008b96:	9301      	str	r3, [sp, #4]
 8008b98:	2302      	movs	r3, #2
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	460a      	mov	r2, r1
 8008ba0:	4911      	ldr	r1, [pc, #68]	@ (8008be8 <xTimerCreateTimerTask+0x88>)
 8008ba2:	4812      	ldr	r0, [pc, #72]	@ (8008bec <xTimerCreateTimerTask+0x8c>)
 8008ba4:	f7fe ffae 	bl	8007b04 <xTaskCreateStatic>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	4a11      	ldr	r2, [pc, #68]	@ (8008bf0 <xTimerCreateTimerTask+0x90>)
 8008bac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008bae:	4b10      	ldr	r3, [pc, #64]	@ (8008bf0 <xTimerCreateTimerTask+0x90>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d10b      	bne.n	8008bd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008bd8:	697b      	ldr	r3, [r7, #20]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	24005178 	.word	0x24005178
 8008be8:	08014394 	.word	0x08014394
 8008bec:	08008d2d 	.word	0x08008d2d
 8008bf0:	2400517c 	.word	0x2400517c

08008bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b08a      	sub	sp, #40	@ 0x28
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10b      	bne.n	8008c24 <xTimerGenericCommand+0x30>
	__asm volatile
 8008c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c10:	f383 8811 	msr	BASEPRI, r3
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	f3bf 8f4f 	dsb	sy
 8008c1c:	623b      	str	r3, [r7, #32]
}
 8008c1e:	bf00      	nop
 8008c20:	bf00      	nop
 8008c22:	e7fd      	b.n	8008c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c24:	4b19      	ldr	r3, [pc, #100]	@ (8008c8c <xTimerGenericCommand+0x98>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d02a      	beq.n	8008c82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b05      	cmp	r3, #5
 8008c3c:	dc18      	bgt.n	8008c70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c3e:	f7ff fdad 	bl	800879c <xTaskGetSchedulerState>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d109      	bne.n	8008c5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c48:	4b10      	ldr	r3, [pc, #64]	@ (8008c8c <xTimerGenericCommand+0x98>)
 8008c4a:	6818      	ldr	r0, [r3, #0]
 8008c4c:	f107 0110 	add.w	r1, r7, #16
 8008c50:	2300      	movs	r3, #0
 8008c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c54:	f7fe f8de 	bl	8006e14 <xQueueGenericSend>
 8008c58:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c5a:	e012      	b.n	8008c82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8008c8c <xTimerGenericCommand+0x98>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	f107 0110 	add.w	r1, r7, #16
 8008c64:	2300      	movs	r3, #0
 8008c66:	2200      	movs	r2, #0
 8008c68:	f7fe f8d4 	bl	8006e14 <xQueueGenericSend>
 8008c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c6e:	e008      	b.n	8008c82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c70:	4b06      	ldr	r3, [pc, #24]	@ (8008c8c <xTimerGenericCommand+0x98>)
 8008c72:	6818      	ldr	r0, [r3, #0]
 8008c74:	f107 0110 	add.w	r1, r7, #16
 8008c78:	2300      	movs	r3, #0
 8008c7a:	683a      	ldr	r2, [r7, #0]
 8008c7c:	f7fe f9cc 	bl	8007018 <xQueueGenericSendFromISR>
 8008c80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3728      	adds	r7, #40	@ 0x28
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	24005178 	.word	0x24005178

08008c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b088      	sub	sp, #32
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c9a:	4b23      	ldr	r3, [pc, #140]	@ (8008d28 <prvProcessExpiredTimer+0x98>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f7fd fbcb 	bl	8006444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cb4:	f003 0304 	and.w	r3, r3, #4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d023      	beq.n	8008d04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	699a      	ldr	r2, [r3, #24]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	18d1      	adds	r1, r2, r3
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	683a      	ldr	r2, [r7, #0]
 8008cc8:	6978      	ldr	r0, [r7, #20]
 8008cca:	f000 f8d5 	bl	8008e78 <prvInsertTimerInActiveList>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d020      	beq.n	8008d16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	9300      	str	r3, [sp, #0]
 8008cd8:	2300      	movs	r3, #0
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	2100      	movs	r1, #0
 8008cde:	6978      	ldr	r0, [r7, #20]
 8008ce0:	f7ff ff88 	bl	8008bf4 <xTimerGenericCommand>
 8008ce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d114      	bne.n	8008d16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	60fb      	str	r3, [r7, #12]
}
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	e7fd      	b.n	8008d00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d0a:	f023 0301 	bic.w	r3, r3, #1
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	6978      	ldr	r0, [r7, #20]
 8008d1c:	4798      	blx	r3
}
 8008d1e:	bf00      	nop
 8008d20:	3718      	adds	r7, #24
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	24005170 	.word	0x24005170

08008d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d34:	f107 0308 	add.w	r3, r7, #8
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 f859 	bl	8008df0 <prvGetNextExpireTime>
 8008d3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	4619      	mov	r1, r3
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f000 f805 	bl	8008d54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d4a:	f000 f8d7 	bl	8008efc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d4e:	bf00      	nop
 8008d50:	e7f0      	b.n	8008d34 <prvTimerTask+0x8>
	...

08008d54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d5e:	f7ff f915 	bl	8007f8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	4618      	mov	r0, r3
 8008d68:	f000 f866 	bl	8008e38 <prvSampleTimeNow>
 8008d6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d130      	bne.n	8008dd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <prvProcessTimerOrBlockTask+0x3c>
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d806      	bhi.n	8008d90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d82:	f7ff f911 	bl	8007fa8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d86:	68f9      	ldr	r1, [r7, #12]
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7ff ff81 	bl	8008c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d8e:	e024      	b.n	8008dda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d008      	beq.n	8008da8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d96:	4b13      	ldr	r3, [pc, #76]	@ (8008de4 <prvProcessTimerOrBlockTask+0x90>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <prvProcessTimerOrBlockTask+0x50>
 8008da0:	2301      	movs	r3, #1
 8008da2:	e000      	b.n	8008da6 <prvProcessTimerOrBlockTask+0x52>
 8008da4:	2300      	movs	r3, #0
 8008da6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008da8:	4b0f      	ldr	r3, [pc, #60]	@ (8008de8 <prvProcessTimerOrBlockTask+0x94>)
 8008daa:	6818      	ldr	r0, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	4619      	mov	r1, r3
 8008db6:	f7fe fe71 	bl	8007a9c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008dba:	f7ff f8f5 	bl	8007fa8 <xTaskResumeAll>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008dc4:	4b09      	ldr	r3, [pc, #36]	@ (8008dec <prvProcessTimerOrBlockTask+0x98>)
 8008dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	f3bf 8f6f 	isb	sy
}
 8008dd4:	e001      	b.n	8008dda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008dd6:	f7ff f8e7 	bl	8007fa8 <xTaskResumeAll>
}
 8008dda:	bf00      	nop
 8008ddc:	3710      	adds	r7, #16
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	24005174 	.word	0x24005174
 8008de8:	24005178 	.word	0x24005178
 8008dec:	e000ed04 	.word	0xe000ed04

08008df0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008df8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e34 <prvGetNextExpireTime+0x44>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d101      	bne.n	8008e06 <prvGetNextExpireTime+0x16>
 8008e02:	2201      	movs	r2, #1
 8008e04:	e000      	b.n	8008e08 <prvGetNextExpireTime+0x18>
 8008e06:	2200      	movs	r2, #0
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d105      	bne.n	8008e20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e14:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <prvGetNextExpireTime+0x44>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	60fb      	str	r3, [r7, #12]
 8008e1e:	e001      	b.n	8008e24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e24:	68fb      	ldr	r3, [r7, #12]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	24005170 	.word	0x24005170

08008e38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e40:	f7ff f950 	bl	80080e4 <xTaskGetTickCount>
 8008e44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e46:	4b0b      	ldr	r3, [pc, #44]	@ (8008e74 <prvSampleTimeNow+0x3c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d205      	bcs.n	8008e5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e50:	f000 f93a 	bl	80090c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e002      	b.n	8008e62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e62:	4a04      	ldr	r2, [pc, #16]	@ (8008e74 <prvSampleTimeNow+0x3c>)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e68:	68fb      	ldr	r3, [r7, #12]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	24005180 	.word	0x24005180

08008e78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b086      	sub	sp, #24
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d812      	bhi.n	8008ec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	1ad2      	subs	r2, r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d302      	bcc.n	8008eb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008eac:	2301      	movs	r3, #1
 8008eae:	617b      	str	r3, [r7, #20]
 8008eb0:	e01b      	b.n	8008eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008eb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ef4 <prvInsertTimerInActiveList+0x7c>)
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3304      	adds	r3, #4
 8008eba:	4619      	mov	r1, r3
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	f7fd fa88 	bl	80063d2 <vListInsert>
 8008ec2:	e012      	b.n	8008eea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d206      	bcs.n	8008eda <prvInsertTimerInActiveList+0x62>
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d302      	bcc.n	8008eda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	e007      	b.n	8008eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eda:	4b07      	ldr	r3, [pc, #28]	@ (8008ef8 <prvInsertTimerInActiveList+0x80>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	4610      	mov	r0, r2
 8008ee6:	f7fd fa74 	bl	80063d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008eea:	697b      	ldr	r3, [r7, #20]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3718      	adds	r7, #24
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	24005174 	.word	0x24005174
 8008ef8:	24005170 	.word	0x24005170

08008efc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08e      	sub	sp, #56	@ 0x38
 8008f00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f02:	e0ce      	b.n	80090a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	da19      	bge.n	8008f3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f0a:	1d3b      	adds	r3, r7, #4
 8008f0c:	3304      	adds	r3, #4
 8008f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10b      	bne.n	8008f2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f1a:	f383 8811 	msr	BASEPRI, r3
 8008f1e:	f3bf 8f6f 	isb	sy
 8008f22:	f3bf 8f4f 	dsb	sy
 8008f26:	61fb      	str	r3, [r7, #28]
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	e7fd      	b.n	8008f2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f34:	6850      	ldr	r0, [r2, #4]
 8008f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f38:	6892      	ldr	r2, [r2, #8]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f2c0 80ae 	blt.w	80090a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d004      	beq.n	8008f5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f54:	3304      	adds	r3, #4
 8008f56:	4618      	mov	r0, r3
 8008f58:	f7fd fa74 	bl	8006444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7ff ff6a 	bl	8008e38 <prvSampleTimeNow>
 8008f64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2b09      	cmp	r3, #9
 8008f6a:	f200 8097 	bhi.w	800909c <prvProcessReceivedCommands+0x1a0>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <prvProcessReceivedCommands+0x78>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f9d 	.word	0x08008f9d
 8008f78:	08008f9d 	.word	0x08008f9d
 8008f7c:	08008f9d 	.word	0x08008f9d
 8008f80:	08009013 	.word	0x08009013
 8008f84:	08009027 	.word	0x08009027
 8008f88:	08009073 	.word	0x08009073
 8008f8c:	08008f9d 	.word	0x08008f9d
 8008f90:	08008f9d 	.word	0x08008f9d
 8008f94:	08009013 	.word	0x08009013
 8008f98:	08009027 	.word	0x08009027
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	18d1      	adds	r1, r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fbc:	f7ff ff5c 	bl	8008e78 <prvInsertTimerInActiveList>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d06c      	beq.n	80090a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fd4:	f003 0304 	and.w	r3, r3, #4
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d061      	beq.n	80090a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fdc:	68ba      	ldr	r2, [r7, #8]
 8008fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	441a      	add	r2, r3
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	2300      	movs	r3, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fee:	f7ff fe01 	bl	8008bf4 <xTimerGenericCommand>
 8008ff2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008ff4:	6a3b      	ldr	r3, [r7, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d152      	bne.n	80090a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	61bb      	str	r3, [r7, #24]
}
 800900c:	bf00      	nop
 800900e:	bf00      	nop
 8009010:	e7fd      	b.n	800900e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	b2da      	uxtb	r2, r3
 800901e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009020:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009024:	e03d      	b.n	80090a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800902c:	f043 0301 	orr.w	r3, r3, #1
 8009030:	b2da      	uxtb	r2, r3
 8009032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800903e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10b      	bne.n	800905e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904a:	f383 8811 	msr	BASEPRI, r3
 800904e:	f3bf 8f6f 	isb	sy
 8009052:	f3bf 8f4f 	dsb	sy
 8009056:	617b      	str	r3, [r7, #20]
}
 8009058:	bf00      	nop
 800905a:	bf00      	nop
 800905c:	e7fd      	b.n	800905a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800905e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009060:	699a      	ldr	r2, [r3, #24]
 8009062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009064:	18d1      	adds	r1, r2, r3
 8009066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800906c:	f7ff ff04 	bl	8008e78 <prvInsertTimerInActiveList>
					break;
 8009070:	e017      	b.n	80090a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009078:	f003 0302 	and.w	r3, r3, #2
 800907c:	2b00      	cmp	r3, #0
 800907e:	d103      	bne.n	8009088 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009082:	f7fd f835 	bl	80060f0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009086:	e00c      	b.n	80090a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800908a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800908e:	f023 0301 	bic.w	r3, r3, #1
 8009092:	b2da      	uxtb	r2, r3
 8009094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800909a:	e002      	b.n	80090a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80090a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80090a2:	4b08      	ldr	r3, [pc, #32]	@ (80090c4 <prvProcessReceivedCommands+0x1c8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	1d39      	adds	r1, r7, #4
 80090a8:	2200      	movs	r2, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f7fe f8e2 	bl	8007274 <xQueueReceive>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f47f af26 	bne.w	8008f04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80090b8:	bf00      	nop
 80090ba:	bf00      	nop
 80090bc:	3730      	adds	r7, #48	@ 0x30
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
 80090c2:	bf00      	nop
 80090c4:	24005178 	.word	0x24005178

080090c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80090ce:	e049      	b.n	8009164 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80090d0:	4b2e      	ldr	r3, [pc, #184]	@ (800918c <prvSwitchTimerLists+0xc4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090da:	4b2c      	ldr	r3, [pc, #176]	@ (800918c <prvSwitchTimerLists+0xc4>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68db      	ldr	r3, [r3, #12]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7fd f9ab 	bl	8006444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	68f8      	ldr	r0, [r7, #12]
 80090f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d02f      	beq.n	8009164 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	693a      	ldr	r2, [r7, #16]
 800910a:	4413      	add	r3, r2
 800910c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800910e:	68ba      	ldr	r2, [r7, #8]
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	429a      	cmp	r2, r3
 8009114:	d90e      	bls.n	8009134 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	68fa      	ldr	r2, [r7, #12]
 8009120:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009122:	4b1a      	ldr	r3, [pc, #104]	@ (800918c <prvSwitchTimerLists+0xc4>)
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	3304      	adds	r3, #4
 800912a:	4619      	mov	r1, r3
 800912c:	4610      	mov	r0, r2
 800912e:	f7fd f950 	bl	80063d2 <vListInsert>
 8009132:	e017      	b.n	8009164 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009134:	2300      	movs	r3, #0
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	2300      	movs	r3, #0
 800913a:	693a      	ldr	r2, [r7, #16]
 800913c:	2100      	movs	r1, #0
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f7ff fd58 	bl	8008bf4 <xTimerGenericCommand>
 8009144:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10b      	bne.n	8009164 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800914c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009150:	f383 8811 	msr	BASEPRI, r3
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	603b      	str	r3, [r7, #0]
}
 800915e:	bf00      	nop
 8009160:	bf00      	nop
 8009162:	e7fd      	b.n	8009160 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009164:	4b09      	ldr	r3, [pc, #36]	@ (800918c <prvSwitchTimerLists+0xc4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1b0      	bne.n	80090d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800916e:	4b07      	ldr	r3, [pc, #28]	@ (800918c <prvSwitchTimerLists+0xc4>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009174:	4b06      	ldr	r3, [pc, #24]	@ (8009190 <prvSwitchTimerLists+0xc8>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a04      	ldr	r2, [pc, #16]	@ (800918c <prvSwitchTimerLists+0xc4>)
 800917a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800917c:	4a04      	ldr	r2, [pc, #16]	@ (8009190 <prvSwitchTimerLists+0xc8>)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	6013      	str	r3, [r2, #0]
}
 8009182:	bf00      	nop
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	24005170 	.word	0x24005170
 8009190:	24005174 	.word	0x24005174

08009194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800919a:	f7fd faad 	bl	80066f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800919e:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <prvCheckForValidListAndQueue+0x60>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d120      	bne.n	80091e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80091a6:	4814      	ldr	r0, [pc, #80]	@ (80091f8 <prvCheckForValidListAndQueue+0x64>)
 80091a8:	f7fd f8c2 	bl	8006330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80091ac:	4813      	ldr	r0, [pc, #76]	@ (80091fc <prvCheckForValidListAndQueue+0x68>)
 80091ae:	f7fd f8bf 	bl	8006330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80091b2:	4b13      	ldr	r3, [pc, #76]	@ (8009200 <prvCheckForValidListAndQueue+0x6c>)
 80091b4:	4a10      	ldr	r2, [pc, #64]	@ (80091f8 <prvCheckForValidListAndQueue+0x64>)
 80091b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80091b8:	4b12      	ldr	r3, [pc, #72]	@ (8009204 <prvCheckForValidListAndQueue+0x70>)
 80091ba:	4a10      	ldr	r2, [pc, #64]	@ (80091fc <prvCheckForValidListAndQueue+0x68>)
 80091bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80091be:	2300      	movs	r3, #0
 80091c0:	9300      	str	r3, [sp, #0]
 80091c2:	4b11      	ldr	r3, [pc, #68]	@ (8009208 <prvCheckForValidListAndQueue+0x74>)
 80091c4:	4a11      	ldr	r2, [pc, #68]	@ (800920c <prvCheckForValidListAndQueue+0x78>)
 80091c6:	2110      	movs	r1, #16
 80091c8:	200a      	movs	r0, #10
 80091ca:	f7fd fc21 	bl	8006a10 <xQueueGenericCreateStatic>
 80091ce:	4603      	mov	r3, r0
 80091d0:	4a08      	ldr	r2, [pc, #32]	@ (80091f4 <prvCheckForValidListAndQueue+0x60>)
 80091d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80091d4:	4b07      	ldr	r3, [pc, #28]	@ (80091f4 <prvCheckForValidListAndQueue+0x60>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d005      	beq.n	80091e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091dc:	4b05      	ldr	r3, [pc, #20]	@ (80091f4 <prvCheckForValidListAndQueue+0x60>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	490b      	ldr	r1, [pc, #44]	@ (8009210 <prvCheckForValidListAndQueue+0x7c>)
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fe fc06 	bl	80079f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091e8:	f7fd fab8 	bl	800675c <vPortExitCritical>
}
 80091ec:	bf00      	nop
 80091ee:	46bd      	mov	sp, r7
 80091f0:	bd80      	pop	{r7, pc}
 80091f2:	bf00      	nop
 80091f4:	24005178 	.word	0x24005178
 80091f8:	24005148 	.word	0x24005148
 80091fc:	2400515c 	.word	0x2400515c
 8009200:	24005170 	.word	0x24005170
 8009204:	24005174 	.word	0x24005174
 8009208:	24005224 	.word	0x24005224
 800920c:	24005184 	.word	0x24005184
 8009210:	0801439c 	.word	0x0801439c

08009214 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	4603      	mov	r3, r0
 800921c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800921e:	88fb      	ldrh	r3, [r7, #6]
 8009220:	021b      	lsls	r3, r3, #8
 8009222:	b21a      	sxth	r2, r3
 8009224:	88fb      	ldrh	r3, [r7, #6]
 8009226:	0a1b      	lsrs	r3, r3, #8
 8009228:	b29b      	uxth	r3, r3
 800922a:	b21b      	sxth	r3, r3
 800922c:	4313      	orrs	r3, r2
 800922e:	b21b      	sxth	r3, r3
 8009230:	b29b      	uxth	r3, r3
}
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	061a      	lsls	r2, r3, #24
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	021b      	lsls	r3, r3, #8
 800924e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009252:	431a      	orrs	r2, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	0a1b      	lsrs	r3, r3, #8
 8009258:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800925c:	431a      	orrs	r2, r3
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	0e1b      	lsrs	r3, r3, #24
 8009262:	4313      	orrs	r3, r2
}
 8009264:	4618      	mov	r0, r3
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009278:	4915      	ldr	r1, [pc, #84]	@ (80092d0 <etharp_free_entry+0x60>)
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	4613      	mov	r3, r2
 800927e:	005b      	lsls	r3, r3, #1
 8009280:	4413      	add	r3, r2
 8009282:	00db      	lsls	r3, r3, #3
 8009284:	440b      	add	r3, r1
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d013      	beq.n	80092b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800928c:	4910      	ldr	r1, [pc, #64]	@ (80092d0 <etharp_free_entry+0x60>)
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	4613      	mov	r3, r2
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	4413      	add	r3, r2
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	440b      	add	r3, r1
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4618      	mov	r0, r3
 800929e:	f003 fe6d 	bl	800cf7c <pbuf_free>
    arp_table[i].q = NULL;
 80092a2:	490b      	ldr	r1, [pc, #44]	@ (80092d0 <etharp_free_entry+0x60>)
 80092a4:	687a      	ldr	r2, [r7, #4]
 80092a6:	4613      	mov	r3, r2
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4413      	add	r3, r2
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	440b      	add	r3, r1
 80092b0:	2200      	movs	r2, #0
 80092b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80092b4:	4906      	ldr	r1, [pc, #24]	@ (80092d0 <etharp_free_entry+0x60>)
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	4613      	mov	r3, r2
 80092ba:	005b      	lsls	r3, r3, #1
 80092bc:	4413      	add	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	440b      	add	r3, r1
 80092c2:	3314      	adds	r3, #20
 80092c4:	2200      	movs	r2, #0
 80092c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	24005274 	.word	0x24005274

080092d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	e096      	b.n	800940e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80092e0:	494f      	ldr	r1, [pc, #316]	@ (8009420 <etharp_tmr+0x14c>)
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	005b      	lsls	r3, r3, #1
 80092e8:	4413      	add	r3, r2
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	440b      	add	r3, r1
 80092ee:	3314      	adds	r3, #20
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80092f4:	78fb      	ldrb	r3, [r7, #3]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 8086 	beq.w	8009408 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80092fc:	4948      	ldr	r1, [pc, #288]	@ (8009420 <etharp_tmr+0x14c>)
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	4613      	mov	r3, r2
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	4413      	add	r3, r2
 8009306:	00db      	lsls	r3, r3, #3
 8009308:	440b      	add	r3, r1
 800930a:	3312      	adds	r3, #18
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	b298      	uxth	r0, r3
 8009312:	4943      	ldr	r1, [pc, #268]	@ (8009420 <etharp_tmr+0x14c>)
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	4613      	mov	r3, r2
 8009318:	005b      	lsls	r3, r3, #1
 800931a:	4413      	add	r3, r2
 800931c:	00db      	lsls	r3, r3, #3
 800931e:	440b      	add	r3, r1
 8009320:	3312      	adds	r3, #18
 8009322:	4602      	mov	r2, r0
 8009324:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009326:	493e      	ldr	r1, [pc, #248]	@ (8009420 <etharp_tmr+0x14c>)
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	005b      	lsls	r3, r3, #1
 800932e:	4413      	add	r3, r2
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	440b      	add	r3, r1
 8009334:	3312      	adds	r3, #18
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800933c:	d215      	bcs.n	800936a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800933e:	4938      	ldr	r1, [pc, #224]	@ (8009420 <etharp_tmr+0x14c>)
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	005b      	lsls	r3, r3, #1
 8009346:	4413      	add	r3, r2
 8009348:	00db      	lsls	r3, r3, #3
 800934a:	440b      	add	r3, r1
 800934c:	3314      	adds	r3, #20
 800934e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009350:	2b01      	cmp	r3, #1
 8009352:	d10e      	bne.n	8009372 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8009354:	4932      	ldr	r1, [pc, #200]	@ (8009420 <etharp_tmr+0x14c>)
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	4613      	mov	r3, r2
 800935a:	005b      	lsls	r3, r3, #1
 800935c:	4413      	add	r3, r2
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	440b      	add	r3, r1
 8009362:	3312      	adds	r3, #18
 8009364:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009366:	2b04      	cmp	r3, #4
 8009368:	d903      	bls.n	8009372 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7ff ff80 	bl	8009270 <etharp_free_entry>
 8009370:	e04a      	b.n	8009408 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8009372:	492b      	ldr	r1, [pc, #172]	@ (8009420 <etharp_tmr+0x14c>)
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	4413      	add	r3, r2
 800937c:	00db      	lsls	r3, r3, #3
 800937e:	440b      	add	r3, r1
 8009380:	3314      	adds	r3, #20
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	2b03      	cmp	r3, #3
 8009386:	d10a      	bne.n	800939e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009388:	4925      	ldr	r1, [pc, #148]	@ (8009420 <etharp_tmr+0x14c>)
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	4613      	mov	r3, r2
 800938e:	005b      	lsls	r3, r3, #1
 8009390:	4413      	add	r3, r2
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	440b      	add	r3, r1
 8009396:	3314      	adds	r3, #20
 8009398:	2204      	movs	r2, #4
 800939a:	701a      	strb	r2, [r3, #0]
 800939c:	e034      	b.n	8009408 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800939e:	4920      	ldr	r1, [pc, #128]	@ (8009420 <etharp_tmr+0x14c>)
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	4613      	mov	r3, r2
 80093a4:	005b      	lsls	r3, r3, #1
 80093a6:	4413      	add	r3, r2
 80093a8:	00db      	lsls	r3, r3, #3
 80093aa:	440b      	add	r3, r1
 80093ac:	3314      	adds	r3, #20
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b04      	cmp	r3, #4
 80093b2:	d10a      	bne.n	80093ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80093b4:	491a      	ldr	r1, [pc, #104]	@ (8009420 <etharp_tmr+0x14c>)
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4613      	mov	r3, r2
 80093ba:	005b      	lsls	r3, r3, #1
 80093bc:	4413      	add	r3, r2
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	440b      	add	r3, r1
 80093c2:	3314      	adds	r3, #20
 80093c4:	2202      	movs	r2, #2
 80093c6:	701a      	strb	r2, [r3, #0]
 80093c8:	e01e      	b.n	8009408 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80093ca:	4915      	ldr	r1, [pc, #84]	@ (8009420 <etharp_tmr+0x14c>)
 80093cc:	687a      	ldr	r2, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	005b      	lsls	r3, r3, #1
 80093d2:	4413      	add	r3, r2
 80093d4:	00db      	lsls	r3, r3, #3
 80093d6:	440b      	add	r3, r1
 80093d8:	3314      	adds	r3, #20
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d113      	bne.n	8009408 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80093e0:	490f      	ldr	r1, [pc, #60]	@ (8009420 <etharp_tmr+0x14c>)
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4613      	mov	r3, r2
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	4413      	add	r3, r2
 80093ea:	00db      	lsls	r3, r3, #3
 80093ec:	440b      	add	r3, r1
 80093ee:	3308      	adds	r3, #8
 80093f0:	6818      	ldr	r0, [r3, #0]
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	4613      	mov	r3, r2
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	4413      	add	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4a08      	ldr	r2, [pc, #32]	@ (8009420 <etharp_tmr+0x14c>)
 80093fe:	4413      	add	r3, r2
 8009400:	3304      	adds	r3, #4
 8009402:	4619      	mov	r1, r3
 8009404:	f000 fe6e 	bl	800a0e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	3301      	adds	r3, #1
 800940c:	607b      	str	r3, [r7, #4]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	2b09      	cmp	r3, #9
 8009412:	f77f af65 	ble.w	80092e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8009416:	bf00      	nop
 8009418:	bf00      	nop
 800941a:	3708      	adds	r7, #8
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}
 8009420:	24005274 	.word	0x24005274

08009424 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	@ 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	460b      	mov	r3, r1
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8009432:	230a      	movs	r3, #10
 8009434:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009436:	230a      	movs	r3, #10
 8009438:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800943a:	230a      	movs	r3, #10
 800943c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800943e:	2300      	movs	r3, #0
 8009440:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8009442:	230a      	movs	r3, #10
 8009444:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8009446:	2300      	movs	r3, #0
 8009448:	83bb      	strh	r3, [r7, #28]
 800944a:	2300      	movs	r3, #0
 800944c:	837b      	strh	r3, [r7, #26]
 800944e:	2300      	movs	r3, #0
 8009450:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009452:	2300      	movs	r3, #0
 8009454:	843b      	strh	r3, [r7, #32]
 8009456:	e0ae      	b.n	80095b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8009458:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800945c:	49a6      	ldr	r1, [pc, #664]	@ (80096f8 <etharp_find_entry+0x2d4>)
 800945e:	4613      	mov	r3, r2
 8009460:	005b      	lsls	r3, r3, #1
 8009462:	4413      	add	r3, r2
 8009464:	00db      	lsls	r3, r3, #3
 8009466:	440b      	add	r3, r1
 8009468:	3314      	adds	r3, #20
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800946e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8009472:	2b0a      	cmp	r3, #10
 8009474:	d105      	bne.n	8009482 <etharp_find_entry+0x5e>
 8009476:	7dfb      	ldrb	r3, [r7, #23]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d102      	bne.n	8009482 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800947c:	8c3b      	ldrh	r3, [r7, #32]
 800947e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009480:	e095      	b.n	80095ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b00      	cmp	r3, #0
 8009486:	f000 8092 	beq.w	80095ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800948a:	7dfb      	ldrb	r3, [r7, #23]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d009      	beq.n	80094a4 <etharp_find_entry+0x80>
 8009490:	7dfb      	ldrb	r3, [r7, #23]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d806      	bhi.n	80094a4 <etharp_find_entry+0x80>
 8009496:	4b99      	ldr	r3, [pc, #612]	@ (80096fc <etharp_find_entry+0x2d8>)
 8009498:	f240 1223 	movw	r2, #291	@ 0x123
 800949c:	4998      	ldr	r1, [pc, #608]	@ (8009700 <etharp_find_entry+0x2dc>)
 800949e:	4899      	ldr	r0, [pc, #612]	@ (8009704 <etharp_find_entry+0x2e0>)
 80094a0:	f00a f826 	bl	80134f0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d020      	beq.n	80094ec <etharp_find_entry+0xc8>
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6819      	ldr	r1, [r3, #0]
 80094ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80094b2:	4891      	ldr	r0, [pc, #580]	@ (80096f8 <etharp_find_entry+0x2d4>)
 80094b4:	4613      	mov	r3, r2
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	4413      	add	r3, r2
 80094ba:	00db      	lsls	r3, r3, #3
 80094bc:	4403      	add	r3, r0
 80094be:	3304      	adds	r3, #4
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	4299      	cmp	r1, r3
 80094c4:	d112      	bne.n	80094ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00c      	beq.n	80094e6 <etharp_find_entry+0xc2>
 80094cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80094d0:	4989      	ldr	r1, [pc, #548]	@ (80096f8 <etharp_find_entry+0x2d4>)
 80094d2:	4613      	mov	r3, r2
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	4413      	add	r3, r2
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	440b      	add	r3, r1
 80094dc:	3308      	adds	r3, #8
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d102      	bne.n	80094ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80094e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80094ea:	e100      	b.n	80096ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80094ec:	7dfb      	ldrb	r3, [r7, #23]
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d140      	bne.n	8009574 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80094f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80094f6:	4980      	ldr	r1, [pc, #512]	@ (80096f8 <etharp_find_entry+0x2d4>)
 80094f8:	4613      	mov	r3, r2
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	4413      	add	r3, r2
 80094fe:	00db      	lsls	r3, r3, #3
 8009500:	440b      	add	r3, r1
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01a      	beq.n	800953e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8009508:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800950c:	497a      	ldr	r1, [pc, #488]	@ (80096f8 <etharp_find_entry+0x2d4>)
 800950e:	4613      	mov	r3, r2
 8009510:	005b      	lsls	r3, r3, #1
 8009512:	4413      	add	r3, r2
 8009514:	00db      	lsls	r3, r3, #3
 8009516:	440b      	add	r3, r1
 8009518:	3312      	adds	r3, #18
 800951a:	881b      	ldrh	r3, [r3, #0]
 800951c:	8bba      	ldrh	r2, [r7, #28]
 800951e:	429a      	cmp	r2, r3
 8009520:	d845      	bhi.n	80095ae <etharp_find_entry+0x18a>
            old_queue = i;
 8009522:	8c3b      	ldrh	r3, [r7, #32]
 8009524:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8009526:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800952a:	4973      	ldr	r1, [pc, #460]	@ (80096f8 <etharp_find_entry+0x2d4>)
 800952c:	4613      	mov	r3, r2
 800952e:	005b      	lsls	r3, r3, #1
 8009530:	4413      	add	r3, r2
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	440b      	add	r3, r1
 8009536:	3312      	adds	r3, #18
 8009538:	881b      	ldrh	r3, [r3, #0]
 800953a:	83bb      	strh	r3, [r7, #28]
 800953c:	e037      	b.n	80095ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800953e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009542:	496d      	ldr	r1, [pc, #436]	@ (80096f8 <etharp_find_entry+0x2d4>)
 8009544:	4613      	mov	r3, r2
 8009546:	005b      	lsls	r3, r3, #1
 8009548:	4413      	add	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	440b      	add	r3, r1
 800954e:	3312      	adds	r3, #18
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	8b7a      	ldrh	r2, [r7, #26]
 8009554:	429a      	cmp	r2, r3
 8009556:	d82a      	bhi.n	80095ae <etharp_find_entry+0x18a>
            old_pending = i;
 8009558:	8c3b      	ldrh	r3, [r7, #32]
 800955a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800955c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009560:	4965      	ldr	r1, [pc, #404]	@ (80096f8 <etharp_find_entry+0x2d4>)
 8009562:	4613      	mov	r3, r2
 8009564:	005b      	lsls	r3, r3, #1
 8009566:	4413      	add	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	440b      	add	r3, r1
 800956c:	3312      	adds	r3, #18
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	837b      	strh	r3, [r7, #26]
 8009572:	e01c      	b.n	80095ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d919      	bls.n	80095ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800957a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800957e:	495e      	ldr	r1, [pc, #376]	@ (80096f8 <etharp_find_entry+0x2d4>)
 8009580:	4613      	mov	r3, r2
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	4413      	add	r3, r2
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	440b      	add	r3, r1
 800958a:	3312      	adds	r3, #18
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	8b3a      	ldrh	r2, [r7, #24]
 8009590:	429a      	cmp	r2, r3
 8009592:	d80c      	bhi.n	80095ae <etharp_find_entry+0x18a>
            old_stable = i;
 8009594:	8c3b      	ldrh	r3, [r7, #32]
 8009596:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 8009598:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800959c:	4956      	ldr	r1, [pc, #344]	@ (80096f8 <etharp_find_entry+0x2d4>)
 800959e:	4613      	mov	r3, r2
 80095a0:	005b      	lsls	r3, r3, #1
 80095a2:	4413      	add	r3, r2
 80095a4:	00db      	lsls	r3, r3, #3
 80095a6:	440b      	add	r3, r1
 80095a8:	3312      	adds	r3, #18
 80095aa:	881b      	ldrh	r3, [r3, #0]
 80095ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80095ae:	8c3b      	ldrh	r3, [r7, #32]
 80095b0:	3301      	adds	r3, #1
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	843b      	strh	r3, [r7, #32]
 80095b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80095ba:	2b09      	cmp	r3, #9
 80095bc:	f77f af4c 	ble.w	8009458 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80095c0:	7afb      	ldrb	r3, [r7, #11]
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d108      	bne.n	80095dc <etharp_find_entry+0x1b8>
 80095ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80095ce:	2b0a      	cmp	r3, #10
 80095d0:	d107      	bne.n	80095e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80095d2:	7afb      	ldrb	r3, [r7, #11]
 80095d4:	f003 0301 	and.w	r3, r3, #1
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80095dc:	f04f 33ff 	mov.w	r3, #4294967295
 80095e0:	e085      	b.n	80096ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80095e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80095e6:	2b09      	cmp	r3, #9
 80095e8:	dc02      	bgt.n	80095f0 <etharp_find_entry+0x1cc>
    i = empty;
 80095ea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80095ec:	843b      	strh	r3, [r7, #32]
 80095ee:	e039      	b.n	8009664 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80095f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80095f4:	2b09      	cmp	r3, #9
 80095f6:	dc14      	bgt.n	8009622 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80095f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80095fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80095fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8009600:	493d      	ldr	r1, [pc, #244]	@ (80096f8 <etharp_find_entry+0x2d4>)
 8009602:	4613      	mov	r3, r2
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	4413      	add	r3, r2
 8009608:	00db      	lsls	r3, r3, #3
 800960a:	440b      	add	r3, r1
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d018      	beq.n	8009644 <etharp_find_entry+0x220>
 8009612:	4b3a      	ldr	r3, [pc, #232]	@ (80096fc <etharp_find_entry+0x2d8>)
 8009614:	f240 126d 	movw	r2, #365	@ 0x16d
 8009618:	493b      	ldr	r1, [pc, #236]	@ (8009708 <etharp_find_entry+0x2e4>)
 800961a:	483a      	ldr	r0, [pc, #232]	@ (8009704 <etharp_find_entry+0x2e0>)
 800961c:	f009 ff68 	bl	80134f0 <iprintf>
 8009620:	e010      	b.n	8009644 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8009622:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8009626:	2b09      	cmp	r3, #9
 8009628:	dc02      	bgt.n	8009630 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800962a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800962c:	843b      	strh	r3, [r7, #32]
 800962e:	e009      	b.n	8009644 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8009630:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8009634:	2b09      	cmp	r3, #9
 8009636:	dc02      	bgt.n	800963e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009638:	8bfb      	ldrh	r3, [r7, #30]
 800963a:	843b      	strh	r3, [r7, #32]
 800963c:	e002      	b.n	8009644 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800963e:	f04f 33ff 	mov.w	r3, #4294967295
 8009642:	e054      	b.n	80096ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009644:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009648:	2b09      	cmp	r3, #9
 800964a:	dd06      	ble.n	800965a <etharp_find_entry+0x236>
 800964c:	4b2b      	ldr	r3, [pc, #172]	@ (80096fc <etharp_find_entry+0x2d8>)
 800964e:	f240 127f 	movw	r2, #383	@ 0x17f
 8009652:	492e      	ldr	r1, [pc, #184]	@ (800970c <etharp_find_entry+0x2e8>)
 8009654:	482b      	ldr	r0, [pc, #172]	@ (8009704 <etharp_find_entry+0x2e0>)
 8009656:	f009 ff4b 	bl	80134f0 <iprintf>
    etharp_free_entry(i);
 800965a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800965e:	4618      	mov	r0, r3
 8009660:	f7ff fe06 	bl	8009270 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009664:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8009668:	2b09      	cmp	r3, #9
 800966a:	dd06      	ble.n	800967a <etharp_find_entry+0x256>
 800966c:	4b23      	ldr	r3, [pc, #140]	@ (80096fc <etharp_find_entry+0x2d8>)
 800966e:	f240 1283 	movw	r2, #387	@ 0x183
 8009672:	4926      	ldr	r1, [pc, #152]	@ (800970c <etharp_find_entry+0x2e8>)
 8009674:	4823      	ldr	r0, [pc, #140]	@ (8009704 <etharp_find_entry+0x2e0>)
 8009676:	f009 ff3b 	bl	80134f0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800967a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800967e:	491e      	ldr	r1, [pc, #120]	@ (80096f8 <etharp_find_entry+0x2d4>)
 8009680:	4613      	mov	r3, r2
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	4413      	add	r3, r2
 8009686:	00db      	lsls	r3, r3, #3
 8009688:	440b      	add	r3, r1
 800968a:	3314      	adds	r3, #20
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d006      	beq.n	80096a0 <etharp_find_entry+0x27c>
 8009692:	4b1a      	ldr	r3, [pc, #104]	@ (80096fc <etharp_find_entry+0x2d8>)
 8009694:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8009698:	491d      	ldr	r1, [pc, #116]	@ (8009710 <etharp_find_entry+0x2ec>)
 800969a:	481a      	ldr	r0, [pc, #104]	@ (8009704 <etharp_find_entry+0x2e0>)
 800969c:	f009 ff28 	bl	80134f0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00b      	beq.n	80096be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80096a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6819      	ldr	r1, [r3, #0]
 80096ae:	4812      	ldr	r0, [pc, #72]	@ (80096f8 <etharp_find_entry+0x2d4>)
 80096b0:	4613      	mov	r3, r2
 80096b2:	005b      	lsls	r3, r3, #1
 80096b4:	4413      	add	r3, r2
 80096b6:	00db      	lsls	r3, r3, #3
 80096b8:	4403      	add	r3, r0
 80096ba:	3304      	adds	r3, #4
 80096bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80096be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80096c2:	490d      	ldr	r1, [pc, #52]	@ (80096f8 <etharp_find_entry+0x2d4>)
 80096c4:	4613      	mov	r3, r2
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	4413      	add	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	440b      	add	r3, r1
 80096ce:	3312      	adds	r3, #18
 80096d0:	2200      	movs	r2, #0
 80096d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80096d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80096d8:	4907      	ldr	r1, [pc, #28]	@ (80096f8 <etharp_find_entry+0x2d4>)
 80096da:	4613      	mov	r3, r2
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	4413      	add	r3, r2
 80096e0:	00db      	lsls	r3, r3, #3
 80096e2:	440b      	add	r3, r1
 80096e4:	3308      	adds	r3, #8
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80096ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3728      	adds	r7, #40	@ 0x28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	24005274 	.word	0x24005274
 80096fc:	080143a4 	.word	0x080143a4
 8009700:	08014408 	.word	0x08014408
 8009704:	08014448 	.word	0x08014448
 8009708:	08014470 	.word	0x08014470
 800970c:	08014488 	.word	0x08014488
 8009710:	0801449c 	.word	0x0801449c

08009714 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b088      	sub	sp, #32
 8009718:	af02      	add	r7, sp, #8
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009728:	2b06      	cmp	r3, #6
 800972a:	d006      	beq.n	800973a <etharp_update_arp_entry+0x26>
 800972c:	4b48      	ldr	r3, [pc, #288]	@ (8009850 <etharp_update_arp_entry+0x13c>)
 800972e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8009732:	4948      	ldr	r1, [pc, #288]	@ (8009854 <etharp_update_arp_entry+0x140>)
 8009734:	4848      	ldr	r0, [pc, #288]	@ (8009858 <etharp_update_arp_entry+0x144>)
 8009736:	f009 fedb 	bl	80134f0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d012      	beq.n	8009766 <etharp_update_arp_entry+0x52>
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00e      	beq.n	8009766 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68f9      	ldr	r1, [r7, #12]
 800974e:	4618      	mov	r0, r3
 8009750:	f001 f9ec 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 8009754:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8009762:	2be0      	cmp	r3, #224	@ 0xe0
 8009764:	d102      	bne.n	800976c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009766:	f06f 030f 	mvn.w	r3, #15
 800976a:	e06c      	b.n	8009846 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800976c:	78fb      	ldrb	r3, [r7, #3]
 800976e:	68fa      	ldr	r2, [r7, #12]
 8009770:	4619      	mov	r1, r3
 8009772:	68b8      	ldr	r0, [r7, #8]
 8009774:	f7ff fe56 	bl	8009424 <etharp_find_entry>
 8009778:	4603      	mov	r3, r0
 800977a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800977c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009780:	2b00      	cmp	r3, #0
 8009782:	da02      	bge.n	800978a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009784:	8afb      	ldrh	r3, [r7, #22]
 8009786:	b25b      	sxtb	r3, r3
 8009788:	e05d      	b.n	8009846 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800978a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800978e:	4933      	ldr	r1, [pc, #204]	@ (800985c <etharp_update_arp_entry+0x148>)
 8009790:	4613      	mov	r3, r2
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	4413      	add	r3, r2
 8009796:	00db      	lsls	r3, r3, #3
 8009798:	440b      	add	r3, r1
 800979a:	3314      	adds	r3, #20
 800979c:	2202      	movs	r2, #2
 800979e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80097a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80097a4:	492d      	ldr	r1, [pc, #180]	@ (800985c <etharp_update_arp_entry+0x148>)
 80097a6:	4613      	mov	r3, r2
 80097a8:	005b      	lsls	r3, r3, #1
 80097aa:	4413      	add	r3, r2
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	440b      	add	r3, r1
 80097b0:	3308      	adds	r3, #8
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80097b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80097ba:	4613      	mov	r3, r2
 80097bc:	005b      	lsls	r3, r3, #1
 80097be:	4413      	add	r3, r2
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	3308      	adds	r3, #8
 80097c4:	4a25      	ldr	r2, [pc, #148]	@ (800985c <etharp_update_arp_entry+0x148>)
 80097c6:	4413      	add	r3, r2
 80097c8:	3304      	adds	r3, #4
 80097ca:	2206      	movs	r2, #6
 80097cc:	6879      	ldr	r1, [r7, #4]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f009 ff69 	bl	80136a6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80097d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80097d8:	4920      	ldr	r1, [pc, #128]	@ (800985c <etharp_update_arp_entry+0x148>)
 80097da:	4613      	mov	r3, r2
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	4413      	add	r3, r2
 80097e0:	00db      	lsls	r3, r3, #3
 80097e2:	440b      	add	r3, r1
 80097e4:	3312      	adds	r3, #18
 80097e6:	2200      	movs	r2, #0
 80097e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80097ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80097ee:	491b      	ldr	r1, [pc, #108]	@ (800985c <etharp_update_arp_entry+0x148>)
 80097f0:	4613      	mov	r3, r2
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	4413      	add	r3, r2
 80097f6:	00db      	lsls	r3, r3, #3
 80097f8:	440b      	add	r3, r1
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d021      	beq.n	8009844 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8009800:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009804:	4915      	ldr	r1, [pc, #84]	@ (800985c <etharp_update_arp_entry+0x148>)
 8009806:	4613      	mov	r3, r2
 8009808:	005b      	lsls	r3, r3, #1
 800980a:	4413      	add	r3, r2
 800980c:	00db      	lsls	r3, r3, #3
 800980e:	440b      	add	r3, r1
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8009814:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8009818:	4910      	ldr	r1, [pc, #64]	@ (800985c <etharp_update_arp_entry+0x148>)
 800981a:	4613      	mov	r3, r2
 800981c:	005b      	lsls	r3, r3, #1
 800981e:	4413      	add	r3, r2
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	440b      	add	r3, r1
 8009824:	2200      	movs	r2, #0
 8009826:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800982e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009832:	9300      	str	r3, [sp, #0]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	6939      	ldr	r1, [r7, #16]
 8009838:	68f8      	ldr	r0, [r7, #12]
 800983a:	f000 fcf3 	bl	800a224 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800983e:	6938      	ldr	r0, [r7, #16]
 8009840:	f003 fb9c 	bl	800cf7c <pbuf_free>
  }
  return ERR_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3718      	adds	r7, #24
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	080143a4 	.word	0x080143a4
 8009854:	080144c8 	.word	0x080144c8
 8009858:	08014448 	.word	0x08014448
 800985c:	24005274 	.word	0x24005274

08009860 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009868:	2300      	movs	r3, #0
 800986a:	60fb      	str	r3, [r7, #12]
 800986c:	e01e      	b.n	80098ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800986e:	4913      	ldr	r1, [pc, #76]	@ (80098bc <etharp_cleanup_netif+0x5c>)
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4613      	mov	r3, r2
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	4413      	add	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	440b      	add	r3, r1
 800987c:	3314      	adds	r3, #20
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8009882:	7afb      	ldrb	r3, [r7, #11]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <etharp_cleanup_netif+0x46>
 8009888:	490c      	ldr	r1, [pc, #48]	@ (80098bc <etharp_cleanup_netif+0x5c>)
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4613      	mov	r3, r2
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	4413      	add	r3, r2
 8009892:	00db      	lsls	r3, r3, #3
 8009894:	440b      	add	r3, r1
 8009896:	3308      	adds	r3, #8
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	687a      	ldr	r2, [r7, #4]
 800989c:	429a      	cmp	r2, r3
 800989e:	d102      	bne.n	80098a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f7ff fce5 	bl	8009270 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	3301      	adds	r3, #1
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b09      	cmp	r3, #9
 80098b0:	dddd      	ble.n	800986e <etharp_cleanup_netif+0xe>
    }
  }
}
 80098b2:	bf00      	nop
 80098b4:	bf00      	nop
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	24005274 	.word	0x24005274

080098c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80098c0:	b5b0      	push	{r4, r5, r7, lr}
 80098c2:	b08a      	sub	sp, #40	@ 0x28
 80098c4:	af04      	add	r7, sp, #16
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d107      	bne.n	80098e0 <etharp_input+0x20>
 80098d0:	4b3d      	ldr	r3, [pc, #244]	@ (80099c8 <etharp_input+0x108>)
 80098d2:	f240 228a 	movw	r2, #650	@ 0x28a
 80098d6:	493d      	ldr	r1, [pc, #244]	@ (80099cc <etharp_input+0x10c>)
 80098d8:	483d      	ldr	r0, [pc, #244]	@ (80099d0 <etharp_input+0x110>)
 80098da:	f009 fe09 	bl	80134f0 <iprintf>
 80098de:	e06f      	b.n	80099c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	881b      	ldrh	r3, [r3, #0]
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098f0:	d10c      	bne.n	800990c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80098f2:	693b      	ldr	r3, [r7, #16]
 80098f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80098f6:	2b06      	cmp	r3, #6
 80098f8:	d108      	bne.n	800990c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d104      	bne.n	800990c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	885b      	ldrh	r3, [r3, #2]
 8009906:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8009908:	2b08      	cmp	r3, #8
 800990a:	d003      	beq.n	8009914 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f003 fb35 	bl	800cf7c <pbuf_free>
    return;
 8009912:	e055      	b.n	80099c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	330e      	adds	r3, #14
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	3318      	adds	r3, #24
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	3304      	adds	r3, #4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d102      	bne.n	8009934 <etharp_input+0x74>
    for_us = 0;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]
 8009932:	e009      	b.n	8009948 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	3304      	adds	r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	429a      	cmp	r2, r3
 800993e:	bf0c      	ite	eq
 8009940:	2301      	moveq	r3, #1
 8009942:	2300      	movne	r3, #0
 8009944:	b2db      	uxtb	r3, r3
 8009946:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	f103 0208 	add.w	r2, r3, #8
 800994e:	7dfb      	ldrb	r3, [r7, #23]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <etharp_input+0x98>
 8009954:	2301      	movs	r3, #1
 8009956:	e000      	b.n	800995a <etharp_input+0x9a>
 8009958:	2302      	movs	r3, #2
 800995a:	f107 010c 	add.w	r1, r7, #12
 800995e:	6838      	ldr	r0, [r7, #0]
 8009960:	f7ff fed8 	bl	8009714 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	88db      	ldrh	r3, [r3, #6]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800996e:	d003      	beq.n	8009978 <etharp_input+0xb8>
 8009970:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009974:	d01e      	beq.n	80099b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8009976:	e020      	b.n	80099ba <etharp_input+0xfa>
      if (for_us) {
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d01c      	beq.n	80099b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	3208      	adds	r2, #8
        etharp_raw(netif,
 8009998:	2102      	movs	r1, #2
 800999a:	9103      	str	r1, [sp, #12]
 800999c:	f107 010c 	add.w	r1, r7, #12
 80099a0:	9102      	str	r1, [sp, #8]
 80099a2:	9201      	str	r2, [sp, #4]
 80099a4:	9300      	str	r3, [sp, #0]
 80099a6:	462b      	mov	r3, r5
 80099a8:	4622      	mov	r2, r4
 80099aa:	4601      	mov	r1, r0
 80099ac:	6838      	ldr	r0, [r7, #0]
 80099ae:	f000 faeb 	bl	8009f88 <etharp_raw>
      break;
 80099b2:	e001      	b.n	80099b8 <etharp_input+0xf8>
      break;
 80099b4:	bf00      	nop
 80099b6:	e000      	b.n	80099ba <etharp_input+0xfa>
      break;
 80099b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80099ba:	6878      	ldr	r0, [r7, #4]
 80099bc:	f003 fade 	bl	800cf7c <pbuf_free>
}
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bdb0      	pop	{r4, r5, r7, pc}
 80099c6:	bf00      	nop
 80099c8:	080143a4 	.word	0x080143a4
 80099cc:	08014520 	.word	0x08014520
 80099d0:	08014448 	.word	0x08014448

080099d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af02      	add	r7, sp, #8
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	4613      	mov	r3, r2
 80099e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80099e2:	79fa      	ldrb	r2, [r7, #7]
 80099e4:	4944      	ldr	r1, [pc, #272]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 80099e6:	4613      	mov	r3, r2
 80099e8:	005b      	lsls	r3, r3, #1
 80099ea:	4413      	add	r3, r2
 80099ec:	00db      	lsls	r3, r3, #3
 80099ee:	440b      	add	r3, r1
 80099f0:	3314      	adds	r3, #20
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d806      	bhi.n	8009a06 <etharp_output_to_arp_index+0x32>
 80099f8:	4b40      	ldr	r3, [pc, #256]	@ (8009afc <etharp_output_to_arp_index+0x128>)
 80099fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80099fe:	4940      	ldr	r1, [pc, #256]	@ (8009b00 <etharp_output_to_arp_index+0x12c>)
 8009a00:	4840      	ldr	r0, [pc, #256]	@ (8009b04 <etharp_output_to_arp_index+0x130>)
 8009a02:	f009 fd75 	bl	80134f0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8009a06:	79fa      	ldrb	r2, [r7, #7]
 8009a08:	493b      	ldr	r1, [pc, #236]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	4413      	add	r3, r2
 8009a10:	00db      	lsls	r3, r3, #3
 8009a12:	440b      	add	r3, r1
 8009a14:	3314      	adds	r3, #20
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	2b02      	cmp	r3, #2
 8009a1a:	d153      	bne.n	8009ac4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8009a1c:	79fa      	ldrb	r2, [r7, #7]
 8009a1e:	4936      	ldr	r1, [pc, #216]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a20:	4613      	mov	r3, r2
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	4413      	add	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	440b      	add	r3, r1
 8009a2a:	3312      	adds	r3, #18
 8009a2c:	881b      	ldrh	r3, [r3, #0]
 8009a2e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8009a32:	d919      	bls.n	8009a68 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8009a34:	79fa      	ldrb	r2, [r7, #7]
 8009a36:	4613      	mov	r3, r2
 8009a38:	005b      	lsls	r3, r3, #1
 8009a3a:	4413      	add	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a40:	4413      	add	r3, r2
 8009a42:	3304      	adds	r3, #4
 8009a44:	4619      	mov	r1, r3
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 fb4c 	bl	800a0e4 <etharp_request>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d138      	bne.n	8009ac4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009a52:	79fa      	ldrb	r2, [r7, #7]
 8009a54:	4928      	ldr	r1, [pc, #160]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a56:	4613      	mov	r3, r2
 8009a58:	005b      	lsls	r3, r3, #1
 8009a5a:	4413      	add	r3, r2
 8009a5c:	00db      	lsls	r3, r3, #3
 8009a5e:	440b      	add	r3, r1
 8009a60:	3314      	adds	r3, #20
 8009a62:	2203      	movs	r2, #3
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	e02d      	b.n	8009ac4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009a68:	79fa      	ldrb	r2, [r7, #7]
 8009a6a:	4923      	ldr	r1, [pc, #140]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	005b      	lsls	r3, r3, #1
 8009a70:	4413      	add	r3, r2
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	440b      	add	r3, r1
 8009a76:	3312      	adds	r3, #18
 8009a78:	881b      	ldrh	r3, [r3, #0]
 8009a7a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8009a7e:	d321      	bcc.n	8009ac4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8009a80:	79fa      	ldrb	r2, [r7, #7]
 8009a82:	4613      	mov	r3, r2
 8009a84:	005b      	lsls	r3, r3, #1
 8009a86:	4413      	add	r3, r2
 8009a88:	00db      	lsls	r3, r3, #3
 8009a8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a8c:	4413      	add	r3, r2
 8009a8e:	1d19      	adds	r1, r3, #4
 8009a90:	79fa      	ldrb	r2, [r7, #7]
 8009a92:	4613      	mov	r3, r2
 8009a94:	005b      	lsls	r3, r3, #1
 8009a96:	4413      	add	r3, r2
 8009a98:	00db      	lsls	r3, r3, #3
 8009a9a:	3308      	adds	r3, #8
 8009a9c:	4a16      	ldr	r2, [pc, #88]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009a9e:	4413      	add	r3, r2
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 fafb 	bl	800a0a0 <etharp_request_dst>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d109      	bne.n	8009ac4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8009ab0:	79fa      	ldrb	r2, [r7, #7]
 8009ab2:	4911      	ldr	r1, [pc, #68]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	005b      	lsls	r3, r3, #1
 8009ab8:	4413      	add	r3, r2
 8009aba:	00db      	lsls	r3, r3, #3
 8009abc:	440b      	add	r3, r1
 8009abe:	3314      	adds	r3, #20
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8009aca:	79fa      	ldrb	r2, [r7, #7]
 8009acc:	4613      	mov	r3, r2
 8009ace:	005b      	lsls	r3, r3, #1
 8009ad0:	4413      	add	r3, r2
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	4a08      	ldr	r2, [pc, #32]	@ (8009af8 <etharp_output_to_arp_index+0x124>)
 8009ad8:	4413      	add	r3, r2
 8009ada:	3304      	adds	r3, #4
 8009adc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009ae0:	9200      	str	r2, [sp, #0]
 8009ae2:	460a      	mov	r2, r1
 8009ae4:	68b9      	ldr	r1, [r7, #8]
 8009ae6:	68f8      	ldr	r0, [r7, #12]
 8009ae8:	f000 fb9c 	bl	800a224 <ethernet_output>
 8009aec:	4603      	mov	r3, r0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	24005274 	.word	0x24005274
 8009afc:	080143a4 	.word	0x080143a4
 8009b00:	08014540 	.word	0x08014540
 8009b04:	08014448 	.word	0x08014448

08009b08 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08a      	sub	sp, #40	@ 0x28
 8009b0c:	af02      	add	r7, sp, #8
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d106      	bne.n	8009b2c <etharp_output+0x24>
 8009b1e:	4b73      	ldr	r3, [pc, #460]	@ (8009cec <etharp_output+0x1e4>)
 8009b20:	f240 321e 	movw	r2, #798	@ 0x31e
 8009b24:	4972      	ldr	r1, [pc, #456]	@ (8009cf0 <etharp_output+0x1e8>)
 8009b26:	4873      	ldr	r0, [pc, #460]	@ (8009cf4 <etharp_output+0x1ec>)
 8009b28:	f009 fce2 	bl	80134f0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d106      	bne.n	8009b40 <etharp_output+0x38>
 8009b32:	4b6e      	ldr	r3, [pc, #440]	@ (8009cec <etharp_output+0x1e4>)
 8009b34:	f240 321f 	movw	r2, #799	@ 0x31f
 8009b38:	496f      	ldr	r1, [pc, #444]	@ (8009cf8 <etharp_output+0x1f0>)
 8009b3a:	486e      	ldr	r0, [pc, #440]	@ (8009cf4 <etharp_output+0x1ec>)
 8009b3c:	f009 fcd8 	bl	80134f0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d106      	bne.n	8009b54 <etharp_output+0x4c>
 8009b46:	4b69      	ldr	r3, [pc, #420]	@ (8009cec <etharp_output+0x1e4>)
 8009b48:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8009b4c:	496b      	ldr	r1, [pc, #428]	@ (8009cfc <etharp_output+0x1f4>)
 8009b4e:	4869      	ldr	r0, [pc, #420]	@ (8009cf4 <etharp_output+0x1ec>)
 8009b50:	f009 fcce 	bl	80134f0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68f9      	ldr	r1, [r7, #12]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 ffe6 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 8009b60:	4603      	mov	r3, r0
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8009b66:	4b66      	ldr	r3, [pc, #408]	@ (8009d00 <etharp_output+0x1f8>)
 8009b68:	61fb      	str	r3, [r7, #28]
 8009b6a:	e0af      	b.n	8009ccc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b74:	2be0      	cmp	r3, #224	@ 0xe0
 8009b76:	d118      	bne.n	8009baa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8009b80:	235e      	movs	r3, #94	@ 0x5e
 8009b82:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	3301      	adds	r3, #1
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	3302      	adds	r3, #2
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	3303      	adds	r3, #3
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8009ba2:	f107 0310 	add.w	r3, r7, #16
 8009ba6:	61fb      	str	r3, [r7, #28]
 8009ba8:	e090      	b.n	8009ccc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	405a      	eors	r2, r3
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3308      	adds	r3, #8
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d012      	beq.n	8009be8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009bc8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d00b      	beq.n	8009be8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	330c      	adds	r3, #12
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d003      	beq.n	8009be2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	330c      	adds	r3, #12
 8009bde:	61bb      	str	r3, [r7, #24]
 8009be0:	e002      	b.n	8009be8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8009be2:	f06f 0303 	mvn.w	r3, #3
 8009be6:	e07d      	b.n	8009ce4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009be8:	4b46      	ldr	r3, [pc, #280]	@ (8009d04 <etharp_output+0x1fc>)
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	4619      	mov	r1, r3
 8009bee:	4a46      	ldr	r2, [pc, #280]	@ (8009d08 <etharp_output+0x200>)
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	440b      	add	r3, r1
 8009bf6:	00db      	lsls	r3, r3, #3
 8009bf8:	4413      	add	r3, r2
 8009bfa:	3314      	adds	r3, #20
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d925      	bls.n	8009c4e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009c02:	4b40      	ldr	r3, [pc, #256]	@ (8009d04 <etharp_output+0x1fc>)
 8009c04:	781b      	ldrb	r3, [r3, #0]
 8009c06:	4619      	mov	r1, r3
 8009c08:	4a3f      	ldr	r2, [pc, #252]	@ (8009d08 <etharp_output+0x200>)
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	440b      	add	r3, r1
 8009c10:	00db      	lsls	r3, r3, #3
 8009c12:	4413      	add	r3, r2
 8009c14:	3308      	adds	r3, #8
 8009c16:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d117      	bne.n	8009c4e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	4b38      	ldr	r3, [pc, #224]	@ (8009d04 <etharp_output+0x1fc>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	4937      	ldr	r1, [pc, #220]	@ (8009d08 <etharp_output+0x200>)
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	4403      	add	r3, r0
 8009c30:	00db      	lsls	r3, r3, #3
 8009c32:	440b      	add	r3, r1
 8009c34:	3304      	adds	r3, #4
 8009c36:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d108      	bne.n	8009c4e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8009c3c:	4b31      	ldr	r3, [pc, #196]	@ (8009d04 <etharp_output+0x1fc>)
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	68f8      	ldr	r0, [r7, #12]
 8009c46:	f7ff fec5 	bl	80099d4 <etharp_output_to_arp_index>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	e04a      	b.n	8009ce4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009c4e:	2300      	movs	r3, #0
 8009c50:	75fb      	strb	r3, [r7, #23]
 8009c52:	e031      	b.n	8009cb8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009c54:	7dfa      	ldrb	r2, [r7, #23]
 8009c56:	492c      	ldr	r1, [pc, #176]	@ (8009d08 <etharp_output+0x200>)
 8009c58:	4613      	mov	r3, r2
 8009c5a:	005b      	lsls	r3, r3, #1
 8009c5c:	4413      	add	r3, r2
 8009c5e:	00db      	lsls	r3, r3, #3
 8009c60:	440b      	add	r3, r1
 8009c62:	3314      	adds	r3, #20
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d923      	bls.n	8009cb2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8009c6a:	7dfa      	ldrb	r2, [r7, #23]
 8009c6c:	4926      	ldr	r1, [pc, #152]	@ (8009d08 <etharp_output+0x200>)
 8009c6e:	4613      	mov	r3, r2
 8009c70:	005b      	lsls	r3, r3, #1
 8009c72:	4413      	add	r3, r2
 8009c74:	00db      	lsls	r3, r3, #3
 8009c76:	440b      	add	r3, r1
 8009c78:	3308      	adds	r3, #8
 8009c7a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d117      	bne.n	8009cb2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	6819      	ldr	r1, [r3, #0]
 8009c86:	7dfa      	ldrb	r2, [r7, #23]
 8009c88:	481f      	ldr	r0, [pc, #124]	@ (8009d08 <etharp_output+0x200>)
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	4413      	add	r3, r2
 8009c90:	00db      	lsls	r3, r3, #3
 8009c92:	4403      	add	r3, r0
 8009c94:	3304      	adds	r3, #4
 8009c96:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8009c98:	4299      	cmp	r1, r3
 8009c9a:	d10a      	bne.n	8009cb2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8009c9c:	4a19      	ldr	r2, [pc, #100]	@ (8009d04 <etharp_output+0x1fc>)
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff fe93 	bl	80099d4 <etharp_output_to_arp_index>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	e018      	b.n	8009ce4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	75fb      	strb	r3, [r7, #23]
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	2b09      	cmp	r3, #9
 8009cbc:	d9ca      	bls.n	8009c54 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009cbe:	68ba      	ldr	r2, [r7, #8]
 8009cc0:	69b9      	ldr	r1, [r7, #24]
 8009cc2:	68f8      	ldr	r0, [r7, #12]
 8009cc4:	f000 f822 	bl	8009d0c <etharp_query>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	e00b      	b.n	8009ce4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8009cd2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	68b9      	ldr	r1, [r7, #8]
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f000 faa1 	bl	800a224 <ethernet_output>
 8009ce2:	4603      	mov	r3, r0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3720      	adds	r7, #32
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	080143a4 	.word	0x080143a4
 8009cf0:	08014520 	.word	0x08014520
 8009cf4:	08014448 	.word	0x08014448
 8009cf8:	08014570 	.word	0x08014570
 8009cfc:	08014510 	.word	0x08014510
 8009d00:	080170ec 	.word	0x080170ec
 8009d04:	24005364 	.word	0x24005364
 8009d08:	24005274 	.word	0x24005274

08009d0c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b08c      	sub	sp, #48	@ 0x30
 8009d10:	af02      	add	r7, sp, #8
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	3326      	adds	r3, #38	@ 0x26
 8009d1c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009d1e:	23ff      	movs	r3, #255	@ 0xff
 8009d20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8009d24:	2300      	movs	r3, #0
 8009d26:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68f9      	ldr	r1, [r7, #12]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f000 fefc 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10c      	bne.n	8009d54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009d42:	2be0      	cmp	r3, #224	@ 0xe0
 8009d44:	d006      	beq.n	8009d54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d003      	beq.n	8009d54 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009d54:	f06f 030f 	mvn.w	r3, #15
 8009d58:	e101      	b.n	8009f5e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	2101      	movs	r1, #1
 8009d5e:	68b8      	ldr	r0, [r7, #8]
 8009d60:	f7ff fb60 	bl	8009424 <etharp_find_entry>
 8009d64:	4603      	mov	r3, r0
 8009d66:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8009d68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	da02      	bge.n	8009d76 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8009d70:	8a7b      	ldrh	r3, [r7, #18]
 8009d72:	b25b      	sxtb	r3, r3
 8009d74:	e0f3      	b.n	8009f5e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8009d76:	8a7b      	ldrh	r3, [r7, #18]
 8009d78:	2b7e      	cmp	r3, #126	@ 0x7e
 8009d7a:	d906      	bls.n	8009d8a <etharp_query+0x7e>
 8009d7c:	4b7a      	ldr	r3, [pc, #488]	@ (8009f68 <etharp_query+0x25c>)
 8009d7e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8009d82:	497a      	ldr	r1, [pc, #488]	@ (8009f6c <etharp_query+0x260>)
 8009d84:	487a      	ldr	r0, [pc, #488]	@ (8009f70 <etharp_query+0x264>)
 8009d86:	f009 fbb3 	bl	80134f0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8009d8a:	8a7b      	ldrh	r3, [r7, #18]
 8009d8c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009d8e:	7c7a      	ldrb	r2, [r7, #17]
 8009d90:	4978      	ldr	r1, [pc, #480]	@ (8009f74 <etharp_query+0x268>)
 8009d92:	4613      	mov	r3, r2
 8009d94:	005b      	lsls	r3, r3, #1
 8009d96:	4413      	add	r3, r2
 8009d98:	00db      	lsls	r3, r3, #3
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	781b      	ldrb	r3, [r3, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d115      	bne.n	8009dd0 <etharp_query+0xc4>
    is_new_entry = 1;
 8009da4:	2301      	movs	r3, #1
 8009da6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009da8:	7c7a      	ldrb	r2, [r7, #17]
 8009daa:	4972      	ldr	r1, [pc, #456]	@ (8009f74 <etharp_query+0x268>)
 8009dac:	4613      	mov	r3, r2
 8009dae:	005b      	lsls	r3, r3, #1
 8009db0:	4413      	add	r3, r2
 8009db2:	00db      	lsls	r3, r3, #3
 8009db4:	440b      	add	r3, r1
 8009db6:	3314      	adds	r3, #20
 8009db8:	2201      	movs	r2, #1
 8009dba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009dbc:	7c7a      	ldrb	r2, [r7, #17]
 8009dbe:	496d      	ldr	r1, [pc, #436]	@ (8009f74 <etharp_query+0x268>)
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	005b      	lsls	r3, r3, #1
 8009dc4:	4413      	add	r3, r2
 8009dc6:	00db      	lsls	r3, r3, #3
 8009dc8:	440b      	add	r3, r1
 8009dca:	3308      	adds	r3, #8
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009dd0:	7c7a      	ldrb	r2, [r7, #17]
 8009dd2:	4968      	ldr	r1, [pc, #416]	@ (8009f74 <etharp_query+0x268>)
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	005b      	lsls	r3, r3, #1
 8009dd8:	4413      	add	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	440b      	add	r3, r1
 8009dde:	3314      	adds	r3, #20
 8009de0:	781b      	ldrb	r3, [r3, #0]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d011      	beq.n	8009e0a <etharp_query+0xfe>
 8009de6:	7c7a      	ldrb	r2, [r7, #17]
 8009de8:	4962      	ldr	r1, [pc, #392]	@ (8009f74 <etharp_query+0x268>)
 8009dea:	4613      	mov	r3, r2
 8009dec:	005b      	lsls	r3, r3, #1
 8009dee:	4413      	add	r3, r2
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	440b      	add	r3, r1
 8009df4:	3314      	adds	r3, #20
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d806      	bhi.n	8009e0a <etharp_query+0xfe>
 8009dfc:	4b5a      	ldr	r3, [pc, #360]	@ (8009f68 <etharp_query+0x25c>)
 8009dfe:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8009e02:	495d      	ldr	r1, [pc, #372]	@ (8009f78 <etharp_query+0x26c>)
 8009e04:	485a      	ldr	r0, [pc, #360]	@ (8009f70 <etharp_query+0x264>)
 8009e06:	f009 fb73 	bl	80134f0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d102      	bne.n	8009e16 <etharp_query+0x10a>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10c      	bne.n	8009e30 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009e16:	68b9      	ldr	r1, [r7, #8]
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f000 f963 	bl	800a0e4 <etharp_request>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d102      	bne.n	8009e30 <etharp_query+0x124>
      return result;
 8009e2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009e2e:	e096      	b.n	8009f5e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d106      	bne.n	8009e44 <etharp_query+0x138>
 8009e36:	4b4c      	ldr	r3, [pc, #304]	@ (8009f68 <etharp_query+0x25c>)
 8009e38:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8009e3c:	494f      	ldr	r1, [pc, #316]	@ (8009f7c <etharp_query+0x270>)
 8009e3e:	484c      	ldr	r0, [pc, #304]	@ (8009f70 <etharp_query+0x264>)
 8009e40:	f009 fb56 	bl	80134f0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009e44:	7c7a      	ldrb	r2, [r7, #17]
 8009e46:	494b      	ldr	r1, [pc, #300]	@ (8009f74 <etharp_query+0x268>)
 8009e48:	4613      	mov	r3, r2
 8009e4a:	005b      	lsls	r3, r3, #1
 8009e4c:	4413      	add	r3, r2
 8009e4e:	00db      	lsls	r3, r3, #3
 8009e50:	440b      	add	r3, r1
 8009e52:	3314      	adds	r3, #20
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d917      	bls.n	8009e8a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8009e5a:	4a49      	ldr	r2, [pc, #292]	@ (8009f80 <etharp_query+0x274>)
 8009e5c:	7c7b      	ldrb	r3, [r7, #17]
 8009e5e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009e60:	7c7a      	ldrb	r2, [r7, #17]
 8009e62:	4613      	mov	r3, r2
 8009e64:	005b      	lsls	r3, r3, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	00db      	lsls	r3, r3, #3
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	4a41      	ldr	r2, [pc, #260]	@ (8009f74 <etharp_query+0x268>)
 8009e6e:	4413      	add	r3, r2
 8009e70:	3304      	adds	r3, #4
 8009e72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e76:	9200      	str	r2, [sp, #0]
 8009e78:	697a      	ldr	r2, [r7, #20]
 8009e7a:	6879      	ldr	r1, [r7, #4]
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f9d1 	bl	800a224 <ethernet_output>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e88:	e067      	b.n	8009f5a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009e8a:	7c7a      	ldrb	r2, [r7, #17]
 8009e8c:	4939      	ldr	r1, [pc, #228]	@ (8009f74 <etharp_query+0x268>)
 8009e8e:	4613      	mov	r3, r2
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	4413      	add	r3, r2
 8009e94:	00db      	lsls	r3, r3, #3
 8009e96:	440b      	add	r3, r1
 8009e98:	3314      	adds	r3, #20
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d15c      	bne.n	8009f5a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009ea8:	e01c      	b.n	8009ee4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	895a      	ldrh	r2, [r3, #10]
 8009eae:	69fb      	ldr	r3, [r7, #28]
 8009eb0:	891b      	ldrh	r3, [r3, #8]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d10a      	bne.n	8009ecc <etharp_query+0x1c0>
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d006      	beq.n	8009ecc <etharp_query+0x1c0>
 8009ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8009f68 <etharp_query+0x25c>)
 8009ec0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8009ec4:	492f      	ldr	r1, [pc, #188]	@ (8009f84 <etharp_query+0x278>)
 8009ec6:	482a      	ldr	r0, [pc, #168]	@ (8009f70 <etharp_query+0x264>)
 8009ec8:	f009 fb12 	bl	80134f0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	7b1b      	ldrb	r3, [r3, #12]
 8009ed0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <etharp_query+0x1d2>
        copy_needed = 1;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	61bb      	str	r3, [r7, #24]
        break;
 8009edc:	e005      	b.n	8009eea <etharp_query+0x1de>
      }
      p = p->next;
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1df      	bne.n	8009eaa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d007      	beq.n	8009f00 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009ef6:	200e      	movs	r0, #14
 8009ef8:	f003 faa8 	bl	800d44c <pbuf_clone>
 8009efc:	61f8      	str	r0, [r7, #28]
 8009efe:	e004      	b.n	8009f0a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009f04:	69f8      	ldr	r0, [r7, #28]
 8009f06:	f003 f8df 	bl	800d0c8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d021      	beq.n	8009f54 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009f10:	7c7a      	ldrb	r2, [r7, #17]
 8009f12:	4918      	ldr	r1, [pc, #96]	@ (8009f74 <etharp_query+0x268>)
 8009f14:	4613      	mov	r3, r2
 8009f16:	005b      	lsls	r3, r3, #1
 8009f18:	4413      	add	r3, r2
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	440b      	add	r3, r1
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8009f24:	7c7a      	ldrb	r2, [r7, #17]
 8009f26:	4913      	ldr	r1, [pc, #76]	@ (8009f74 <etharp_query+0x268>)
 8009f28:	4613      	mov	r3, r2
 8009f2a:	005b      	lsls	r3, r3, #1
 8009f2c:	4413      	add	r3, r2
 8009f2e:	00db      	lsls	r3, r3, #3
 8009f30:	440b      	add	r3, r1
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4618      	mov	r0, r3
 8009f36:	f003 f821 	bl	800cf7c <pbuf_free>
      }
      arp_table[i].q = p;
 8009f3a:	7c7a      	ldrb	r2, [r7, #17]
 8009f3c:	490d      	ldr	r1, [pc, #52]	@ (8009f74 <etharp_query+0x268>)
 8009f3e:	4613      	mov	r3, r2
 8009f40:	005b      	lsls	r3, r3, #1
 8009f42:	4413      	add	r3, r2
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	440b      	add	r3, r1
 8009f48:	69fa      	ldr	r2, [r7, #28]
 8009f4a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009f52:	e002      	b.n	8009f5a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009f54:	23ff      	movs	r3, #255	@ 0xff
 8009f56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8009f5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3728      	adds	r7, #40	@ 0x28
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}
 8009f66:	bf00      	nop
 8009f68:	080143a4 	.word	0x080143a4
 8009f6c:	0801457c 	.word	0x0801457c
 8009f70:	08014448 	.word	0x08014448
 8009f74:	24005274 	.word	0x24005274
 8009f78:	0801458c 	.word	0x0801458c
 8009f7c:	08014570 	.word	0x08014570
 8009f80:	24005364 	.word	0x24005364
 8009f84:	080145b4 	.word	0x080145b4

08009f88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08a      	sub	sp, #40	@ 0x28
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	607a      	str	r2, [r7, #4]
 8009f94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009f96:	2300      	movs	r3, #0
 8009f98:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d106      	bne.n	8009fae <etharp_raw+0x26>
 8009fa0:	4b3a      	ldr	r3, [pc, #232]	@ (800a08c <etharp_raw+0x104>)
 8009fa2:	f240 4257 	movw	r2, #1111	@ 0x457
 8009fa6:	493a      	ldr	r1, [pc, #232]	@ (800a090 <etharp_raw+0x108>)
 8009fa8:	483a      	ldr	r0, [pc, #232]	@ (800a094 <etharp_raw+0x10c>)
 8009faa:	f009 faa1 	bl	80134f0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009fae:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009fb2:	211c      	movs	r1, #28
 8009fb4:	200e      	movs	r0, #14
 8009fb6:	f002 fcfd 	bl	800c9b4 <pbuf_alloc>
 8009fba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009fbc:	69bb      	ldr	r3, [r7, #24]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d102      	bne.n	8009fc8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fc6:	e05d      	b.n	800a084 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	895b      	ldrh	r3, [r3, #10]
 8009fcc:	2b1b      	cmp	r3, #27
 8009fce:	d806      	bhi.n	8009fde <etharp_raw+0x56>
 8009fd0:	4b2e      	ldr	r3, [pc, #184]	@ (800a08c <etharp_raw+0x104>)
 8009fd2:	f240 4262 	movw	r2, #1122	@ 0x462
 8009fd6:	4930      	ldr	r1, [pc, #192]	@ (800a098 <etharp_raw+0x110>)
 8009fd8:	482e      	ldr	r0, [pc, #184]	@ (800a094 <etharp_raw+0x10c>)
 8009fda:	f009 fa89 	bl	80134f0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009fe4:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff f914 	bl	8009214 <lwip_htons>
 8009fec:	4603      	mov	r3, r0
 8009fee:	461a      	mov	r2, r3
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009ffa:	2b06      	cmp	r3, #6
 8009ffc:	d006      	beq.n	800a00c <etharp_raw+0x84>
 8009ffe:	4b23      	ldr	r3, [pc, #140]	@ (800a08c <etharp_raw+0x104>)
 800a000:	f240 4269 	movw	r2, #1129	@ 0x469
 800a004:	4925      	ldr	r1, [pc, #148]	@ (800a09c <etharp_raw+0x114>)
 800a006:	4823      	ldr	r0, [pc, #140]	@ (800a094 <etharp_raw+0x10c>)
 800a008:	f009 fa72 	bl	80134f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	3308      	adds	r3, #8
 800a010:	2206      	movs	r2, #6
 800a012:	6839      	ldr	r1, [r7, #0]
 800a014:	4618      	mov	r0, r3
 800a016:	f009 fb46 	bl	80136a6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	3312      	adds	r3, #18
 800a01e:	2206      	movs	r2, #6
 800a020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a022:	4618      	mov	r0, r3
 800a024:	f009 fb3f 	bl	80136a6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	330e      	adds	r3, #14
 800a02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a02e:	6812      	ldr	r2, [r2, #0]
 800a030:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	3318      	adds	r3, #24
 800a036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2200      	movs	r2, #0
 800a040:	701a      	strb	r2, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	f042 0201 	orr.w	r2, r2, #1
 800a048:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f042 0208 	orr.w	r2, r2, #8
 800a052:	709a      	strb	r2, [r3, #2]
 800a054:	2200      	movs	r2, #0
 800a056:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2206      	movs	r2, #6
 800a05c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2204      	movs	r2, #4
 800a062:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800a064:	f640 0306 	movw	r3, #2054	@ 0x806
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	68ba      	ldr	r2, [r7, #8]
 800a06e:	69b9      	ldr	r1, [r7, #24]
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f8d7 	bl	800a224 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800a076:	69b8      	ldr	r0, [r7, #24]
 800a078:	f002 ff80 	bl	800cf7c <pbuf_free>
  p = NULL;
 800a07c:	2300      	movs	r3, #0
 800a07e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800a080:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3720      	adds	r7, #32
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	080143a4 	.word	0x080143a4
 800a090:	08014520 	.word	0x08014520
 800a094:	08014448 	.word	0x08014448
 800a098:	080145d0 	.word	0x080145d0
 800a09c:	08014604 	.word	0x08014604

0800a0a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b088      	sub	sp, #32
 800a0a4:	af04      	add	r7, sp, #16
 800a0a6:	60f8      	str	r0, [r7, #12]
 800a0a8:	60b9      	str	r1, [r7, #8]
 800a0aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800a0bc:	2201      	movs	r2, #1
 800a0be:	9203      	str	r2, [sp, #12]
 800a0c0:	68ba      	ldr	r2, [r7, #8]
 800a0c2:	9202      	str	r2, [sp, #8]
 800a0c4:	4a06      	ldr	r2, [pc, #24]	@ (800a0e0 <etharp_request_dst+0x40>)
 800a0c6:	9201      	str	r2, [sp, #4]
 800a0c8:	9300      	str	r3, [sp, #0]
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f7ff ff5a 	bl	8009f88 <etharp_raw>
 800a0d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	080170f4 	.word	0x080170f4

0800a0e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b082      	sub	sp, #8
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800a0ee:	4a05      	ldr	r2, [pc, #20]	@ (800a104 <etharp_request+0x20>)
 800a0f0:	6839      	ldr	r1, [r7, #0]
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff ffd4 	bl	800a0a0 <etharp_request_dst>
 800a0f8:	4603      	mov	r3, r0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
 800a102:	bf00      	nop
 800a104:	080170ec 	.word	0x080170ec

0800a108 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800a112:	230e      	movs	r3, #14
 800a114:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	895b      	ldrh	r3, [r3, #10]
 800a11a:	2b0e      	cmp	r3, #14
 800a11c:	d96e      	bls.n	800a1fc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	7bdb      	ldrb	r3, [r3, #15]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d106      	bne.n	800a134 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a12c:	3301      	adds	r3, #1
 800a12e:	b2da      	uxtb	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	7b1a      	ldrb	r2, [r3, #12]
 800a13e:	7b5b      	ldrb	r3, [r3, #13]
 800a140:	021b      	lsls	r3, r3, #8
 800a142:	4313      	orrs	r3, r2
 800a144:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a146:	693b      	ldr	r3, [r7, #16]
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	f003 0301 	and.w	r3, r3, #1
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d023      	beq.n	800a19a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a152:	693b      	ldr	r3, [r7, #16]
 800a154:	781b      	ldrb	r3, [r3, #0]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d10f      	bne.n	800a17a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	785b      	ldrb	r3, [r3, #1]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d11b      	bne.n	800a19a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800a162:	693b      	ldr	r3, [r7, #16]
 800a164:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a166:	2b5e      	cmp	r3, #94	@ 0x5e
 800a168:	d117      	bne.n	800a19a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	7b5b      	ldrb	r3, [r3, #13]
 800a16e:	f043 0310 	orr.w	r3, r3, #16
 800a172:	b2da      	uxtb	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	735a      	strb	r2, [r3, #13]
 800a178:	e00f      	b.n	800a19a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2206      	movs	r2, #6
 800a17e:	4928      	ldr	r1, [pc, #160]	@ (800a220 <ethernet_input+0x118>)
 800a180:	4618      	mov	r0, r3
 800a182:	f009 fa0a 	bl	801359a <memcmp>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d106      	bne.n	800a19a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	7b5b      	ldrb	r3, [r3, #13]
 800a190:	f043 0308 	orr.w	r3, r3, #8
 800a194:	b2da      	uxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800a19a:	89fb      	ldrh	r3, [r7, #14]
 800a19c:	2b08      	cmp	r3, #8
 800a19e:	d003      	beq.n	800a1a8 <ethernet_input+0xa0>
 800a1a0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800a1a4:	d014      	beq.n	800a1d0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800a1a6:	e032      	b.n	800a20e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a1ae:	f003 0308 	and.w	r3, r3, #8
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d024      	beq.n	800a200 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a1b6:	8afb      	ldrh	r3, [r7, #22]
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f002 fe58 	bl	800ce70 <pbuf_remove_header>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d11e      	bne.n	800a204 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800a1c6:	6839      	ldr	r1, [r7, #0]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f000 fab3 	bl	800a734 <ip4_input>
      break;
 800a1ce:	e013      	b.n	800a1f8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d014      	beq.n	800a208 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800a1de:	8afb      	ldrh	r3, [r7, #22]
 800a1e0:	4619      	mov	r1, r3
 800a1e2:	6878      	ldr	r0, [r7, #4]
 800a1e4:	f002 fe44 	bl	800ce70 <pbuf_remove_header>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d10e      	bne.n	800a20c <ethernet_input+0x104>
        etharp_input(p, netif);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f7ff fb65 	bl	80098c0 <etharp_input>
      break;
 800a1f6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	e00c      	b.n	800a216 <ethernet_input+0x10e>
    goto free_and_return;
 800a1fc:	bf00      	nop
 800a1fe:	e006      	b.n	800a20e <ethernet_input+0x106>
        goto free_and_return;
 800a200:	bf00      	nop
 800a202:	e004      	b.n	800a20e <ethernet_input+0x106>
        goto free_and_return;
 800a204:	bf00      	nop
 800a206:	e002      	b.n	800a20e <ethernet_input+0x106>
        goto free_and_return;
 800a208:	bf00      	nop
 800a20a:	e000      	b.n	800a20e <ethernet_input+0x106>
        goto free_and_return;
 800a20c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f002 feb4 	bl	800cf7c <pbuf_free>
  return ERR_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3718      	adds	r7, #24
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}
 800a21e:	bf00      	nop
 800a220:	080170ec 	.word	0x080170ec

0800a224 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b086      	sub	sp, #24
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
 800a230:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a232:	8c3b      	ldrh	r3, [r7, #32]
 800a234:	4618      	mov	r0, r3
 800a236:	f7fe ffed 	bl	8009214 <lwip_htons>
 800a23a:	4603      	mov	r3, r0
 800a23c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800a23e:	210e      	movs	r1, #14
 800a240:	68b8      	ldr	r0, [r7, #8]
 800a242:	f002 fe05 	bl	800ce50 <pbuf_add_header>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d125      	bne.n	800a298 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	8afa      	ldrh	r2, [r7, #22]
 800a256:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	2206      	movs	r2, #6
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	4618      	mov	r0, r3
 800a260:	f009 fa21 	bl	80136a6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	3306      	adds	r3, #6
 800a268:	2206      	movs	r2, #6
 800a26a:	6879      	ldr	r1, [r7, #4]
 800a26c:	4618      	mov	r0, r3
 800a26e:	f009 fa1a 	bl	80136a6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a278:	2b06      	cmp	r3, #6
 800a27a:	d006      	beq.n	800a28a <ethernet_output+0x66>
 800a27c:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a8 <ethernet_output+0x84>)
 800a27e:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800a282:	490a      	ldr	r1, [pc, #40]	@ (800a2ac <ethernet_output+0x88>)
 800a284:	480a      	ldr	r0, [pc, #40]	@ (800a2b0 <ethernet_output+0x8c>)
 800a286:	f009 f933 	bl	80134f0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	699b      	ldr	r3, [r3, #24]
 800a28e:	68b9      	ldr	r1, [r7, #8]
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	4798      	blx	r3
 800a294:	4603      	mov	r3, r0
 800a296:	e002      	b.n	800a29e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800a298:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800a29a:	f06f 0301 	mvn.w	r3, #1
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3718      	adds	r7, #24
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	08014648 	.word	0x08014648
 800a2ac:	080146a8 	.word	0x080146a8
 800a2b0:	080146dc 	.word	0x080146dc

0800a2b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08e      	sub	sp, #56	@ 0x38
 800a2b8:	af04      	add	r7, sp, #16
 800a2ba:	6078      	str	r0, [r7, #4]
 800a2bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800a2be:	4b79      	ldr	r3, [pc, #484]	@ (800a4a4 <icmp_input+0x1f0>)
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	009b      	lsls	r3, r3, #2
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800a2d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a2d6:	2b13      	cmp	r3, #19
 800a2d8:	f240 80cd 	bls.w	800a476 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	895b      	ldrh	r3, [r3, #10]
 800a2e0:	2b03      	cmp	r3, #3
 800a2e2:	f240 80ca 	bls.w	800a47a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800a2f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	f000 80b7 	beq.w	800a468 <icmp_input+0x1b4>
 800a2fa:	2b08      	cmp	r3, #8
 800a2fc:	f040 80b7 	bne.w	800a46e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800a300:	4b69      	ldr	r3, [pc, #420]	@ (800a4a8 <icmp_input+0x1f4>)
 800a302:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a304:	4b67      	ldr	r3, [pc, #412]	@ (800a4a4 <icmp_input+0x1f0>)
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a30c:	2be0      	cmp	r3, #224	@ 0xe0
 800a30e:	f000 80bb 	beq.w	800a488 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800a312:	4b64      	ldr	r3, [pc, #400]	@ (800a4a4 <icmp_input+0x1f0>)
 800a314:	695b      	ldr	r3, [r3, #20]
 800a316:	4a63      	ldr	r2, [pc, #396]	@ (800a4a4 <icmp_input+0x1f0>)
 800a318:	6812      	ldr	r2, [r2, #0]
 800a31a:	4611      	mov	r1, r2
 800a31c:	4618      	mov	r0, r3
 800a31e:	f000 fc05 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 800a322:	4603      	mov	r3, r0
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 80b1 	bne.w	800a48c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	891b      	ldrh	r3, [r3, #8]
 800a32e:	2b07      	cmp	r3, #7
 800a330:	f240 80a5 	bls.w	800a47e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a334:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a336:	330e      	adds	r3, #14
 800a338:	4619      	mov	r1, r3
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f002 fd88 	bl	800ce50 <pbuf_add_header>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d04b      	beq.n	800a3de <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	891a      	ldrh	r2, [r3, #8]
 800a34a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a34c:	4413      	add	r3, r2
 800a34e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	891b      	ldrh	r3, [r3, #8]
 800a354:	8b7a      	ldrh	r2, [r7, #26]
 800a356:	429a      	cmp	r2, r3
 800a358:	f0c0 809a 	bcc.w	800a490 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800a35c:	8b7b      	ldrh	r3, [r7, #26]
 800a35e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a362:	4619      	mov	r1, r3
 800a364:	200e      	movs	r0, #14
 800a366:	f002 fb25 	bl	800c9b4 <pbuf_alloc>
 800a36a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8090 	beq.w	800a494 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	895b      	ldrh	r3, [r3, #10]
 800a378:	461a      	mov	r2, r3
 800a37a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a37c:	3308      	adds	r3, #8
 800a37e:	429a      	cmp	r2, r3
 800a380:	d203      	bcs.n	800a38a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800a382:	6978      	ldr	r0, [r7, #20]
 800a384:	f002 fdfa 	bl	800cf7c <pbuf_free>
          goto icmperr;
 800a388:	e085      	b.n	800a496 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800a390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a392:	4618      	mov	r0, r3
 800a394:	f009 f987 	bl	80136a6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800a398:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a39a:	4619      	mov	r1, r3
 800a39c:	6978      	ldr	r0, [r7, #20]
 800a39e:	f002 fd67 	bl	800ce70 <pbuf_remove_header>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d009      	beq.n	800a3bc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800a3a8:	4b40      	ldr	r3, [pc, #256]	@ (800a4ac <icmp_input+0x1f8>)
 800a3aa:	22b6      	movs	r2, #182	@ 0xb6
 800a3ac:	4940      	ldr	r1, [pc, #256]	@ (800a4b0 <icmp_input+0x1fc>)
 800a3ae:	4841      	ldr	r0, [pc, #260]	@ (800a4b4 <icmp_input+0x200>)
 800a3b0:	f009 f89e 	bl	80134f0 <iprintf>
          pbuf_free(r);
 800a3b4:	6978      	ldr	r0, [r7, #20]
 800a3b6:	f002 fde1 	bl	800cf7c <pbuf_free>
          goto icmperr;
 800a3ba:	e06c      	b.n	800a496 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	6978      	ldr	r0, [r7, #20]
 800a3c0:	f002 ff00 	bl	800d1c4 <pbuf_copy>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d003      	beq.n	800a3d2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800a3ca:	6978      	ldr	r0, [r7, #20]
 800a3cc:	f002 fdd6 	bl	800cf7c <pbuf_free>
          goto icmperr;
 800a3d0:	e061      	b.n	800a496 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f002 fdd2 	bl	800cf7c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	607b      	str	r3, [r7, #4]
 800a3dc:	e00f      	b.n	800a3fe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800a3de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a3e0:	330e      	adds	r3, #14
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f002 fd43 	bl	800ce70 <pbuf_remove_header>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d006      	beq.n	800a3fe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800a3f0:	4b2e      	ldr	r3, [pc, #184]	@ (800a4ac <icmp_input+0x1f8>)
 800a3f2:	22c7      	movs	r2, #199	@ 0xc7
 800a3f4:	4930      	ldr	r1, [pc, #192]	@ (800a4b8 <icmp_input+0x204>)
 800a3f6:	482f      	ldr	r0, [pc, #188]	@ (800a4b4 <icmp_input+0x200>)
 800a3f8:	f009 f87a 	bl	80134f0 <iprintf>
          goto icmperr;
 800a3fc:	e04b      	b.n	800a496 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800a404:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a406:	4619      	mov	r1, r3
 800a408:	6878      	ldr	r0, [r7, #4]
 800a40a:	f002 fd21 	bl	800ce50 <pbuf_add_header>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d12b      	bne.n	800a46c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a422:	4b20      	ldr	r3, [pc, #128]	@ (800a4a4 <icmp_input+0x1f0>)
 800a424:	691a      	ldr	r2, [r3, #16]
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	2200      	movs	r2, #0
 800a42e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	2200      	movs	r2, #0
 800a434:	709a      	strb	r2, [r3, #2]
 800a436:	2200      	movs	r2, #0
 800a438:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	22ff      	movs	r2, #255	@ 0xff
 800a43e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	729a      	strb	r2, [r3, #10]
 800a446:	2200      	movs	r2, #0
 800a448:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	9302      	str	r3, [sp, #8]
 800a44e:	2301      	movs	r3, #1
 800a450:	9301      	str	r3, [sp, #4]
 800a452:	2300      	movs	r3, #0
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	23ff      	movs	r3, #255	@ 0xff
 800a458:	2200      	movs	r2, #0
 800a45a:	69f9      	ldr	r1, [r7, #28]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 fa8d 	bl	800a97c <ip4_output_if>
 800a462:	4603      	mov	r3, r0
 800a464:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800a466:	e001      	b.n	800a46c <icmp_input+0x1b8>
      break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <icmp_input+0x1ba>
      break;
 800a46c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f002 fd84 	bl	800cf7c <pbuf_free>
  return;
 800a474:	e013      	b.n	800a49e <icmp_input+0x1ea>
    goto lenerr;
 800a476:	bf00      	nop
 800a478:	e002      	b.n	800a480 <icmp_input+0x1cc>
    goto lenerr;
 800a47a:	bf00      	nop
 800a47c:	e000      	b.n	800a480 <icmp_input+0x1cc>
        goto lenerr;
 800a47e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f002 fd7b 	bl	800cf7c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a486:	e00a      	b.n	800a49e <icmp_input+0x1ea>
        goto icmperr;
 800a488:	bf00      	nop
 800a48a:	e004      	b.n	800a496 <icmp_input+0x1e2>
        goto icmperr;
 800a48c:	bf00      	nop
 800a48e:	e002      	b.n	800a496 <icmp_input+0x1e2>
          goto icmperr;
 800a490:	bf00      	nop
 800a492:	e000      	b.n	800a496 <icmp_input+0x1e2>
          goto icmperr;
 800a494:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f002 fd70 	bl	800cf7c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a49c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a49e:	3728      	adds	r7, #40	@ 0x28
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	24005368 	.word	0x24005368
 800a4a8:	2400537c 	.word	0x2400537c
 800a4ac:	08014704 	.word	0x08014704
 800a4b0:	08014764 	.word	0x08014764
 800a4b4:	0801479c 	.word	0x0801479c
 800a4b8:	080147c4 	.word	0x080147c4

0800a4bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b082      	sub	sp, #8
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	2103      	movs	r1, #3
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f814 	bl	800a4fc <icmp_send_response>
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b082      	sub	sp, #8
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a4e8:	78fb      	ldrb	r3, [r7, #3]
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	210b      	movs	r1, #11
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f804 	bl	800a4fc <icmp_send_response>
}
 800a4f4:	bf00      	nop
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}

0800a4fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08c      	sub	sp, #48	@ 0x30
 800a500:	af04      	add	r7, sp, #16
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	460b      	mov	r3, r1
 800a506:	70fb      	strb	r3, [r7, #3]
 800a508:	4613      	mov	r3, r2
 800a50a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a50c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a510:	2124      	movs	r1, #36	@ 0x24
 800a512:	2022      	movs	r0, #34	@ 0x22
 800a514:	f002 fa4e 	bl	800c9b4 <pbuf_alloc>
 800a518:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d04c      	beq.n	800a5ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	895b      	ldrh	r3, [r3, #10]
 800a524:	2b23      	cmp	r3, #35	@ 0x23
 800a526:	d806      	bhi.n	800a536 <icmp_send_response+0x3a>
 800a528:	4b26      	ldr	r3, [pc, #152]	@ (800a5c4 <icmp_send_response+0xc8>)
 800a52a:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800a52e:	4926      	ldr	r1, [pc, #152]	@ (800a5c8 <icmp_send_response+0xcc>)
 800a530:	4826      	ldr	r0, [pc, #152]	@ (800a5cc <icmp_send_response+0xd0>)
 800a532:	f008 ffdd 	bl	80134f0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	78fa      	ldrb	r2, [r7, #3]
 800a546:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	78ba      	ldrb	r2, [r7, #2]
 800a54c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	2200      	movs	r2, #0
 800a552:	711a      	strb	r2, [r3, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2200      	movs	r2, #0
 800a55c:	719a      	strb	r2, [r3, #6]
 800a55e:	2200      	movs	r2, #0
 800a560:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	f103 0008 	add.w	r0, r3, #8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	221c      	movs	r2, #28
 800a570:	4619      	mov	r1, r3
 800a572:	f009 f898 	bl	80136a6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a57c:	f107 030c 	add.w	r3, r7, #12
 800a580:	4618      	mov	r0, r3
 800a582:	f000 f83d 	bl	800a600 <ip4_route>
 800a586:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d011      	beq.n	800a5b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	2200      	movs	r2, #0
 800a592:	709a      	strb	r2, [r3, #2]
 800a594:	2200      	movs	r2, #0
 800a596:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a598:	f107 020c 	add.w	r2, r7, #12
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	9302      	str	r3, [sp, #8]
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	9300      	str	r3, [sp, #0]
 800a5a8:	23ff      	movs	r3, #255	@ 0xff
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	69f8      	ldr	r0, [r7, #28]
 800a5ae:	f000 f9e5 	bl	800a97c <ip4_output_if>
  }
  pbuf_free(q);
 800a5b2:	69f8      	ldr	r0, [r7, #28]
 800a5b4:	f002 fce2 	bl	800cf7c <pbuf_free>
 800a5b8:	e000      	b.n	800a5bc <icmp_send_response+0xc0>
    return;
 800a5ba:	bf00      	nop
}
 800a5bc:	3720      	adds	r7, #32
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	08014704 	.word	0x08014704
 800a5c8:	080147f8 	.word	0x080147f8
 800a5cc:	0801479c 	.word	0x0801479c

0800a5d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a5da:	f002 ffdf 	bl	800d59c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a5de:	f001 f9eb 	bl	800b9b8 <mem_init>
  memp_init();
 800a5e2:	f001 fd43 	bl	800c06c <memp_init>
  pbuf_init();
  netif_init();
 800a5e6:	f001 fe4f 	bl	800c288 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a5ea:	f008 fcc7 	bl	8012f7c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a5ee:	f003 f851 	bl	800d694 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a5f2:	f008 fc09 	bl	8012e08 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a5f6:	bf00      	nop
 800a5f8:	3708      	adds	r7, #8
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800a608:	4b33      	ldr	r3, [pc, #204]	@ (800a6d8 <ip4_route+0xd8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	e036      	b.n	800a67e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a616:	f003 0301 	and.w	r3, r3, #1
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d02b      	beq.n	800a678 <ip4_route+0x78>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a626:	089b      	lsrs	r3, r3, #2
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d022      	beq.n	800a678 <ip4_route+0x78>
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	3304      	adds	r3, #4
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01d      	beq.n	800a678 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681a      	ldr	r2, [r3, #0]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	3304      	adds	r3, #4
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	405a      	eors	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3308      	adds	r3, #8
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4013      	ands	r3, r2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	e038      	b.n	800a6ca <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a65e:	f003 0302 	and.w	r3, r3, #2
 800a662:	2b00      	cmp	r3, #0
 800a664:	d108      	bne.n	800a678 <ip4_route+0x78>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	330c      	adds	r3, #12
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	429a      	cmp	r2, r3
 800a672:	d101      	bne.n	800a678 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	e028      	b.n	800a6ca <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	60fb      	str	r3, [r7, #12]
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d1c5      	bne.n	800a610 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a684:	4b15      	ldr	r3, [pc, #84]	@ (800a6dc <ip4_route+0xdc>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d01a      	beq.n	800a6c2 <ip4_route+0xc2>
 800a68c:	4b13      	ldr	r3, [pc, #76]	@ (800a6dc <ip4_route+0xdc>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d012      	beq.n	800a6c2 <ip4_route+0xc2>
 800a69c:	4b0f      	ldr	r3, [pc, #60]	@ (800a6dc <ip4_route+0xdc>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d00a      	beq.n	800a6c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a6ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a6dc <ip4_route+0xdc>)
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d004      	beq.n	800a6c2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6c0:	d101      	bne.n	800a6c6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	e001      	b.n	800a6ca <ip4_route+0xca>
  }

  return netif_default;
 800a6c6:	4b05      	ldr	r3, [pc, #20]	@ (800a6dc <ip4_route+0xdc>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3714      	adds	r7, #20
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr
 800a6d6:	bf00      	nop
 800a6d8:	24008468 	.word	0x24008468
 800a6dc:	2400846c 	.word	0x2400846c

0800a6e0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a6ee:	f003 0301 	and.w	r3, r3, #1
 800a6f2:	b2db      	uxtb	r3, r3
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d016      	beq.n	800a726 <ip4_input_accept+0x46>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d011      	beq.n	800a726 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a702:	4b0b      	ldr	r3, [pc, #44]	@ (800a730 <ip4_input_accept+0x50>)
 800a704:	695a      	ldr	r2, [r3, #20]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3304      	adds	r3, #4
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d008      	beq.n	800a722 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a710:	4b07      	ldr	r3, [pc, #28]	@ (800a730 <ip4_input_accept+0x50>)
 800a712:	695b      	ldr	r3, [r3, #20]
 800a714:	6879      	ldr	r1, [r7, #4]
 800a716:	4618      	mov	r0, r3
 800a718:	f000 fa08 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 800a71c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	24005368 	.word	0x24005368

0800a734 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b086      	sub	sp, #24
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	781b      	ldrb	r3, [r3, #0]
 800a748:	091b      	lsrs	r3, r3, #4
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d004      	beq.n	800a75a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f002 fc13 	bl	800cf7c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a756:	2300      	movs	r3, #0
 800a758:	e107      	b.n	800a96a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	f003 030f 	and.w	r3, r3, #15
 800a762:	b2db      	uxtb	r3, r3
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	b2db      	uxtb	r3, r3
 800a768:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	885b      	ldrh	r3, [r3, #2]
 800a76e:	b29b      	uxth	r3, r3
 800a770:	4618      	mov	r0, r3
 800a772:	f7fe fd4f 	bl	8009214 <lwip_htons>
 800a776:	4603      	mov	r3, r0
 800a778:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	891b      	ldrh	r3, [r3, #8]
 800a77e:	89ba      	ldrh	r2, [r7, #12]
 800a780:	429a      	cmp	r2, r3
 800a782:	d204      	bcs.n	800a78e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800a784:	89bb      	ldrh	r3, [r7, #12]
 800a786:	4619      	mov	r1, r3
 800a788:	6878      	ldr	r0, [r7, #4]
 800a78a:	f002 fa71 	bl	800cc70 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	895b      	ldrh	r3, [r3, #10]
 800a792:	89fa      	ldrh	r2, [r7, #14]
 800a794:	429a      	cmp	r2, r3
 800a796:	d807      	bhi.n	800a7a8 <ip4_input+0x74>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	891b      	ldrh	r3, [r3, #8]
 800a79c:	89ba      	ldrh	r2, [r7, #12]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d802      	bhi.n	800a7a8 <ip4_input+0x74>
 800a7a2:	89fb      	ldrh	r3, [r7, #14]
 800a7a4:	2b13      	cmp	r3, #19
 800a7a6:	d804      	bhi.n	800a7b2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f002 fbe7 	bl	800cf7c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	e0db      	b.n	800a96a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	691b      	ldr	r3, [r3, #16]
 800a7b6:	4a6f      	ldr	r2, [pc, #444]	@ (800a974 <ip4_input+0x240>)
 800a7b8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	4a6d      	ldr	r2, [pc, #436]	@ (800a974 <ip4_input+0x240>)
 800a7c0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a7c2:	4b6c      	ldr	r3, [pc, #432]	@ (800a974 <ip4_input+0x240>)
 800a7c4:	695b      	ldr	r3, [r3, #20]
 800a7c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a7ca:	2be0      	cmp	r3, #224	@ 0xe0
 800a7cc:	d112      	bne.n	800a7f4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d007      	beq.n	800a7ee <ip4_input+0xba>
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	3304      	adds	r3, #4
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d002      	beq.n	800a7ee <ip4_input+0xba>
      netif = inp;
 800a7e8:	683b      	ldr	r3, [r7, #0]
 800a7ea:	613b      	str	r3, [r7, #16]
 800a7ec:	e02a      	b.n	800a844 <ip4_input+0x110>
    } else {
      netif = NULL;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	e027      	b.n	800a844 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800a7f4:	6838      	ldr	r0, [r7, #0]
 800a7f6:	f7ff ff73 	bl	800a6e0 <ip4_input_accept>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d002      	beq.n	800a806 <ip4_input+0xd2>
      netif = inp;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	613b      	str	r3, [r7, #16]
 800a804:	e01e      	b.n	800a844 <ip4_input+0x110>
    } else {
      netif = NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800a80a:	4b5a      	ldr	r3, [pc, #360]	@ (800a974 <ip4_input+0x240>)
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	2b7f      	cmp	r3, #127	@ 0x7f
 800a812:	d017      	beq.n	800a844 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800a814:	4b58      	ldr	r3, [pc, #352]	@ (800a978 <ip4_input+0x244>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	e00e      	b.n	800a83a <ip4_input+0x106>
          if (netif == inp) {
 800a81c:	693a      	ldr	r2, [r7, #16]
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	429a      	cmp	r2, r3
 800a822:	d006      	beq.n	800a832 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800a824:	6938      	ldr	r0, [r7, #16]
 800a826:	f7ff ff5b 	bl	800a6e0 <ip4_input_accept>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d108      	bne.n	800a842 <ip4_input+0x10e>
 800a830:	e000      	b.n	800a834 <ip4_input+0x100>
            continue;
 800a832:	bf00      	nop
        NETIF_FOREACH(netif) {
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	613b      	str	r3, [r7, #16]
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d1ed      	bne.n	800a81c <ip4_input+0xe8>
 800a840:	e000      	b.n	800a844 <ip4_input+0x110>
            break;
 800a842:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a844:	4b4b      	ldr	r3, [pc, #300]	@ (800a974 <ip4_input+0x240>)
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 f96e 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d105      	bne.n	800a862 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a856:	4b47      	ldr	r3, [pc, #284]	@ (800a974 <ip4_input+0x240>)
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a85e:	2be0      	cmp	r3, #224	@ 0xe0
 800a860:	d104      	bne.n	800a86c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f002 fb8a 	bl	800cf7c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	e07e      	b.n	800a96a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a872:	6878      	ldr	r0, [r7, #4]
 800a874:	f002 fb82 	bl	800cf7c <pbuf_free>
    return ERR_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	e076      	b.n	800a96a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	88db      	ldrh	r3, [r3, #6]
 800a880:	b29b      	uxth	r3, r3
 800a882:	461a      	mov	r2, r3
 800a884:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800a888:	4013      	ands	r3, r2
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00b      	beq.n	800a8a6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fc92 	bl	800b1b8 <ip4_reass>
 800a894:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d101      	bne.n	800a8a0 <ip4_input+0x16c>
      return ERR_OK;
 800a89c:	2300      	movs	r3, #0
 800a89e:	e064      	b.n	800a96a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a8a6:	4a33      	ldr	r2, [pc, #204]	@ (800a974 <ip4_input+0x240>)
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a8ac:	4a31      	ldr	r2, [pc, #196]	@ (800a974 <ip4_input+0x240>)
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a8b2:	4a30      	ldr	r2, [pc, #192]	@ (800a974 <ip4_input+0x240>)
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	f003 030f 	and.w	r3, r3, #15
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b2a      	ldr	r3, [pc, #168]	@ (800a974 <ip4_input+0x240>)
 800a8ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800a8cc:	89fb      	ldrh	r3, [r7, #14]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f002 facd 	bl	800ce70 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	7a5b      	ldrb	r3, [r3, #9]
 800a8da:	2b11      	cmp	r3, #17
 800a8dc:	d006      	beq.n	800a8ec <ip4_input+0x1b8>
 800a8de:	2b11      	cmp	r3, #17
 800a8e0:	dc13      	bgt.n	800a90a <ip4_input+0x1d6>
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d00c      	beq.n	800a900 <ip4_input+0x1cc>
 800a8e6:	2b06      	cmp	r3, #6
 800a8e8:	d005      	beq.n	800a8f6 <ip4_input+0x1c2>
 800a8ea:	e00e      	b.n	800a90a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f008 fbba 	bl	8013068 <udp_input>
        break;
 800a8f4:	e026      	b.n	800a944 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f004 fa67 	bl	800edcc <tcp_input>
        break;
 800a8fe:	e021      	b.n	800a944 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7ff fcd6 	bl	800a2b4 <icmp_input>
        break;
 800a908:	e01c      	b.n	800a944 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a90a:	4b1a      	ldr	r3, [pc, #104]	@ (800a974 <ip4_input+0x240>)
 800a90c:	695b      	ldr	r3, [r3, #20]
 800a90e:	6939      	ldr	r1, [r7, #16]
 800a910:	4618      	mov	r0, r3
 800a912:	f000 f90b 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 800a916:	4603      	mov	r3, r0
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10f      	bne.n	800a93c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a91c:	4b15      	ldr	r3, [pc, #84]	@ (800a974 <ip4_input+0x240>)
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a924:	2be0      	cmp	r3, #224	@ 0xe0
 800a926:	d009      	beq.n	800a93c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800a928:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a92c:	4619      	mov	r1, r3
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f002 fb11 	bl	800cf56 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a934:	2102      	movs	r1, #2
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f7ff fdc0 	bl	800a4bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f002 fb1d 	bl	800cf7c <pbuf_free>
        break;
 800a942:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a944:	4b0b      	ldr	r3, [pc, #44]	@ (800a974 <ip4_input+0x240>)
 800a946:	2200      	movs	r2, #0
 800a948:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a94a:	4b0a      	ldr	r3, [pc, #40]	@ (800a974 <ip4_input+0x240>)
 800a94c:	2200      	movs	r2, #0
 800a94e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a950:	4b08      	ldr	r3, [pc, #32]	@ (800a974 <ip4_input+0x240>)
 800a952:	2200      	movs	r2, #0
 800a954:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a956:	4b07      	ldr	r3, [pc, #28]	@ (800a974 <ip4_input+0x240>)
 800a958:	2200      	movs	r2, #0
 800a95a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a95c:	4b05      	ldr	r3, [pc, #20]	@ (800a974 <ip4_input+0x240>)
 800a95e:	2200      	movs	r2, #0
 800a960:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a962:	4b04      	ldr	r3, [pc, #16]	@ (800a974 <ip4_input+0x240>)
 800a964:	2200      	movs	r2, #0
 800a966:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3718      	adds	r7, #24
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}
 800a972:	bf00      	nop
 800a974:	24005368 	.word	0x24005368
 800a978:	24008468 	.word	0x24008468

0800a97c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08a      	sub	sp, #40	@ 0x28
 800a980:	af04      	add	r7, sp, #16
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
 800a988:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d009      	beq.n	800a9a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <ip4_output_if+0x26>
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a9a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a9a8:	78fa      	ldrb	r2, [r7, #3]
 800a9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ac:	9302      	str	r3, [sp, #8]
 800a9ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a9b2:	9301      	str	r3, [sp, #4]
 800a9b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	6979      	ldr	r1, [r7, #20]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	f000 f805 	bl	800a9d0 <ip4_output_if_src>
 800a9c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	7b9b      	ldrb	r3, [r3, #14]
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d006      	beq.n	800a9f4 <ip4_output_if_src+0x24>
 800a9e6:	4b4b      	ldr	r3, [pc, #300]	@ (800ab14 <ip4_output_if_src+0x144>)
 800a9e8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800a9ec:	494a      	ldr	r1, [pc, #296]	@ (800ab18 <ip4_output_if_src+0x148>)
 800a9ee:	484b      	ldr	r0, [pc, #300]	@ (800ab1c <ip4_output_if_src+0x14c>)
 800a9f0:	f008 fd7e 	bl	80134f0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d060      	beq.n	800aabc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a9fa:	2314      	movs	r3, #20
 800a9fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800a9fe:	2114      	movs	r1, #20
 800aa00:	68f8      	ldr	r0, [r7, #12]
 800aa02:	f002 fa25 	bl	800ce50 <pbuf_add_header>
 800aa06:	4603      	mov	r3, r0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800aa0c:	f06f 0301 	mvn.w	r3, #1
 800aa10:	e07c      	b.n	800ab0c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	895b      	ldrh	r3, [r3, #10]
 800aa1c:	2b13      	cmp	r3, #19
 800aa1e:	d806      	bhi.n	800aa2e <ip4_output_if_src+0x5e>
 800aa20:	4b3c      	ldr	r3, [pc, #240]	@ (800ab14 <ip4_output_if_src+0x144>)
 800aa22:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800aa26:	493e      	ldr	r1, [pc, #248]	@ (800ab20 <ip4_output_if_src+0x150>)
 800aa28:	483c      	ldr	r0, [pc, #240]	@ (800ab1c <ip4_output_if_src+0x14c>)
 800aa2a:	f008 fd61 	bl	80134f0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	78fa      	ldrb	r2, [r7, #3]
 800aa32:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800aa3a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	69fb      	ldr	r3, [r7, #28]
 800aa42:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800aa44:	8b7b      	ldrh	r3, [r7, #26]
 800aa46:	089b      	lsrs	r3, r3, #2
 800aa48:	b29b      	uxth	r3, r3
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	69fb      	ldr	r3, [r7, #28]
 800aa54:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800aa5c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	891b      	ldrh	r3, [r3, #8]
 800aa62:	4618      	mov	r0, r3
 800aa64:	f7fe fbd6 	bl	8009214 <lwip_htons>
 800aa68:	4603      	mov	r3, r0
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	69fb      	ldr	r3, [r7, #28]
 800aa6e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	2200      	movs	r2, #0
 800aa74:	719a      	strb	r2, [r3, #6]
 800aa76:	2200      	movs	r2, #0
 800aa78:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800aa7a:	4b2a      	ldr	r3, [pc, #168]	@ (800ab24 <ip4_output_if_src+0x154>)
 800aa7c:	881b      	ldrh	r3, [r3, #0]
 800aa7e:	4618      	mov	r0, r3
 800aa80:	f7fe fbc8 	bl	8009214 <lwip_htons>
 800aa84:	4603      	mov	r3, r0
 800aa86:	461a      	mov	r2, r3
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800aa8c:	4b25      	ldr	r3, [pc, #148]	@ (800ab24 <ip4_output_if_src+0x154>)
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b23      	ldr	r3, [pc, #140]	@ (800ab24 <ip4_output_if_src+0x154>)
 800aa96:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d104      	bne.n	800aaa8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800aa9e:	4b22      	ldr	r3, [pc, #136]	@ (800ab28 <ip4_output_if_src+0x158>)
 800aaa0:	681a      	ldr	r2, [r3, #0]
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	60da      	str	r2, [r3, #12]
 800aaa6:	e003      	b.n	800aab0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800aab0:	69fb      	ldr	r3, [r7, #28]
 800aab2:	2200      	movs	r2, #0
 800aab4:	729a      	strb	r2, [r3, #10]
 800aab6:	2200      	movs	r2, #0
 800aab8:	72da      	strb	r2, [r3, #11]
 800aaba:	e00f      	b.n	800aadc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	895b      	ldrh	r3, [r3, #10]
 800aac0:	2b13      	cmp	r3, #19
 800aac2:	d802      	bhi.n	800aaca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800aac4:	f06f 0301 	mvn.w	r3, #1
 800aac8:	e020      	b.n	800ab0c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	691b      	ldr	r3, [r3, #16]
 800aad4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800aad6:	f107 0314 	add.w	r3, r7, #20
 800aada:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00c      	beq.n	800aafe <ip4_output_if_src+0x12e>
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	891a      	ldrh	r2, [r3, #8]
 800aae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d906      	bls.n	800aafe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800aaf0:	687a      	ldr	r2, [r7, #4]
 800aaf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 fd53 	bl	800b5a0 <ip4_frag>
 800aafa:	4603      	mov	r3, r0
 800aafc:	e006      	b.n	800ab0c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800aafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	68f9      	ldr	r1, [r7, #12]
 800ab06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab08:	4798      	blx	r3
 800ab0a:	4603      	mov	r3, r0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3720      	adds	r7, #32
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	08014824 	.word	0x08014824
 800ab18:	08014884 	.word	0x08014884
 800ab1c:	08014890 	.word	0x08014890
 800ab20:	080148b8 	.word	0x080148b8
 800ab24:	24005380 	.word	0x24005380
 800ab28:	080170fc 	.word	0x080170fc

0800ab2c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab40:	d002      	beq.n	800ab48 <ip4_addr_isbroadcast_u32+0x1c>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	e02a      	b.n	800aba2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ab52:	f003 0302 	and.w	r3, r3, #2
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e021      	b.n	800aba2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	3304      	adds	r3, #4
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d101      	bne.n	800ab6e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	e019      	b.n	800aba2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	3304      	adds	r3, #4
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	405a      	eors	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	3308      	adds	r3, #8
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4013      	ands	r3, r2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10d      	bne.n	800aba0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	3308      	adds	r3, #8
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	43da      	mvns	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	3308      	adds	r3, #8
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d101      	bne.n	800aba0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e000      	b.n	800aba2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800aba0:	2300      	movs	r3, #0
  }
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abac:	4770      	bx	lr
	...

0800abb0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b084      	sub	sp, #16
 800abb4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800abb6:	2300      	movs	r3, #0
 800abb8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800abba:	4b12      	ldr	r3, [pc, #72]	@ (800ac04 <ip_reass_tmr+0x54>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800abc0:	e018      	b.n	800abf4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	7fdb      	ldrb	r3, [r3, #31]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00b      	beq.n	800abe2 <ip_reass_tmr+0x32>
      r->timer--;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	7fdb      	ldrb	r3, [r3, #31]
 800abce:	3b01      	subs	r3, #1
 800abd0:	b2da      	uxtb	r2, r3
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	60fb      	str	r3, [r7, #12]
 800abe0:	e008      	b.n	800abf4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 f80a 	bl	800ac08 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1e3      	bne.n	800abc2 <ip_reass_tmr+0x12>
    }
  }
}
 800abfa:	bf00      	nop
 800abfc:	bf00      	nop
 800abfe:	3710      	adds	r7, #16
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	24005384 	.word	0x24005384

0800ac08 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ac16:	683a      	ldr	r2, [r7, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d105      	bne.n	800ac2a <ip_reass_free_complete_datagram+0x22>
 800ac1e:	4b45      	ldr	r3, [pc, #276]	@ (800ad34 <ip_reass_free_complete_datagram+0x12c>)
 800ac20:	22ab      	movs	r2, #171	@ 0xab
 800ac22:	4945      	ldr	r1, [pc, #276]	@ (800ad38 <ip_reass_free_complete_datagram+0x130>)
 800ac24:	4845      	ldr	r0, [pc, #276]	@ (800ad3c <ip_reass_free_complete_datagram+0x134>)
 800ac26:	f008 fc63 	bl	80134f0 <iprintf>
  if (prev != NULL) {
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d005      	beq.n	800ac46 <ip_reass_free_complete_datagram+0x3e>
 800ac3a:	4b3e      	ldr	r3, [pc, #248]	@ (800ad34 <ip_reass_free_complete_datagram+0x12c>)
 800ac3c:	22ad      	movs	r2, #173	@ 0xad
 800ac3e:	4940      	ldr	r1, [pc, #256]	@ (800ad40 <ip_reass_free_complete_datagram+0x138>)
 800ac40:	483e      	ldr	r0, [pc, #248]	@ (800ad3c <ip_reass_free_complete_datagram+0x134>)
 800ac42:	f008 fc55 	bl	80134f0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	889b      	ldrh	r3, [r3, #4]
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d12a      	bne.n	800acae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	6858      	ldr	r0, [r3, #4]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	2214      	movs	r2, #20
 800ac70:	4619      	mov	r1, r3
 800ac72:	f008 fd18 	bl	80136a6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800ac76:	2101      	movs	r1, #1
 800ac78:	69b8      	ldr	r0, [r7, #24]
 800ac7a:	f7ff fc2f 	bl	800a4dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800ac7e:	69b8      	ldr	r0, [r7, #24]
 800ac80:	f002 fa0a 	bl	800d098 <pbuf_clen>
 800ac84:	4603      	mov	r3, r0
 800ac86:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ac88:	8bfa      	ldrh	r2, [r7, #30]
 800ac8a:	8a7b      	ldrh	r3, [r7, #18]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac92:	db05      	blt.n	800aca0 <ip_reass_free_complete_datagram+0x98>
 800ac94:	4b27      	ldr	r3, [pc, #156]	@ (800ad34 <ip_reass_free_complete_datagram+0x12c>)
 800ac96:	22bc      	movs	r2, #188	@ 0xbc
 800ac98:	492a      	ldr	r1, [pc, #168]	@ (800ad44 <ip_reass_free_complete_datagram+0x13c>)
 800ac9a:	4828      	ldr	r0, [pc, #160]	@ (800ad3c <ip_reass_free_complete_datagram+0x134>)
 800ac9c:	f008 fc28 	bl	80134f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800aca0:	8bfa      	ldrh	r2, [r7, #30]
 800aca2:	8a7b      	ldrh	r3, [r7, #18]
 800aca4:	4413      	add	r3, r2
 800aca6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800aca8:	69b8      	ldr	r0, [r7, #24]
 800acaa:	f002 f967 	bl	800cf7c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800acb4:	e01f      	b.n	800acf6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	617b      	str	r3, [r7, #20]
    pcur = p;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f002 f9e6 	bl	800d098 <pbuf_clen>
 800accc:	4603      	mov	r3, r0
 800acce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800acd0:	8bfa      	ldrh	r2, [r7, #30]
 800acd2:	8a7b      	ldrh	r3, [r7, #18]
 800acd4:	4413      	add	r3, r2
 800acd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800acda:	db05      	blt.n	800ace8 <ip_reass_free_complete_datagram+0xe0>
 800acdc:	4b15      	ldr	r3, [pc, #84]	@ (800ad34 <ip_reass_free_complete_datagram+0x12c>)
 800acde:	22cc      	movs	r2, #204	@ 0xcc
 800ace0:	4918      	ldr	r1, [pc, #96]	@ (800ad44 <ip_reass_free_complete_datagram+0x13c>)
 800ace2:	4816      	ldr	r0, [pc, #88]	@ (800ad3c <ip_reass_free_complete_datagram+0x134>)
 800ace4:	f008 fc04 	bl	80134f0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ace8:	8bfa      	ldrh	r2, [r7, #30]
 800acea:	8a7b      	ldrh	r3, [r7, #18]
 800acec:	4413      	add	r3, r2
 800acee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f002 f943 	bl	800cf7c <pbuf_free>
  while (p != NULL) {
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1dc      	bne.n	800acb6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800acfc:	6839      	ldr	r1, [r7, #0]
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f8c2 	bl	800ae88 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ad04:	4b10      	ldr	r3, [pc, #64]	@ (800ad48 <ip_reass_free_complete_datagram+0x140>)
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	8bfa      	ldrh	r2, [r7, #30]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d905      	bls.n	800ad1a <ip_reass_free_complete_datagram+0x112>
 800ad0e:	4b09      	ldr	r3, [pc, #36]	@ (800ad34 <ip_reass_free_complete_datagram+0x12c>)
 800ad10:	22d2      	movs	r2, #210	@ 0xd2
 800ad12:	490e      	ldr	r1, [pc, #56]	@ (800ad4c <ip_reass_free_complete_datagram+0x144>)
 800ad14:	4809      	ldr	r0, [pc, #36]	@ (800ad3c <ip_reass_free_complete_datagram+0x134>)
 800ad16:	f008 fbeb 	bl	80134f0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ad1a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad48 <ip_reass_free_complete_datagram+0x140>)
 800ad1c:	881a      	ldrh	r2, [r3, #0]
 800ad1e:	8bfb      	ldrh	r3, [r7, #30]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	b29a      	uxth	r2, r3
 800ad24:	4b08      	ldr	r3, [pc, #32]	@ (800ad48 <ip_reass_free_complete_datagram+0x140>)
 800ad26:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ad28:	8bfb      	ldrh	r3, [r7, #30]
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3720      	adds	r7, #32
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	080148e8 	.word	0x080148e8
 800ad38:	0801494c 	.word	0x0801494c
 800ad3c:	08014958 	.word	0x08014958
 800ad40:	08014980 	.word	0x08014980
 800ad44:	08014994 	.word	0x08014994
 800ad48:	24005388 	.word	0x24005388
 800ad4c:	080149b4 	.word	0x080149b4

0800ad50 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08a      	sub	sp, #40	@ 0x28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ad62:	2300      	movs	r3, #0
 800ad64:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ad6e:	4b28      	ldr	r3, [pc, #160]	@ (800ae10 <ip_reass_remove_oldest_datagram+0xc0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800ad74:	e030      	b.n	800add8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	695a      	ldr	r2, [r3, #20]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	68db      	ldr	r3, [r3, #12]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d10c      	bne.n	800ad9c <ip_reass_remove_oldest_datagram+0x4c>
 800ad82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad84:	699a      	ldr	r2, [r3, #24]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	d106      	bne.n	800ad9c <ip_reass_remove_oldest_datagram+0x4c>
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	899a      	ldrh	r2, [r3, #12]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	889b      	ldrh	r3, [r3, #4]
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d014      	beq.n	800adc6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d104      	bne.n	800adb2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ada8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adaa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	61bb      	str	r3, [r7, #24]
 800adb0:	e009      	b.n	800adc6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800adb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adb4:	7fda      	ldrb	r2, [r3, #31]
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	7fdb      	ldrb	r3, [r3, #31]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d803      	bhi.n	800adc6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d001      	beq.n	800add2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800add2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800add8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1cb      	bne.n	800ad76 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ade4:	69b9      	ldr	r1, [r7, #24]
 800ade6:	6a38      	ldr	r0, [r7, #32]
 800ade8:	f7ff ff0e 	bl	800ac08 <ip_reass_free_complete_datagram>
 800adec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4413      	add	r3, r2
 800adf4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	da02      	bge.n	800ae04 <ip_reass_remove_oldest_datagram+0xb4>
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	2b01      	cmp	r3, #1
 800ae02:	dcac      	bgt.n	800ad5e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ae04:	697b      	ldr	r3, [r7, #20]
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3728      	adds	r7, #40	@ 0x28
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	24005384 	.word	0x24005384

0800ae14 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ae1e:	2004      	movs	r0, #4
 800ae20:	f001 f992 	bl	800c148 <memp_malloc>
 800ae24:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d110      	bne.n	800ae4e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ae2c:	6839      	ldr	r1, [r7, #0]
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f7ff ff8e 	bl	800ad50 <ip_reass_remove_oldest_datagram>
 800ae34:	4602      	mov	r2, r0
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	4293      	cmp	r3, r2
 800ae3a:	dc03      	bgt.n	800ae44 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ae3c:	2004      	movs	r0, #4
 800ae3e:	f001 f983 	bl	800c148 <memp_malloc>
 800ae42:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d101      	bne.n	800ae4e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	e016      	b.n	800ae7c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ae4e:	2220      	movs	r2, #32
 800ae50:	2100      	movs	r1, #0
 800ae52:	68f8      	ldr	r0, [r7, #12]
 800ae54:	f008 fbb1 	bl	80135ba <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	220f      	movs	r2, #15
 800ae5c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ae5e:	4b09      	ldr	r3, [pc, #36]	@ (800ae84 <ip_reass_enqueue_new_datagram+0x70>)
 800ae60:	681a      	ldr	r2, [r3, #0]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ae66:	4a07      	ldr	r2, [pc, #28]	@ (800ae84 <ip_reass_enqueue_new_datagram+0x70>)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	2214      	movs	r2, #20
 800ae72:	6879      	ldr	r1, [r7, #4]
 800ae74:	4618      	mov	r0, r3
 800ae76:	f008 fc16 	bl	80136a6 <memcpy>
  return ipr;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3710      	adds	r7, #16
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	24005384 	.word	0x24005384

0800ae88 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ae92:	4b10      	ldr	r3, [pc, #64]	@ (800aed4 <ip_reass_dequeue_datagram+0x4c>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d104      	bne.n	800aea6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a0c      	ldr	r2, [pc, #48]	@ (800aed4 <ip_reass_dequeue_datagram+0x4c>)
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	e00d      	b.n	800aec2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d106      	bne.n	800aeba <ip_reass_dequeue_datagram+0x32>
 800aeac:	4b0a      	ldr	r3, [pc, #40]	@ (800aed8 <ip_reass_dequeue_datagram+0x50>)
 800aeae:	f240 1245 	movw	r2, #325	@ 0x145
 800aeb2:	490a      	ldr	r1, [pc, #40]	@ (800aedc <ip_reass_dequeue_datagram+0x54>)
 800aeb4:	480a      	ldr	r0, [pc, #40]	@ (800aee0 <ip_reass_dequeue_datagram+0x58>)
 800aeb6:	f008 fb1b 	bl	80134f0 <iprintf>
    prev->next = ipr->next;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681a      	ldr	r2, [r3, #0]
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800aec2:	6879      	ldr	r1, [r7, #4]
 800aec4:	2004      	movs	r0, #4
 800aec6:	f001 f9b5 	bl	800c234 <memp_free>
}
 800aeca:	bf00      	nop
 800aecc:	3708      	adds	r7, #8
 800aece:	46bd      	mov	sp, r7
 800aed0:	bd80      	pop	{r7, pc}
 800aed2:	bf00      	nop
 800aed4:	24005384 	.word	0x24005384
 800aed8:	080148e8 	.word	0x080148e8
 800aedc:	080149d8 	.word	0x080149d8
 800aee0:	08014958 	.word	0x08014958

0800aee4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b08c      	sub	sp, #48	@ 0x30
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800aef0:	2300      	movs	r3, #0
 800aef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800aef4:	2301      	movs	r3, #1
 800aef6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	885b      	ldrh	r3, [r3, #2]
 800af02:	b29b      	uxth	r3, r3
 800af04:	4618      	mov	r0, r3
 800af06:	f7fe f985 	bl	8009214 <lwip_htons>
 800af0a:	4603      	mov	r3, r0
 800af0c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	f003 030f 	and.w	r3, r3, #15
 800af16:	b2db      	uxtb	r3, r3
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800af1c:	7e7b      	ldrb	r3, [r7, #25]
 800af1e:	b29b      	uxth	r3, r3
 800af20:	8b7a      	ldrh	r2, [r7, #26]
 800af22:	429a      	cmp	r2, r3
 800af24:	d202      	bcs.n	800af2c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800af26:	f04f 33ff 	mov.w	r3, #4294967295
 800af2a:	e135      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800af2c:	7e7b      	ldrb	r3, [r7, #25]
 800af2e:	b29b      	uxth	r3, r3
 800af30:	8b7a      	ldrh	r2, [r7, #26]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	88db      	ldrh	r3, [r3, #6]
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	4618      	mov	r0, r3
 800af3e:	f7fe f969 	bl	8009214 <lwip_htons>
 800af42:	4603      	mov	r3, r0
 800af44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af48:	b29b      	uxth	r3, r3
 800af4a:	00db      	lsls	r3, r3, #3
 800af4c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800af54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	2200      	movs	r2, #0
 800af5c:	705a      	strb	r2, [r3, #1]
 800af5e:	2200      	movs	r2, #0
 800af60:	709a      	strb	r2, [r3, #2]
 800af62:	2200      	movs	r2, #0
 800af64:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800af66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af68:	8afa      	ldrh	r2, [r7, #22]
 800af6a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800af6c:	8afa      	ldrh	r2, [r7, #22]
 800af6e:	8b7b      	ldrh	r3, [r7, #26]
 800af70:	4413      	add	r3, r2
 800af72:	b29a      	uxth	r2, r3
 800af74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af76:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800af78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af7a:	88db      	ldrh	r3, [r3, #6]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	8afa      	ldrh	r2, [r7, #22]
 800af80:	429a      	cmp	r2, r3
 800af82:	d902      	bls.n	800af8a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800af84:	f04f 33ff 	mov.w	r3, #4294967295
 800af88:	e106      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	627b      	str	r3, [r7, #36]	@ 0x24
 800af90:	e068      	b.n	800b064 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800af92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800af98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af9a:	889b      	ldrh	r3, [r3, #4]
 800af9c:	b29a      	uxth	r2, r3
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	889b      	ldrh	r3, [r3, #4]
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d235      	bcs.n	800b014 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800afa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800afac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800afae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d020      	beq.n	800aff6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800afb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb6:	889b      	ldrh	r3, [r3, #4]
 800afb8:	b29a      	uxth	r2, r3
 800afba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afbc:	88db      	ldrh	r3, [r3, #6]
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	429a      	cmp	r2, r3
 800afc2:	d307      	bcc.n	800afd4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800afc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afc6:	88db      	ldrh	r3, [r3, #6]
 800afc8:	b29a      	uxth	r2, r3
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	889b      	ldrh	r3, [r3, #4]
 800afce:	b29b      	uxth	r3, r3
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d902      	bls.n	800afda <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800afd4:	f04f 33ff 	mov.w	r3, #4294967295
 800afd8:	e0de      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800afda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afdc:	68ba      	ldr	r2, [r7, #8]
 800afde:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800afe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe2:	88db      	ldrh	r3, [r3, #6]
 800afe4:	b29a      	uxth	r2, r3
 800afe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe8:	889b      	ldrh	r3, [r3, #4]
 800afea:	b29b      	uxth	r3, r3
 800afec:	429a      	cmp	r2, r3
 800afee:	d03d      	beq.n	800b06c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800aff4:	e03a      	b.n	800b06c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800aff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aff8:	88db      	ldrh	r3, [r3, #6]
 800affa:	b29a      	uxth	r2, r3
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	889b      	ldrh	r3, [r3, #4]
 800b000:	b29b      	uxth	r3, r3
 800b002:	429a      	cmp	r2, r3
 800b004:	d902      	bls.n	800b00c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b006:	f04f 33ff 	mov.w	r3, #4294967295
 800b00a:	e0c5      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68ba      	ldr	r2, [r7, #8]
 800b010:	605a      	str	r2, [r3, #4]
      break;
 800b012:	e02b      	b.n	800b06c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800b014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b016:	889b      	ldrh	r3, [r3, #4]
 800b018:	b29a      	uxth	r2, r3
 800b01a:	693b      	ldr	r3, [r7, #16]
 800b01c:	889b      	ldrh	r3, [r3, #4]
 800b01e:	b29b      	uxth	r3, r3
 800b020:	429a      	cmp	r2, r3
 800b022:	d102      	bne.n	800b02a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b024:	f04f 33ff 	mov.w	r3, #4294967295
 800b028:	e0b6      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800b02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b02c:	889b      	ldrh	r3, [r3, #4]
 800b02e:	b29a      	uxth	r2, r3
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	88db      	ldrh	r3, [r3, #6]
 800b034:	b29b      	uxth	r3, r3
 800b036:	429a      	cmp	r2, r3
 800b038:	d202      	bcs.n	800b040 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800b03a:	f04f 33ff 	mov.w	r3, #4294967295
 800b03e:	e0ab      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800b040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b042:	2b00      	cmp	r3, #0
 800b044:	d009      	beq.n	800b05a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800b046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b048:	88db      	ldrh	r3, [r3, #6]
 800b04a:	b29a      	uxth	r2, r3
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	889b      	ldrh	r3, [r3, #4]
 800b050:	b29b      	uxth	r3, r3
 800b052:	429a      	cmp	r2, r3
 800b054:	d001      	beq.n	800b05a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800b064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b066:	2b00      	cmp	r3, #0
 800b068:	d193      	bne.n	800af92 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800b06a:	e000      	b.n	800b06e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800b06c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800b06e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d12d      	bne.n	800b0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800b074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b076:	2b00      	cmp	r3, #0
 800b078:	d01c      	beq.n	800b0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800b07a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b07c:	88db      	ldrh	r3, [r3, #6]
 800b07e:	b29a      	uxth	r2, r3
 800b080:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b082:	889b      	ldrh	r3, [r3, #4]
 800b084:	b29b      	uxth	r3, r3
 800b086:	429a      	cmp	r2, r3
 800b088:	d906      	bls.n	800b098 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800b08a:	4b45      	ldr	r3, [pc, #276]	@ (800b1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b08c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800b090:	4944      	ldr	r1, [pc, #272]	@ (800b1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800b092:	4845      	ldr	r0, [pc, #276]	@ (800b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b094:	f008 fa2c 	bl	80134f0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800b098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b09a:	68ba      	ldr	r2, [r7, #8]
 800b09c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800b09e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0a0:	88db      	ldrh	r3, [r3, #6]
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a6:	889b      	ldrh	r3, [r3, #4]
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d010      	beq.n	800b0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	623b      	str	r3, [r7, #32]
 800b0b2:	e00d      	b.n	800b0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d006      	beq.n	800b0ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800b0bc:	4b38      	ldr	r3, [pc, #224]	@ (800b1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b0be:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800b0c2:	493a      	ldr	r1, [pc, #232]	@ (800b1ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800b0c4:	4838      	ldr	r0, [pc, #224]	@ (800b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b0c6:	f008 fa13 	bl	80134f0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	68ba      	ldr	r2, [r7, #8]
 800b0ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d105      	bne.n	800b0e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	7f9b      	ldrb	r3, [r3, #30]
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d059      	beq.n	800b196 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800b0e2:	6a3b      	ldr	r3, [r7, #32]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d04f      	beq.n	800b188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d006      	beq.n	800b0fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	889b      	ldrh	r3, [r3, #4]
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d002      	beq.n	800b104 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	623b      	str	r3, [r7, #32]
 800b102:	e041      	b.n	800b188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800b104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b106:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800b108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800b10e:	e012      	b.n	800b136 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	685b      	ldr	r3, [r3, #4]
 800b114:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800b116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b118:	88db      	ldrh	r3, [r3, #6]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b11e:	889b      	ldrh	r3, [r3, #4]
 800b120:	b29b      	uxth	r3, r3
 800b122:	429a      	cmp	r2, r3
 800b124:	d002      	beq.n	800b12c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800b126:	2300      	movs	r3, #0
 800b128:	623b      	str	r3, [r7, #32]
            break;
 800b12a:	e007      	b.n	800b13c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800b12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b12e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800b130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800b136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1e9      	bne.n	800b110 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800b13c:	6a3b      	ldr	r3, [r7, #32]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d022      	beq.n	800b188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d106      	bne.n	800b158 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800b14a:	4b15      	ldr	r3, [pc, #84]	@ (800b1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b14c:	f240 12df 	movw	r2, #479	@ 0x1df
 800b150:	4917      	ldr	r1, [pc, #92]	@ (800b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b152:	4815      	ldr	r0, [pc, #84]	@ (800b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b154:	f008 f9cc 	bl	80134f0 <iprintf>
          LWIP_ASSERT("sanity check",
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b160:	429a      	cmp	r2, r3
 800b162:	d106      	bne.n	800b172 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800b164:	4b0e      	ldr	r3, [pc, #56]	@ (800b1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b166:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b16a:	4911      	ldr	r1, [pc, #68]	@ (800b1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800b16c:	480e      	ldr	r0, [pc, #56]	@ (800b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b16e:	f008 f9bf 	bl	80134f0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800b172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d006      	beq.n	800b188 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800b17a:	4b09      	ldr	r3, [pc, #36]	@ (800b1a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800b17c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800b180:	490c      	ldr	r1, [pc, #48]	@ (800b1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800b182:	4809      	ldr	r0, [pc, #36]	@ (800b1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800b184:	f008 f9b4 	bl	80134f0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800b188:	6a3b      	ldr	r3, [r7, #32]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bf14      	ite	ne
 800b18e:	2301      	movne	r3, #1
 800b190:	2300      	moveq	r3, #0
 800b192:	b2db      	uxtb	r3, r3
 800b194:	e000      	b.n	800b198 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3730      	adds	r7, #48	@ 0x30
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	080148e8 	.word	0x080148e8
 800b1a4:	080149f4 	.word	0x080149f4
 800b1a8:	08014958 	.word	0x08014958
 800b1ac:	08014a14 	.word	0x08014a14
 800b1b0:	08014a4c 	.word	0x08014a4c
 800b1b4:	08014a5c 	.word	0x08014a5c

0800b1b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b08e      	sub	sp, #56	@ 0x38
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800b1c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	f003 030f 	and.w	r3, r3, #15
 800b1ce:	b2db      	uxtb	r3, r3
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b14      	cmp	r3, #20
 800b1d6:	f040 8171 	bne.w	800b4bc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800b1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1dc:	88db      	ldrh	r3, [r3, #6]
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fe f817 	bl	8009214 <lwip_htons>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	00db      	lsls	r3, r3, #3
 800b1f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800b1f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f4:	885b      	ldrh	r3, [r3, #2]
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f7fe f80b 	bl	8009214 <lwip_htons>
 800b1fe:	4603      	mov	r3, r0
 800b200:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	f003 030f 	and.w	r3, r3, #15
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	009b      	lsls	r3, r3, #2
 800b20e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800b212:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b216:	b29b      	uxth	r3, r3
 800b218:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b21a:	429a      	cmp	r2, r3
 800b21c:	f0c0 8150 	bcc.w	800b4c0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800b220:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b224:	b29b      	uxth	r3, r3
 800b226:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f001 ff33 	bl	800d098 <pbuf_clen>
 800b232:	4603      	mov	r3, r0
 800b234:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800b236:	4b8c      	ldr	r3, [pc, #560]	@ (800b468 <ip4_reass+0x2b0>)
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	8c3b      	ldrh	r3, [r7, #32]
 800b23e:	4413      	add	r3, r2
 800b240:	2b0a      	cmp	r3, #10
 800b242:	dd10      	ble.n	800b266 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b244:	8c3b      	ldrh	r3, [r7, #32]
 800b246:	4619      	mov	r1, r3
 800b248:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b24a:	f7ff fd81 	bl	800ad50 <ip_reass_remove_oldest_datagram>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8137 	beq.w	800b4c4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800b256:	4b84      	ldr	r3, [pc, #528]	@ (800b468 <ip4_reass+0x2b0>)
 800b258:	881b      	ldrh	r3, [r3, #0]
 800b25a:	461a      	mov	r2, r3
 800b25c:	8c3b      	ldrh	r3, [r7, #32]
 800b25e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800b260:	2b0a      	cmp	r3, #10
 800b262:	f300 812f 	bgt.w	800b4c4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b266:	4b81      	ldr	r3, [pc, #516]	@ (800b46c <ip4_reass+0x2b4>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b26c:	e015      	b.n	800b29a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	695a      	ldr	r2, [r3, #20]
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	68db      	ldr	r3, [r3, #12]
 800b276:	429a      	cmp	r2, r3
 800b278:	d10c      	bne.n	800b294 <ip4_reass+0xdc>
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	699a      	ldr	r2, [r3, #24]
 800b27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	429a      	cmp	r2, r3
 800b284:	d106      	bne.n	800b294 <ip4_reass+0xdc>
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	899a      	ldrh	r2, [r3, #12]
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	889b      	ldrh	r3, [r3, #4]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	429a      	cmp	r2, r3
 800b292:	d006      	beq.n	800b2a2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800b294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	633b      	str	r3, [r7, #48]	@ 0x30
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1e6      	bne.n	800b26e <ip4_reass+0xb6>
 800b2a0:	e000      	b.n	800b2a4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800b2a2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800b2a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d109      	bne.n	800b2be <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800b2aa:	8c3b      	ldrh	r3, [r7, #32]
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b0:	f7ff fdb0 	bl	800ae14 <ip_reass_enqueue_new_datagram>
 800b2b4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d11c      	bne.n	800b2f6 <ip4_reass+0x13e>
      goto nullreturn;
 800b2bc:	e105      	b.n	800b4ca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b2be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2c0:	88db      	ldrh	r3, [r3, #6]
 800b2c2:	b29b      	uxth	r3, r3
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fd ffa5 	bl	8009214 <lwip_htons>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d110      	bne.n	800b2f6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d6:	89db      	ldrh	r3, [r3, #14]
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f7fd ff9b 	bl	8009214 <lwip_htons>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d006      	beq.n	800b2f6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800b2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	2214      	movs	r2, #20
 800b2ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f008 f9d8 	bl	80136a6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800b2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2f8:	88db      	ldrh	r3, [r3, #6]
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	f003 0320 	and.w	r3, r3, #32
 800b300:	2b00      	cmp	r3, #0
 800b302:	bf0c      	ite	eq
 800b304:	2301      	moveq	r3, #1
 800b306:	2300      	movne	r3, #0
 800b308:	b2db      	uxtb	r3, r3
 800b30a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800b30c:	69fb      	ldr	r3, [r7, #28]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00e      	beq.n	800b330 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800b312:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b314:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b316:	4413      	add	r3, r2
 800b318:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800b31a:	8b7a      	ldrh	r2, [r7, #26]
 800b31c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b31e:	429a      	cmp	r2, r3
 800b320:	f0c0 80a0 	bcc.w	800b464 <ip4_reass+0x2ac>
 800b324:	8b7b      	ldrh	r3, [r7, #26]
 800b326:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800b32a:	4293      	cmp	r3, r2
 800b32c:	f200 809a 	bhi.w	800b464 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800b330:	69fa      	ldr	r2, [r7, #28]
 800b332:	6879      	ldr	r1, [r7, #4]
 800b334:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b336:	f7ff fdd5 	bl	800aee4 <ip_reass_chain_frag_into_datagram_and_validate>
 800b33a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b342:	f000 809b 	beq.w	800b47c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800b346:	4b48      	ldr	r3, [pc, #288]	@ (800b468 <ip4_reass+0x2b0>)
 800b348:	881a      	ldrh	r2, [r3, #0]
 800b34a:	8c3b      	ldrh	r3, [r7, #32]
 800b34c:	4413      	add	r3, r2
 800b34e:	b29a      	uxth	r2, r3
 800b350:	4b45      	ldr	r3, [pc, #276]	@ (800b468 <ip4_reass+0x2b0>)
 800b352:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800b354:	69fb      	ldr	r3, [r7, #28]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00d      	beq.n	800b376 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800b35a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b35c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b35e:	4413      	add	r3, r2
 800b360:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800b362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b364:	8a7a      	ldrh	r2, [r7, #18]
 800b366:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800b368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b36a:	7f9b      	ldrb	r3, [r3, #30]
 800b36c:	f043 0301 	orr.w	r3, r3, #1
 800b370:	b2da      	uxtb	r2, r3
 800b372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b374:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d171      	bne.n	800b460 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800b37c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b37e:	8b9b      	ldrh	r3, [r3, #28]
 800b380:	3314      	adds	r3, #20
 800b382:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800b384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	685b      	ldr	r3, [r3, #4]
 800b392:	685b      	ldr	r3, [r3, #4]
 800b394:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800b396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b398:	3308      	adds	r3, #8
 800b39a:	2214      	movs	r2, #20
 800b39c:	4619      	mov	r1, r3
 800b39e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b3a0:	f008 f981 	bl	80136a6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800b3a4:	8a3b      	ldrh	r3, [r7, #16]
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fd ff34 	bl	8009214 <lwip_htons>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	719a      	strb	r2, [r3, #6]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800b3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	729a      	strb	r2, [r3, #10]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800b3ce:	e00d      	b.n	800b3ec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800b3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800b3d6:	2114      	movs	r1, #20
 800b3d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800b3da:	f001 fd49 	bl	800ce70 <pbuf_remove_header>
      pbuf_cat(p, r);
 800b3de:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f001 fe99 	bl	800d118 <pbuf_cat>
      r = iprh->next_pbuf;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800b3ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d1ee      	bne.n	800b3d0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800b3f2:	4b1e      	ldr	r3, [pc, #120]	@ (800b46c <ip4_reass+0x2b4>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d102      	bne.n	800b402 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b400:	e010      	b.n	800b424 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b402:	4b1a      	ldr	r3, [pc, #104]	@ (800b46c <ip4_reass+0x2b4>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b408:	e007      	b.n	800b41a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800b40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b410:	429a      	cmp	r2, r3
 800b412:	d006      	beq.n	800b422 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800b414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b41a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1f4      	bne.n	800b40a <ip4_reass+0x252>
 800b420:	e000      	b.n	800b424 <ip4_reass+0x26c>
          break;
 800b422:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800b424:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b426:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b428:	f7ff fd2e 	bl	800ae88 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 fe33 	bl	800d098 <pbuf_clen>
 800b432:	4603      	mov	r3, r0
 800b434:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800b436:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <ip4_reass+0x2b0>)
 800b438:	881b      	ldrh	r3, [r3, #0]
 800b43a:	8c3a      	ldrh	r2, [r7, #32]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d906      	bls.n	800b44e <ip4_reass+0x296>
 800b440:	4b0b      	ldr	r3, [pc, #44]	@ (800b470 <ip4_reass+0x2b8>)
 800b442:	f240 229b 	movw	r2, #667	@ 0x29b
 800b446:	490b      	ldr	r1, [pc, #44]	@ (800b474 <ip4_reass+0x2bc>)
 800b448:	480b      	ldr	r0, [pc, #44]	@ (800b478 <ip4_reass+0x2c0>)
 800b44a:	f008 f851 	bl	80134f0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800b44e:	4b06      	ldr	r3, [pc, #24]	@ (800b468 <ip4_reass+0x2b0>)
 800b450:	881a      	ldrh	r2, [r3, #0]
 800b452:	8c3b      	ldrh	r3, [r7, #32]
 800b454:	1ad3      	subs	r3, r2, r3
 800b456:	b29a      	uxth	r2, r3
 800b458:	4b03      	ldr	r3, [pc, #12]	@ (800b468 <ip4_reass+0x2b0>)
 800b45a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	e038      	b.n	800b4d2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800b460:	2300      	movs	r3, #0
 800b462:	e036      	b.n	800b4d2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800b464:	bf00      	nop
 800b466:	e00a      	b.n	800b47e <ip4_reass+0x2c6>
 800b468:	24005388 	.word	0x24005388
 800b46c:	24005384 	.word	0x24005384
 800b470:	080148e8 	.word	0x080148e8
 800b474:	08014a80 	.word	0x08014a80
 800b478:	08014958 	.word	0x08014958
    goto nullreturn_ipr;
 800b47c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800b47e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b480:	2b00      	cmp	r3, #0
 800b482:	d106      	bne.n	800b492 <ip4_reass+0x2da>
 800b484:	4b15      	ldr	r3, [pc, #84]	@ (800b4dc <ip4_reass+0x324>)
 800b486:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800b48a:	4915      	ldr	r1, [pc, #84]	@ (800b4e0 <ip4_reass+0x328>)
 800b48c:	4815      	ldr	r0, [pc, #84]	@ (800b4e4 <ip4_reass+0x32c>)
 800b48e:	f008 f82f 	bl	80134f0 <iprintf>
  if (ipr->p == NULL) {
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d116      	bne.n	800b4c8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800b49a:	4b13      	ldr	r3, [pc, #76]	@ (800b4e8 <ip4_reass+0x330>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d006      	beq.n	800b4b2 <ip4_reass+0x2fa>
 800b4a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b4dc <ip4_reass+0x324>)
 800b4a6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800b4aa:	4910      	ldr	r1, [pc, #64]	@ (800b4ec <ip4_reass+0x334>)
 800b4ac:	480d      	ldr	r0, [pc, #52]	@ (800b4e4 <ip4_reass+0x32c>)
 800b4ae:	f008 f81f 	bl	80134f0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b4b6:	f7ff fce7 	bl	800ae88 <ip_reass_dequeue_datagram>
 800b4ba:	e006      	b.n	800b4ca <ip4_reass+0x312>
    goto nullreturn;
 800b4bc:	bf00      	nop
 800b4be:	e004      	b.n	800b4ca <ip4_reass+0x312>
    goto nullreturn;
 800b4c0:	bf00      	nop
 800b4c2:	e002      	b.n	800b4ca <ip4_reass+0x312>
      goto nullreturn;
 800b4c4:	bf00      	nop
 800b4c6:	e000      	b.n	800b4ca <ip4_reass+0x312>
  }

nullreturn:
 800b4c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fd56 	bl	800cf7c <pbuf_free>
  return NULL;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3738      	adds	r7, #56	@ 0x38
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	080148e8 	.word	0x080148e8
 800b4e0:	08014a9c 	.word	0x08014a9c
 800b4e4:	08014958 	.word	0x08014958
 800b4e8:	24005384 	.word	0x24005384
 800b4ec:	08014aa8 	.word	0x08014aa8

0800b4f0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800b4f4:	2005      	movs	r0, #5
 800b4f6:	f000 fe27 	bl	800c148 <memp_malloc>
 800b4fa:	4603      	mov	r3, r0
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <ip_frag_free_pbuf_custom_ref+0x1c>
 800b50e:	4b07      	ldr	r3, [pc, #28]	@ (800b52c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800b510:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800b514:	4906      	ldr	r1, [pc, #24]	@ (800b530 <ip_frag_free_pbuf_custom_ref+0x30>)
 800b516:	4807      	ldr	r0, [pc, #28]	@ (800b534 <ip_frag_free_pbuf_custom_ref+0x34>)
 800b518:	f007 ffea 	bl	80134f0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b51c:	6879      	ldr	r1, [r7, #4]
 800b51e:	2005      	movs	r0, #5
 800b520:	f000 fe88 	bl	800c234 <memp_free>
}
 800b524:	bf00      	nop
 800b526:	3708      	adds	r7, #8
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	080148e8 	.word	0x080148e8
 800b530:	08014ac8 	.word	0x08014ac8
 800b534:	08014958 	.word	0x08014958

0800b538 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d106      	bne.n	800b558 <ipfrag_free_pbuf_custom+0x20>
 800b54a:	4b11      	ldr	r3, [pc, #68]	@ (800b590 <ipfrag_free_pbuf_custom+0x58>)
 800b54c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800b550:	4910      	ldr	r1, [pc, #64]	@ (800b594 <ipfrag_free_pbuf_custom+0x5c>)
 800b552:	4811      	ldr	r0, [pc, #68]	@ (800b598 <ipfrag_free_pbuf_custom+0x60>)
 800b554:	f007 ffcc 	bl	80134f0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d006      	beq.n	800b56e <ipfrag_free_pbuf_custom+0x36>
 800b560:	4b0b      	ldr	r3, [pc, #44]	@ (800b590 <ipfrag_free_pbuf_custom+0x58>)
 800b562:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800b566:	490d      	ldr	r1, [pc, #52]	@ (800b59c <ipfrag_free_pbuf_custom+0x64>)
 800b568:	480b      	ldr	r0, [pc, #44]	@ (800b598 <ipfrag_free_pbuf_custom+0x60>)
 800b56a:	f007 ffc1 	bl	80134f0 <iprintf>
  if (pcr->original != NULL) {
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	695b      	ldr	r3, [r3, #20]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d004      	beq.n	800b580 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	4618      	mov	r0, r3
 800b57c:	f001 fcfe 	bl	800cf7c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b580:	68f8      	ldr	r0, [r7, #12]
 800b582:	f7ff ffbd 	bl	800b500 <ip_frag_free_pbuf_custom_ref>
}
 800b586:	bf00      	nop
 800b588:	3710      	adds	r7, #16
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	080148e8 	.word	0x080148e8
 800b594:	08014ad4 	.word	0x08014ad4
 800b598:	08014958 	.word	0x08014958
 800b59c:	08014ae0 	.word	0x08014ae0

0800b5a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b094      	sub	sp, #80	@ 0x50
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b5b6:	3b14      	subs	r3, #20
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	da00      	bge.n	800b5be <ip4_frag+0x1e>
 800b5bc:	3307      	adds	r3, #7
 800b5be:	10db      	asrs	r3, r3, #3
 800b5c0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b5c2:	2314      	movs	r3, #20
 800b5c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800b5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	f003 030f 	and.w	r3, r3, #15
 800b5d8:	b2db      	uxtb	r3, r3
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b14      	cmp	r3, #20
 800b5e0:	d002      	beq.n	800b5e8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800b5e2:	f06f 0305 	mvn.w	r3, #5
 800b5e6:	e110      	b.n	800b80a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	895b      	ldrh	r3, [r3, #10]
 800b5ec:	2b13      	cmp	r3, #19
 800b5ee:	d809      	bhi.n	800b604 <ip4_frag+0x64>
 800b5f0:	4b88      	ldr	r3, [pc, #544]	@ (800b814 <ip4_frag+0x274>)
 800b5f2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800b5f6:	4988      	ldr	r1, [pc, #544]	@ (800b818 <ip4_frag+0x278>)
 800b5f8:	4888      	ldr	r0, [pc, #544]	@ (800b81c <ip4_frag+0x27c>)
 800b5fa:	f007 ff79 	bl	80134f0 <iprintf>
 800b5fe:	f06f 0305 	mvn.w	r3, #5
 800b602:	e102      	b.n	800b80a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	88db      	ldrh	r3, [r3, #6]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fd fe02 	bl	8009214 <lwip_htons>
 800b610:	4603      	mov	r3, r0
 800b612:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800b614:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b616:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b61a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800b61e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b620:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b624:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	891b      	ldrh	r3, [r3, #8]
 800b62a:	3b14      	subs	r3, #20
 800b62c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800b630:	e0e1      	b.n	800b7f6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800b632:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	b29b      	uxth	r3, r3
 800b638:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b63c:	4293      	cmp	r3, r2
 800b63e:	bf28      	it	cs
 800b640:	4613      	movcs	r3, r2
 800b642:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b644:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800b648:	2114      	movs	r1, #20
 800b64a:	200e      	movs	r0, #14
 800b64c:	f001 f9b2 	bl	800c9b4 <pbuf_alloc>
 800b650:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800b652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 80d5 	beq.w	800b804 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b65a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b65c:	895b      	ldrh	r3, [r3, #10]
 800b65e:	2b13      	cmp	r3, #19
 800b660:	d806      	bhi.n	800b670 <ip4_frag+0xd0>
 800b662:	4b6c      	ldr	r3, [pc, #432]	@ (800b814 <ip4_frag+0x274>)
 800b664:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800b668:	496d      	ldr	r1, [pc, #436]	@ (800b820 <ip4_frag+0x280>)
 800b66a:	486c      	ldr	r0, [pc, #432]	@ (800b81c <ip4_frag+0x27c>)
 800b66c:	f007 ff40 	bl	80134f0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	685b      	ldr	r3, [r3, #4]
 800b674:	2214      	movs	r2, #20
 800b676:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b678:	4618      	mov	r0, r3
 800b67a:	f008 f814 	bl	80136a6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800b684:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b686:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800b68a:	e064      	b.n	800b756 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	895a      	ldrh	r2, [r3, #10]
 800b690:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b692:	1ad3      	subs	r3, r2, r3
 800b694:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	895b      	ldrh	r3, [r3, #10]
 800b69a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d906      	bls.n	800b6ae <ip4_frag+0x10e>
 800b6a0:	4b5c      	ldr	r3, [pc, #368]	@ (800b814 <ip4_frag+0x274>)
 800b6a2:	f240 322d 	movw	r2, #813	@ 0x32d
 800b6a6:	495f      	ldr	r1, [pc, #380]	@ (800b824 <ip4_frag+0x284>)
 800b6a8:	485c      	ldr	r0, [pc, #368]	@ (800b81c <ip4_frag+0x27c>)
 800b6aa:	f007 ff21 	bl	80134f0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b6ae:	8bfa      	ldrh	r2, [r7, #30]
 800b6b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	bf28      	it	cs
 800b6b8:	4613      	movcs	r3, r2
 800b6ba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b6be:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d105      	bne.n	800b6d2 <ip4_frag+0x132>
        poff = 0;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	60fb      	str	r3, [r7, #12]
        continue;
 800b6d0:	e041      	b.n	800b756 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b6d2:	f7ff ff0d 	bl	800b4f0 <ip_frag_alloc_pbuf_custom_ref>
 800b6d6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d103      	bne.n	800b6e6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800b6de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b6e0:	f001 fc4c 	bl	800cf7c <pbuf_free>
        goto memerr;
 800b6e4:	e08f      	b.n	800b806 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b6e6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b6ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800b6f4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800b6f8:	9201      	str	r2, [sp, #4]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	2241      	movs	r2, #65	@ 0x41
 800b700:	2000      	movs	r0, #0
 800b702:	f001 fa81 	bl	800cc08 <pbuf_alloced_custom>
 800b706:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d106      	bne.n	800b71c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b70e:	69b8      	ldr	r0, [r7, #24]
 800b710:	f7ff fef6 	bl	800b500 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b714:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b716:	f001 fc31 	bl	800cf7c <pbuf_free>
        goto memerr;
 800b71a:	e074      	b.n	800b806 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800b71c:	68f8      	ldr	r0, [r7, #12]
 800b71e:	f001 fcd3 	bl	800d0c8 <pbuf_ref>
      pcr->original = p;
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	4a3f      	ldr	r2, [pc, #252]	@ (800b828 <ip4_frag+0x288>)
 800b72c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b72e:	6979      	ldr	r1, [r7, #20]
 800b730:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b732:	f001 fcf1 	bl	800d118 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800b736:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800b73a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800b744:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d004      	beq.n	800b756 <ip4_frag+0x1b6>
        poff = 0;
 800b74c:	2300      	movs	r3, #0
 800b74e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b756:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d196      	bne.n	800b68c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800b75e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800b760:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800b764:	4413      	add	r3, r2
 800b766:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800b76c:	f1a3 0213 	sub.w	r2, r3, #19
 800b770:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b774:	429a      	cmp	r2, r3
 800b776:	bfcc      	ite	gt
 800b778:	2301      	movgt	r3, #1
 800b77a:	2300      	movle	r3, #0
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b780:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b788:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800b78a:	6a3b      	ldr	r3, [r7, #32]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <ip4_frag+0x1f6>
 800b790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b792:	2b00      	cmp	r3, #0
 800b794:	d003      	beq.n	800b79e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800b796:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b798:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800b79c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b79e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fd fd37 	bl	8009214 <lwip_htons>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	461a      	mov	r2, r3
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800b7ae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b7b0:	3314      	adds	r3, #20
 800b7b2:	b29b      	uxth	r3, r3
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f7fd fd2d 	bl	8009214 <lwip_htons>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	729a      	strb	r2, [r3, #10]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	695b      	ldr	r3, [r3, #20]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b7d4:	68b8      	ldr	r0, [r7, #8]
 800b7d6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b7d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b7da:	f001 fbcf 	bl	800cf7c <pbuf_free>
    left = (u16_t)(left - fragsize);
 800b7de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800b7e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800b7e4:	1ad3      	subs	r3, r2, r3
 800b7e6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800b7ea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800b7ee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800b7f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f47f af19 	bne.w	800b632 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	e002      	b.n	800b80a <ip4_frag+0x26a>
      goto memerr;
 800b804:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b806:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3748      	adds	r7, #72	@ 0x48
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	080148e8 	.word	0x080148e8
 800b818:	08014aec 	.word	0x08014aec
 800b81c:	08014958 	.word	0x08014958
 800b820:	08014b08 	.word	0x08014b08
 800b824:	08014b28 	.word	0x08014b28
 800b828:	0800b539 	.word	0x0800b539

0800b82c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	4603      	mov	r3, r0
 800b834:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800b836:	4b05      	ldr	r3, [pc, #20]	@ (800b84c <ptr_to_mem+0x20>)
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	88fb      	ldrh	r3, [r7, #6]
 800b83c:	4413      	add	r3, r2
}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
 800b84a:	bf00      	nop
 800b84c:	2400538c 	.word	0x2400538c

0800b850 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800b858:	4b05      	ldr	r3, [pc, #20]	@ (800b870 <mem_to_ptr+0x20>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	1ad3      	subs	r3, r2, r3
 800b860:	b29b      	uxth	r3, r3
}
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	2400538c 	.word	0x2400538c

0800b874 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b874:	b590      	push	{r4, r7, lr}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b87c:	4b45      	ldr	r3, [pc, #276]	@ (800b994 <plug_holes+0x120>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	429a      	cmp	r2, r3
 800b884:	d206      	bcs.n	800b894 <plug_holes+0x20>
 800b886:	4b44      	ldr	r3, [pc, #272]	@ (800b998 <plug_holes+0x124>)
 800b888:	f240 12df 	movw	r2, #479	@ 0x1df
 800b88c:	4943      	ldr	r1, [pc, #268]	@ (800b99c <plug_holes+0x128>)
 800b88e:	4844      	ldr	r0, [pc, #272]	@ (800b9a0 <plug_holes+0x12c>)
 800b890:	f007 fe2e 	bl	80134f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b894:	4b43      	ldr	r3, [pc, #268]	@ (800b9a4 <plug_holes+0x130>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d306      	bcc.n	800b8ac <plug_holes+0x38>
 800b89e:	4b3e      	ldr	r3, [pc, #248]	@ (800b998 <plug_holes+0x124>)
 800b8a0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800b8a4:	4940      	ldr	r1, [pc, #256]	@ (800b9a8 <plug_holes+0x134>)
 800b8a6:	483e      	ldr	r0, [pc, #248]	@ (800b9a0 <plug_holes+0x12c>)
 800b8a8:	f007 fe22 	bl	80134f0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	791b      	ldrb	r3, [r3, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d006      	beq.n	800b8c2 <plug_holes+0x4e>
 800b8b4:	4b38      	ldr	r3, [pc, #224]	@ (800b998 <plug_holes+0x124>)
 800b8b6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800b8ba:	493c      	ldr	r1, [pc, #240]	@ (800b9ac <plug_holes+0x138>)
 800b8bc:	4838      	ldr	r0, [pc, #224]	@ (800b9a0 <plug_holes+0x12c>)
 800b8be:	f007 fe17 	bl	80134f0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	881b      	ldrh	r3, [r3, #0]
 800b8c6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b8ca:	d906      	bls.n	800b8da <plug_holes+0x66>
 800b8cc:	4b32      	ldr	r3, [pc, #200]	@ (800b998 <plug_holes+0x124>)
 800b8ce:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800b8d2:	4937      	ldr	r1, [pc, #220]	@ (800b9b0 <plug_holes+0x13c>)
 800b8d4:	4832      	ldr	r0, [pc, #200]	@ (800b9a0 <plug_holes+0x12c>)
 800b8d6:	f007 fe0b 	bl	80134f0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	881b      	ldrh	r3, [r3, #0]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f7ff ffa4 	bl	800b82c <ptr_to_mem>
 800b8e4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d024      	beq.n	800b938 <plug_holes+0xc4>
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	791b      	ldrb	r3, [r3, #4]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d120      	bne.n	800b938 <plug_holes+0xc4>
 800b8f6:	4b2b      	ldr	r3, [pc, #172]	@ (800b9a4 <plug_holes+0x130>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68fa      	ldr	r2, [r7, #12]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d01b      	beq.n	800b938 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b900:	4b2c      	ldr	r3, [pc, #176]	@ (800b9b4 <plug_holes+0x140>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	68fa      	ldr	r2, [r7, #12]
 800b906:	429a      	cmp	r2, r3
 800b908:	d102      	bne.n	800b910 <plug_holes+0x9c>
      lfree = mem;
 800b90a:	4a2a      	ldr	r2, [pc, #168]	@ (800b9b4 <plug_holes+0x140>)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	881a      	ldrh	r2, [r3, #0]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	881b      	ldrh	r3, [r3, #0]
 800b91c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b920:	d00a      	beq.n	800b938 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	4618      	mov	r0, r3
 800b928:	f7ff ff80 	bl	800b82c <ptr_to_mem>
 800b92c:	4604      	mov	r4, r0
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f7ff ff8e 	bl	800b850 <mem_to_ptr>
 800b934:	4603      	mov	r3, r0
 800b936:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	885b      	ldrh	r3, [r3, #2]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7ff ff75 	bl	800b82c <ptr_to_mem>
 800b942:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b944:	68ba      	ldr	r2, [r7, #8]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	429a      	cmp	r2, r3
 800b94a:	d01f      	beq.n	800b98c <plug_holes+0x118>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	791b      	ldrb	r3, [r3, #4]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d11b      	bne.n	800b98c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b954:	4b17      	ldr	r3, [pc, #92]	@ (800b9b4 <plug_holes+0x140>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d102      	bne.n	800b964 <plug_holes+0xf0>
      lfree = pmem;
 800b95e:	4a15      	ldr	r2, [pc, #84]	@ (800b9b4 <plug_holes+0x140>)
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	881a      	ldrh	r2, [r3, #0]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	881b      	ldrh	r3, [r3, #0]
 800b970:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800b974:	d00a      	beq.n	800b98c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff ff56 	bl	800b82c <ptr_to_mem>
 800b980:	4604      	mov	r4, r0
 800b982:	68b8      	ldr	r0, [r7, #8]
 800b984:	f7ff ff64 	bl	800b850 <mem_to_ptr>
 800b988:	4603      	mov	r3, r0
 800b98a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800b98c:	bf00      	nop
 800b98e:	3714      	adds	r7, #20
 800b990:	46bd      	mov	sp, r7
 800b992:	bd90      	pop	{r4, r7, pc}
 800b994:	2400538c 	.word	0x2400538c
 800b998:	08014b38 	.word	0x08014b38
 800b99c:	08014b94 	.word	0x08014b94
 800b9a0:	08014bac 	.word	0x08014bac
 800b9a4:	24005390 	.word	0x24005390
 800b9a8:	08014bd4 	.word	0x08014bd4
 800b9ac:	08014bf0 	.word	0x08014bf0
 800b9b0:	08014c0c 	.word	0x08014c0c
 800b9b4:	24005398 	.word	0x24005398

0800b9b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b9be:	4b1d      	ldr	r3, [pc, #116]	@ (800ba34 <mem_init+0x7c>)
 800b9c0:	4a1d      	ldr	r2, [pc, #116]	@ (800ba38 <mem_init+0x80>)
 800b9c2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b9c4:	4b1b      	ldr	r3, [pc, #108]	@ (800ba34 <mem_init+0x7c>)
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b9d0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800b9de:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800b9e2:	f7ff ff23 	bl	800b82c <ptr_to_mem>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4a14      	ldr	r2, [pc, #80]	@ (800ba3c <mem_init+0x84>)
 800b9ea:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b9ec:	4b13      	ldr	r3, [pc, #76]	@ (800ba3c <mem_init+0x84>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b9f4:	4b11      	ldr	r3, [pc, #68]	@ (800ba3c <mem_init+0x84>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800b9fc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b9fe:	4b0f      	ldr	r3, [pc, #60]	@ (800ba3c <mem_init+0x84>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800ba06:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ba08:	4b0a      	ldr	r3, [pc, #40]	@ (800ba34 <mem_init+0x7c>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a0c      	ldr	r2, [pc, #48]	@ (800ba40 <mem_init+0x88>)
 800ba0e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ba10:	480c      	ldr	r0, [pc, #48]	@ (800ba44 <mem_init+0x8c>)
 800ba12:	f001 fdcf 	bl	800d5b4 <sys_mutex_new>
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <mem_init+0x90>)
 800ba1e:	f240 221f 	movw	r2, #543	@ 0x21f
 800ba22:	490a      	ldr	r1, [pc, #40]	@ (800ba4c <mem_init+0x94>)
 800ba24:	480a      	ldr	r0, [pc, #40]	@ (800ba50 <mem_init+0x98>)
 800ba26:	f007 fd63 	bl	80134f0 <iprintf>
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	3708      	adds	r7, #8
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	2400538c 	.word	0x2400538c
 800ba38:	30044000 	.word	0x30044000
 800ba3c:	24005390 	.word	0x24005390
 800ba40:	24005398 	.word	0x24005398
 800ba44:	24005394 	.word	0x24005394
 800ba48:	08014b38 	.word	0x08014b38
 800ba4c:	08014c38 	.word	0x08014c38
 800ba50:	08014bac 	.word	0x08014bac

0800ba54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f7ff fef7 	bl	800b850 <mem_to_ptr>
 800ba62:	4603      	mov	r3, r0
 800ba64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff fede 	bl	800b82c <ptr_to_mem>
 800ba70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	885b      	ldrh	r3, [r3, #2]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f7ff fed8 	bl	800b82c <ptr_to_mem>
 800ba7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	881b      	ldrh	r3, [r3, #0]
 800ba82:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba86:	d818      	bhi.n	800baba <mem_link_valid+0x66>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	885b      	ldrh	r3, [r3, #2]
 800ba8c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ba90:	d813      	bhi.n	800baba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ba96:	8afa      	ldrh	r2, [r7, #22]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d004      	beq.n	800baa6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	881b      	ldrh	r3, [r3, #0]
 800baa0:	8afa      	ldrh	r2, [r7, #22]
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d109      	bne.n	800baba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800baa6:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <mem_link_valid+0x74>)
 800baa8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800baaa:	693a      	ldr	r2, [r7, #16]
 800baac:	429a      	cmp	r2, r3
 800baae:	d006      	beq.n	800babe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	885b      	ldrh	r3, [r3, #2]
 800bab4:	8afa      	ldrh	r2, [r7, #22]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d001      	beq.n	800babe <mem_link_valid+0x6a>
    return 0;
 800baba:	2300      	movs	r3, #0
 800babc:	e000      	b.n	800bac0 <mem_link_valid+0x6c>
  }
  return 1;
 800babe:	2301      	movs	r3, #1
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3718      	adds	r7, #24
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	24005390 	.word	0x24005390

0800bacc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b088      	sub	sp, #32
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d070      	beq.n	800bbbc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f003 0303 	and.w	r3, r3, #3
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d00d      	beq.n	800bb00 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bae4:	4b37      	ldr	r3, [pc, #220]	@ (800bbc4 <mem_free+0xf8>)
 800bae6:	f240 2273 	movw	r2, #627	@ 0x273
 800baea:	4937      	ldr	r1, [pc, #220]	@ (800bbc8 <mem_free+0xfc>)
 800baec:	4837      	ldr	r0, [pc, #220]	@ (800bbcc <mem_free+0x100>)
 800baee:	f007 fcff 	bl	80134f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800baf2:	f001 fdb1 	bl	800d658 <sys_arch_protect>
 800baf6:	60f8      	str	r0, [r7, #12]
 800baf8:	68f8      	ldr	r0, [r7, #12]
 800bafa:	f001 fdbb 	bl	800d674 <sys_arch_unprotect>
    return;
 800bafe:	e05e      	b.n	800bbbe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3b08      	subs	r3, #8
 800bb04:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bb06:	4b32      	ldr	r3, [pc, #200]	@ (800bbd0 <mem_free+0x104>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	69fa      	ldr	r2, [r7, #28]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d306      	bcc.n	800bb1e <mem_free+0x52>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f103 020c 	add.w	r2, r3, #12
 800bb16:	4b2f      	ldr	r3, [pc, #188]	@ (800bbd4 <mem_free+0x108>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d90d      	bls.n	800bb3a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800bb1e:	4b29      	ldr	r3, [pc, #164]	@ (800bbc4 <mem_free+0xf8>)
 800bb20:	f240 227f 	movw	r2, #639	@ 0x27f
 800bb24:	492c      	ldr	r1, [pc, #176]	@ (800bbd8 <mem_free+0x10c>)
 800bb26:	4829      	ldr	r0, [pc, #164]	@ (800bbcc <mem_free+0x100>)
 800bb28:	f007 fce2 	bl	80134f0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb2c:	f001 fd94 	bl	800d658 <sys_arch_protect>
 800bb30:	6138      	str	r0, [r7, #16]
 800bb32:	6938      	ldr	r0, [r7, #16]
 800bb34:	f001 fd9e 	bl	800d674 <sys_arch_unprotect>
    return;
 800bb38:	e041      	b.n	800bbbe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bb3a:	4828      	ldr	r0, [pc, #160]	@ (800bbdc <mem_free+0x110>)
 800bb3c:	f001 fd50 	bl	800d5e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	791b      	ldrb	r3, [r3, #4]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d110      	bne.n	800bb6a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800bb48:	4b1e      	ldr	r3, [pc, #120]	@ (800bbc4 <mem_free+0xf8>)
 800bb4a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800bb4e:	4924      	ldr	r1, [pc, #144]	@ (800bbe0 <mem_free+0x114>)
 800bb50:	481e      	ldr	r0, [pc, #120]	@ (800bbcc <mem_free+0x100>)
 800bb52:	f007 fccd 	bl	80134f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb56:	4821      	ldr	r0, [pc, #132]	@ (800bbdc <mem_free+0x110>)
 800bb58:	f001 fd51 	bl	800d5fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb5c:	f001 fd7c 	bl	800d658 <sys_arch_protect>
 800bb60:	6178      	str	r0, [r7, #20]
 800bb62:	6978      	ldr	r0, [r7, #20]
 800bb64:	f001 fd86 	bl	800d674 <sys_arch_unprotect>
    return;
 800bb68:	e029      	b.n	800bbbe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800bb6a:	69f8      	ldr	r0, [r7, #28]
 800bb6c:	f7ff ff72 	bl	800ba54 <mem_link_valid>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d110      	bne.n	800bb98 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800bb76:	4b13      	ldr	r3, [pc, #76]	@ (800bbc4 <mem_free+0xf8>)
 800bb78:	f240 2295 	movw	r2, #661	@ 0x295
 800bb7c:	4919      	ldr	r1, [pc, #100]	@ (800bbe4 <mem_free+0x118>)
 800bb7e:	4813      	ldr	r0, [pc, #76]	@ (800bbcc <mem_free+0x100>)
 800bb80:	f007 fcb6 	bl	80134f0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800bb84:	4815      	ldr	r0, [pc, #84]	@ (800bbdc <mem_free+0x110>)
 800bb86:	f001 fd3a 	bl	800d5fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bb8a:	f001 fd65 	bl	800d658 <sys_arch_protect>
 800bb8e:	61b8      	str	r0, [r7, #24]
 800bb90:	69b8      	ldr	r0, [r7, #24]
 800bb92:	f001 fd6f 	bl	800d674 <sys_arch_unprotect>
    return;
 800bb96:	e012      	b.n	800bbbe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800bb9e:	4b12      	ldr	r3, [pc, #72]	@ (800bbe8 <mem_free+0x11c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	69fa      	ldr	r2, [r7, #28]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d202      	bcs.n	800bbae <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800bba8:	4a0f      	ldr	r2, [pc, #60]	@ (800bbe8 <mem_free+0x11c>)
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bbae:	69f8      	ldr	r0, [r7, #28]
 800bbb0:	f7ff fe60 	bl	800b874 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bbb4:	4809      	ldr	r0, [pc, #36]	@ (800bbdc <mem_free+0x110>)
 800bbb6:	f001 fd22 	bl	800d5fe <sys_mutex_unlock>
 800bbba:	e000      	b.n	800bbbe <mem_free+0xf2>
    return;
 800bbbc:	bf00      	nop
}
 800bbbe:	3720      	adds	r7, #32
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	08014b38 	.word	0x08014b38
 800bbc8:	08014c54 	.word	0x08014c54
 800bbcc:	08014bac 	.word	0x08014bac
 800bbd0:	2400538c 	.word	0x2400538c
 800bbd4:	24005390 	.word	0x24005390
 800bbd8:	08014c78 	.word	0x08014c78
 800bbdc:	24005394 	.word	0x24005394
 800bbe0:	08014c94 	.word	0x08014c94
 800bbe4:	08014cbc 	.word	0x08014cbc
 800bbe8:	24005398 	.word	0x24005398

0800bbec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b088      	sub	sp, #32
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800bbf8:	887b      	ldrh	r3, [r7, #2]
 800bbfa:	3303      	adds	r3, #3
 800bbfc:	b29b      	uxth	r3, r3
 800bbfe:	f023 0303 	bic.w	r3, r3, #3
 800bc02:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bc04:	8bfb      	ldrh	r3, [r7, #30]
 800bc06:	2b0b      	cmp	r3, #11
 800bc08:	d801      	bhi.n	800bc0e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800bc0a:	230c      	movs	r3, #12
 800bc0c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bc0e:	8bfb      	ldrh	r3, [r7, #30]
 800bc10:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bc14:	d803      	bhi.n	800bc1e <mem_trim+0x32>
 800bc16:	8bfa      	ldrh	r2, [r7, #30]
 800bc18:	887b      	ldrh	r3, [r7, #2]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d201      	bcs.n	800bc22 <mem_trim+0x36>
    return NULL;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e0d8      	b.n	800bdd4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bc22:	4b6e      	ldr	r3, [pc, #440]	@ (800bddc <mem_trim+0x1f0>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	687a      	ldr	r2, [r7, #4]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d304      	bcc.n	800bc36 <mem_trim+0x4a>
 800bc2c:	4b6c      	ldr	r3, [pc, #432]	@ (800bde0 <mem_trim+0x1f4>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d306      	bcc.n	800bc44 <mem_trim+0x58>
 800bc36:	4b6b      	ldr	r3, [pc, #428]	@ (800bde4 <mem_trim+0x1f8>)
 800bc38:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800bc3c:	496a      	ldr	r1, [pc, #424]	@ (800bde8 <mem_trim+0x1fc>)
 800bc3e:	486b      	ldr	r0, [pc, #428]	@ (800bdec <mem_trim+0x200>)
 800bc40:	f007 fc56 	bl	80134f0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bc44:	4b65      	ldr	r3, [pc, #404]	@ (800bddc <mem_trim+0x1f0>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d304      	bcc.n	800bc58 <mem_trim+0x6c>
 800bc4e:	4b64      	ldr	r3, [pc, #400]	@ (800bde0 <mem_trim+0x1f4>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	687a      	ldr	r2, [r7, #4]
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d307      	bcc.n	800bc68 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bc58:	f001 fcfe 	bl	800d658 <sys_arch_protect>
 800bc5c:	60b8      	str	r0, [r7, #8]
 800bc5e:	68b8      	ldr	r0, [r7, #8]
 800bc60:	f001 fd08 	bl	800d674 <sys_arch_unprotect>
    return rmem;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	e0b5      	b.n	800bdd4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	3b08      	subs	r3, #8
 800bc6c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bc6e:	69b8      	ldr	r0, [r7, #24]
 800bc70:	f7ff fdee 	bl	800b850 <mem_to_ptr>
 800bc74:	4603      	mov	r3, r0
 800bc76:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	881a      	ldrh	r2, [r3, #0]
 800bc7c:	8afb      	ldrh	r3, [r7, #22]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	3b08      	subs	r3, #8
 800bc84:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bc86:	8bfa      	ldrh	r2, [r7, #30]
 800bc88:	8abb      	ldrh	r3, [r7, #20]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d906      	bls.n	800bc9c <mem_trim+0xb0>
 800bc8e:	4b55      	ldr	r3, [pc, #340]	@ (800bde4 <mem_trim+0x1f8>)
 800bc90:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800bc94:	4956      	ldr	r1, [pc, #344]	@ (800bdf0 <mem_trim+0x204>)
 800bc96:	4855      	ldr	r0, [pc, #340]	@ (800bdec <mem_trim+0x200>)
 800bc98:	f007 fc2a 	bl	80134f0 <iprintf>
  if (newsize > size) {
 800bc9c:	8bfa      	ldrh	r2, [r7, #30]
 800bc9e:	8abb      	ldrh	r3, [r7, #20]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d901      	bls.n	800bca8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bca4:	2300      	movs	r3, #0
 800bca6:	e095      	b.n	800bdd4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bca8:	8bfa      	ldrh	r2, [r7, #30]
 800bcaa:	8abb      	ldrh	r3, [r7, #20]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d101      	bne.n	800bcb4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	e08f      	b.n	800bdd4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bcb4:	484f      	ldr	r0, [pc, #316]	@ (800bdf4 <mem_trim+0x208>)
 800bcb6:	f001 fc93 	bl	800d5e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bcba:	69bb      	ldr	r3, [r7, #24]
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	f7ff fdb4 	bl	800b82c <ptr_to_mem>
 800bcc4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bcc6:	693b      	ldr	r3, [r7, #16]
 800bcc8:	791b      	ldrb	r3, [r3, #4]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d13f      	bne.n	800bd4e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	881b      	ldrh	r3, [r3, #0]
 800bcd2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bcd6:	d106      	bne.n	800bce6 <mem_trim+0xfa>
 800bcd8:	4b42      	ldr	r3, [pc, #264]	@ (800bde4 <mem_trim+0x1f8>)
 800bcda:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800bcde:	4946      	ldr	r1, [pc, #280]	@ (800bdf8 <mem_trim+0x20c>)
 800bce0:	4842      	ldr	r0, [pc, #264]	@ (800bdec <mem_trim+0x200>)
 800bce2:	f007 fc05 	bl	80134f0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	881b      	ldrh	r3, [r3, #0]
 800bcea:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bcec:	8afa      	ldrh	r2, [r7, #22]
 800bcee:	8bfb      	ldrh	r3, [r7, #30]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bcf8:	4b40      	ldr	r3, [pc, #256]	@ (800bdfc <mem_trim+0x210>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d106      	bne.n	800bd10 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bd02:	89fb      	ldrh	r3, [r7, #14]
 800bd04:	4618      	mov	r0, r3
 800bd06:	f7ff fd91 	bl	800b82c <ptr_to_mem>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4a3b      	ldr	r2, [pc, #236]	@ (800bdfc <mem_trim+0x210>)
 800bd0e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800bd10:	89fb      	ldrh	r3, [r7, #14]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff fd8a 	bl	800b82c <ptr_to_mem>
 800bd18:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	89ba      	ldrh	r2, [r7, #12]
 800bd24:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	8afa      	ldrh	r2, [r7, #22]
 800bd2a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	89fa      	ldrh	r2, [r7, #14]
 800bd30:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd3a:	d047      	beq.n	800bdcc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bd3c:	693b      	ldr	r3, [r7, #16]
 800bd3e:	881b      	ldrh	r3, [r3, #0]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f7ff fd73 	bl	800b82c <ptr_to_mem>
 800bd46:	4602      	mov	r2, r0
 800bd48:	89fb      	ldrh	r3, [r7, #14]
 800bd4a:	8053      	strh	r3, [r2, #2]
 800bd4c:	e03e      	b.n	800bdcc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800bd4e:	8bfb      	ldrh	r3, [r7, #30]
 800bd50:	f103 0214 	add.w	r2, r3, #20
 800bd54:	8abb      	ldrh	r3, [r7, #20]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d838      	bhi.n	800bdcc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bd5a:	8afa      	ldrh	r2, [r7, #22]
 800bd5c:	8bfb      	ldrh	r3, [r7, #30]
 800bd5e:	4413      	add	r3, r2
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	3308      	adds	r3, #8
 800bd64:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bd66:	69bb      	ldr	r3, [r7, #24]
 800bd68:	881b      	ldrh	r3, [r3, #0]
 800bd6a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bd6e:	d106      	bne.n	800bd7e <mem_trim+0x192>
 800bd70:	4b1c      	ldr	r3, [pc, #112]	@ (800bde4 <mem_trim+0x1f8>)
 800bd72:	f240 3216 	movw	r2, #790	@ 0x316
 800bd76:	4920      	ldr	r1, [pc, #128]	@ (800bdf8 <mem_trim+0x20c>)
 800bd78:	481c      	ldr	r0, [pc, #112]	@ (800bdec <mem_trim+0x200>)
 800bd7a:	f007 fbb9 	bl	80134f0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800bd7e:	89fb      	ldrh	r3, [r7, #14]
 800bd80:	4618      	mov	r0, r3
 800bd82:	f7ff fd53 	bl	800b82c <ptr_to_mem>
 800bd86:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800bd88:	4b1c      	ldr	r3, [pc, #112]	@ (800bdfc <mem_trim+0x210>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d202      	bcs.n	800bd98 <mem_trim+0x1ac>
      lfree = mem2;
 800bd92:	4a1a      	ldr	r2, [pc, #104]	@ (800bdfc <mem_trim+0x210>)
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800bd9e:	69bb      	ldr	r3, [r7, #24]
 800bda0:	881a      	ldrh	r2, [r3, #0]
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	8afa      	ldrh	r2, [r7, #22]
 800bdaa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800bdac:	69bb      	ldr	r3, [r7, #24]
 800bdae:	89fa      	ldrh	r2, [r7, #14]
 800bdb0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	881b      	ldrh	r3, [r3, #0]
 800bdb6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bdba:	d007      	beq.n	800bdcc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	881b      	ldrh	r3, [r3, #0]
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f7ff fd33 	bl	800b82c <ptr_to_mem>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	89fb      	ldrh	r3, [r7, #14]
 800bdca:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bdcc:	4809      	ldr	r0, [pc, #36]	@ (800bdf4 <mem_trim+0x208>)
 800bdce:	f001 fc16 	bl	800d5fe <sys_mutex_unlock>
  return rmem;
 800bdd2:	687b      	ldr	r3, [r7, #4]
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3720      	adds	r7, #32
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}
 800bddc:	2400538c 	.word	0x2400538c
 800bde0:	24005390 	.word	0x24005390
 800bde4:	08014b38 	.word	0x08014b38
 800bde8:	08014cf0 	.word	0x08014cf0
 800bdec:	08014bac 	.word	0x08014bac
 800bdf0:	08014d08 	.word	0x08014d08
 800bdf4:	24005394 	.word	0x24005394
 800bdf8:	08014d28 	.word	0x08014d28
 800bdfc:	24005398 	.word	0x24005398

0800be00 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b088      	sub	sp, #32
 800be04:	af00      	add	r7, sp, #0
 800be06:	4603      	mov	r3, r0
 800be08:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <mem_malloc+0x14>
    return NULL;
 800be10:	2300      	movs	r3, #0
 800be12:	e0e2      	b.n	800bfda <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800be14:	88fb      	ldrh	r3, [r7, #6]
 800be16:	3303      	adds	r3, #3
 800be18:	b29b      	uxth	r3, r3
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800be20:	8bbb      	ldrh	r3, [r7, #28]
 800be22:	2b0b      	cmp	r3, #11
 800be24:	d801      	bhi.n	800be2a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800be26:	230c      	movs	r3, #12
 800be28:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800be2a:	8bbb      	ldrh	r3, [r7, #28]
 800be2c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800be30:	d803      	bhi.n	800be3a <mem_malloc+0x3a>
 800be32:	8bba      	ldrh	r2, [r7, #28]
 800be34:	88fb      	ldrh	r3, [r7, #6]
 800be36:	429a      	cmp	r2, r3
 800be38:	d201      	bcs.n	800be3e <mem_malloc+0x3e>
    return NULL;
 800be3a:	2300      	movs	r3, #0
 800be3c:	e0cd      	b.n	800bfda <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800be3e:	4869      	ldr	r0, [pc, #420]	@ (800bfe4 <mem_malloc+0x1e4>)
 800be40:	f001 fbce 	bl	800d5e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800be44:	4b68      	ldr	r3, [pc, #416]	@ (800bfe8 <mem_malloc+0x1e8>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7ff fd01 	bl	800b850 <mem_to_ptr>
 800be4e:	4603      	mov	r3, r0
 800be50:	83fb      	strh	r3, [r7, #30]
 800be52:	e0b7      	b.n	800bfc4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800be54:	8bfb      	ldrh	r3, [r7, #30]
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff fce8 	bl	800b82c <ptr_to_mem>
 800be5c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	791b      	ldrb	r3, [r3, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	f040 80a7 	bne.w	800bfb6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	881b      	ldrh	r3, [r3, #0]
 800be6c:	461a      	mov	r2, r3
 800be6e:	8bfb      	ldrh	r3, [r7, #30]
 800be70:	1ad3      	subs	r3, r2, r3
 800be72:	f1a3 0208 	sub.w	r2, r3, #8
 800be76:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800be78:	429a      	cmp	r2, r3
 800be7a:	f0c0 809c 	bcc.w	800bfb6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	881b      	ldrh	r3, [r3, #0]
 800be82:	461a      	mov	r2, r3
 800be84:	8bfb      	ldrh	r3, [r7, #30]
 800be86:	1ad3      	subs	r3, r2, r3
 800be88:	f1a3 0208 	sub.w	r2, r3, #8
 800be8c:	8bbb      	ldrh	r3, [r7, #28]
 800be8e:	3314      	adds	r3, #20
 800be90:	429a      	cmp	r2, r3
 800be92:	d333      	bcc.n	800befc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800be94:	8bfa      	ldrh	r2, [r7, #30]
 800be96:	8bbb      	ldrh	r3, [r7, #28]
 800be98:	4413      	add	r3, r2
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	3308      	adds	r3, #8
 800be9e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800bea0:	8a7b      	ldrh	r3, [r7, #18]
 800bea2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bea6:	d106      	bne.n	800beb6 <mem_malloc+0xb6>
 800bea8:	4b50      	ldr	r3, [pc, #320]	@ (800bfec <mem_malloc+0x1ec>)
 800beaa:	f240 3287 	movw	r2, #903	@ 0x387
 800beae:	4950      	ldr	r1, [pc, #320]	@ (800bff0 <mem_malloc+0x1f0>)
 800beb0:	4850      	ldr	r0, [pc, #320]	@ (800bff4 <mem_malloc+0x1f4>)
 800beb2:	f007 fb1d 	bl	80134f0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800beb6:	8a7b      	ldrh	r3, [r7, #18]
 800beb8:	4618      	mov	r0, r3
 800beba:	f7ff fcb7 	bl	800b82c <ptr_to_mem>
 800bebe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	881a      	ldrh	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	8bfa      	ldrh	r2, [r7, #30]
 800bed2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	8a7a      	ldrh	r2, [r7, #18]
 800bed8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	2201      	movs	r2, #1
 800bede:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	881b      	ldrh	r3, [r3, #0]
 800bee4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800bee8:	d00b      	beq.n	800bf02 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	881b      	ldrh	r3, [r3, #0]
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff fc9c 	bl	800b82c <ptr_to_mem>
 800bef4:	4602      	mov	r2, r0
 800bef6:	8a7b      	ldrh	r3, [r7, #18]
 800bef8:	8053      	strh	r3, [r2, #2]
 800befa:	e002      	b.n	800bf02 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	2201      	movs	r2, #1
 800bf00:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800bf02:	4b39      	ldr	r3, [pc, #228]	@ (800bfe8 <mem_malloc+0x1e8>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	697a      	ldr	r2, [r7, #20]
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d127      	bne.n	800bf5c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800bf0c:	4b36      	ldr	r3, [pc, #216]	@ (800bfe8 <mem_malloc+0x1e8>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800bf12:	e005      	b.n	800bf20 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7ff fc87 	bl	800b82c <ptr_to_mem>
 800bf1e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	791b      	ldrb	r3, [r3, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d004      	beq.n	800bf32 <mem_malloc+0x132>
 800bf28:	4b33      	ldr	r3, [pc, #204]	@ (800bff8 <mem_malloc+0x1f8>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	69ba      	ldr	r2, [r7, #24]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d1f0      	bne.n	800bf14 <mem_malloc+0x114>
          }
          lfree = cur;
 800bf32:	4a2d      	ldr	r2, [pc, #180]	@ (800bfe8 <mem_malloc+0x1e8>)
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800bf38:	4b2b      	ldr	r3, [pc, #172]	@ (800bfe8 <mem_malloc+0x1e8>)
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	4b2e      	ldr	r3, [pc, #184]	@ (800bff8 <mem_malloc+0x1f8>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d00b      	beq.n	800bf5c <mem_malloc+0x15c>
 800bf44:	4b28      	ldr	r3, [pc, #160]	@ (800bfe8 <mem_malloc+0x1e8>)
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	791b      	ldrb	r3, [r3, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d006      	beq.n	800bf5c <mem_malloc+0x15c>
 800bf4e:	4b27      	ldr	r3, [pc, #156]	@ (800bfec <mem_malloc+0x1ec>)
 800bf50:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800bf54:	4929      	ldr	r1, [pc, #164]	@ (800bffc <mem_malloc+0x1fc>)
 800bf56:	4827      	ldr	r0, [pc, #156]	@ (800bff4 <mem_malloc+0x1f4>)
 800bf58:	f007 faca 	bl	80134f0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800bf5c:	4821      	ldr	r0, [pc, #132]	@ (800bfe4 <mem_malloc+0x1e4>)
 800bf5e:	f001 fb4e 	bl	800d5fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800bf62:	8bba      	ldrh	r2, [r7, #28]
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	4413      	add	r3, r2
 800bf68:	3308      	adds	r3, #8
 800bf6a:	4a23      	ldr	r2, [pc, #140]	@ (800bff8 <mem_malloc+0x1f8>)
 800bf6c:	6812      	ldr	r2, [r2, #0]
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d906      	bls.n	800bf80 <mem_malloc+0x180>
 800bf72:	4b1e      	ldr	r3, [pc, #120]	@ (800bfec <mem_malloc+0x1ec>)
 800bf74:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800bf78:	4921      	ldr	r1, [pc, #132]	@ (800c000 <mem_malloc+0x200>)
 800bf7a:	481e      	ldr	r0, [pc, #120]	@ (800bff4 <mem_malloc+0x1f4>)
 800bf7c:	f007 fab8 	bl	80134f0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d006      	beq.n	800bf98 <mem_malloc+0x198>
 800bf8a:	4b18      	ldr	r3, [pc, #96]	@ (800bfec <mem_malloc+0x1ec>)
 800bf8c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800bf90:	491c      	ldr	r1, [pc, #112]	@ (800c004 <mem_malloc+0x204>)
 800bf92:	4818      	ldr	r0, [pc, #96]	@ (800bff4 <mem_malloc+0x1f4>)
 800bf94:	f007 faac 	bl	80134f0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	f003 0303 	and.w	r3, r3, #3
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d006      	beq.n	800bfb0 <mem_malloc+0x1b0>
 800bfa2:	4b12      	ldr	r3, [pc, #72]	@ (800bfec <mem_malloc+0x1ec>)
 800bfa4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800bfa8:	4917      	ldr	r1, [pc, #92]	@ (800c008 <mem_malloc+0x208>)
 800bfaa:	4812      	ldr	r0, [pc, #72]	@ (800bff4 <mem_malloc+0x1f4>)
 800bfac:	f007 faa0 	bl	80134f0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	3308      	adds	r3, #8
 800bfb4:	e011      	b.n	800bfda <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800bfb6:	8bfb      	ldrh	r3, [r7, #30]
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f7ff fc37 	bl	800b82c <ptr_to_mem>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	881b      	ldrh	r3, [r3, #0]
 800bfc2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800bfc4:	8bfa      	ldrh	r2, [r7, #30]
 800bfc6:	8bbb      	ldrh	r3, [r7, #28]
 800bfc8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	f4ff af41 	bcc.w	800be54 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800bfd2:	4804      	ldr	r0, [pc, #16]	@ (800bfe4 <mem_malloc+0x1e4>)
 800bfd4:	f001 fb13 	bl	800d5fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3720      	adds	r7, #32
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	24005394 	.word	0x24005394
 800bfe8:	24005398 	.word	0x24005398
 800bfec:	08014b38 	.word	0x08014b38
 800bff0:	08014d28 	.word	0x08014d28
 800bff4:	08014bac 	.word	0x08014bac
 800bff8:	24005390 	.word	0x24005390
 800bffc:	08014d3c 	.word	0x08014d3c
 800c000:	08014d58 	.word	0x08014d58
 800c004:	08014d88 	.word	0x08014d88
 800c008:	08014db8 	.word	0x08014db8

0800c00c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	689b      	ldr	r3, [r3, #8]
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	3303      	adds	r3, #3
 800c022:	f023 0303 	bic.w	r3, r3, #3
 800c026:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c028:	2300      	movs	r3, #0
 800c02a:	60fb      	str	r3, [r7, #12]
 800c02c:	e011      	b.n	800c052 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	689b      	ldr	r3, [r3, #8]
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	461a      	mov	r2, r3
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	4413      	add	r3, r2
 800c04a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3301      	adds	r3, #1
 800c050:	60fb      	str	r3, [r7, #12]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	885b      	ldrh	r3, [r3, #2]
 800c056:	461a      	mov	r2, r3
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	4293      	cmp	r3, r2
 800c05c:	dbe7      	blt.n	800c02e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c05e:	bf00      	nop
 800c060:	bf00      	nop
 800c062:	3714      	adds	r7, #20
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c072:	2300      	movs	r3, #0
 800c074:	80fb      	strh	r3, [r7, #6]
 800c076:	e009      	b.n	800c08c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c078:	88fb      	ldrh	r3, [r7, #6]
 800c07a:	4a08      	ldr	r2, [pc, #32]	@ (800c09c <memp_init+0x30>)
 800c07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c080:	4618      	mov	r0, r3
 800c082:	f7ff ffc3 	bl	800c00c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c086:	88fb      	ldrh	r3, [r7, #6]
 800c088:	3301      	adds	r3, #1
 800c08a:	80fb      	strh	r3, [r7, #6]
 800c08c:	88fb      	ldrh	r3, [r7, #6]
 800c08e:	2b0c      	cmp	r3, #12
 800c090:	d9f2      	bls.n	800c078 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c092:	bf00      	nop
 800c094:	bf00      	nop
 800c096:	3708      	adds	r7, #8
 800c098:	46bd      	mov	sp, r7
 800c09a:	bd80      	pop	{r7, pc}
 800c09c:	0801719c 	.word	0x0801719c

0800c0a0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b084      	sub	sp, #16
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c0a8:	f001 fad6 	bl	800d658 <sys_arch_protect>
 800c0ac:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d015      	beq.n	800c0e8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	6812      	ldr	r2, [r2, #0]
 800c0c4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	f003 0303 	and.w	r3, r3, #3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d006      	beq.n	800c0de <do_memp_malloc_pool+0x3e>
 800c0d0:	4b09      	ldr	r3, [pc, #36]	@ (800c0f8 <do_memp_malloc_pool+0x58>)
 800c0d2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800c0d6:	4909      	ldr	r1, [pc, #36]	@ (800c0fc <do_memp_malloc_pool+0x5c>)
 800c0d8:	4809      	ldr	r0, [pc, #36]	@ (800c100 <do_memp_malloc_pool+0x60>)
 800c0da:	f007 fa09 	bl	80134f0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c0de:	68f8      	ldr	r0, [r7, #12]
 800c0e0:	f001 fac8 	bl	800d674 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	e003      	b.n	800c0f0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c0e8:	68f8      	ldr	r0, [r7, #12]
 800c0ea:	f001 fac3 	bl	800d674 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c0ee:	2300      	movs	r3, #0
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3710      	adds	r7, #16
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	08014ddc 	.word	0x08014ddc
 800c0fc:	08014e38 	.word	0x08014e38
 800c100:	08014e5c 	.word	0x08014e5c

0800c104 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b082      	sub	sp, #8
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d106      	bne.n	800c120 <memp_malloc_pool+0x1c>
 800c112:	4b0a      	ldr	r3, [pc, #40]	@ (800c13c <memp_malloc_pool+0x38>)
 800c114:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800c118:	4909      	ldr	r1, [pc, #36]	@ (800c140 <memp_malloc_pool+0x3c>)
 800c11a:	480a      	ldr	r0, [pc, #40]	@ (800c144 <memp_malloc_pool+0x40>)
 800c11c:	f007 f9e8 	bl	80134f0 <iprintf>
  if (desc == NULL) {
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d101      	bne.n	800c12a <memp_malloc_pool+0x26>
    return NULL;
 800c126:	2300      	movs	r3, #0
 800c128:	e003      	b.n	800c132 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7ff ffb8 	bl	800c0a0 <do_memp_malloc_pool>
 800c130:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c132:	4618      	mov	r0, r3
 800c134:	3708      	adds	r7, #8
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	08014ddc 	.word	0x08014ddc
 800c140:	08014e84 	.word	0x08014e84
 800c144:	08014e5c 	.word	0x08014e5c

0800c148 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c148:	b580      	push	{r7, lr}
 800c14a:	b084      	sub	sp, #16
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	4603      	mov	r3, r0
 800c150:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	2b0c      	cmp	r3, #12
 800c156:	d908      	bls.n	800c16a <memp_malloc+0x22>
 800c158:	4b0a      	ldr	r3, [pc, #40]	@ (800c184 <memp_malloc+0x3c>)
 800c15a:	f240 1257 	movw	r2, #343	@ 0x157
 800c15e:	490a      	ldr	r1, [pc, #40]	@ (800c188 <memp_malloc+0x40>)
 800c160:	480a      	ldr	r0, [pc, #40]	@ (800c18c <memp_malloc+0x44>)
 800c162:	f007 f9c5 	bl	80134f0 <iprintf>
 800c166:	2300      	movs	r3, #0
 800c168:	e008      	b.n	800c17c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c16a:	79fb      	ldrb	r3, [r7, #7]
 800c16c:	4a08      	ldr	r2, [pc, #32]	@ (800c190 <memp_malloc+0x48>)
 800c16e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff ff94 	bl	800c0a0 <do_memp_malloc_pool>
 800c178:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c17a:	68fb      	ldr	r3, [r7, #12]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3710      	adds	r7, #16
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	08014ddc 	.word	0x08014ddc
 800c188:	08014e98 	.word	0x08014e98
 800c18c:	08014e5c 	.word	0x08014e5c
 800c190:	0801719c 	.word	0x0801719c

0800c194 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b084      	sub	sp, #16
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	f003 0303 	and.w	r3, r3, #3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d006      	beq.n	800c1b6 <do_memp_free_pool+0x22>
 800c1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e0 <do_memp_free_pool+0x4c>)
 800c1aa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800c1ae:	490d      	ldr	r1, [pc, #52]	@ (800c1e4 <do_memp_free_pool+0x50>)
 800c1b0:	480d      	ldr	r0, [pc, #52]	@ (800c1e8 <do_memp_free_pool+0x54>)
 800c1b2:	f007 f99d 	bl	80134f0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c1ba:	f001 fa4d 	bl	800d658 <sys_arch_protect>
 800c1be:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	689b      	ldr	r3, [r3, #8]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c1d2:	68b8      	ldr	r0, [r7, #8]
 800c1d4:	f001 fa4e 	bl	800d674 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c1d8:	bf00      	nop
 800c1da:	3710      	adds	r7, #16
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	08014ddc 	.word	0x08014ddc
 800c1e4:	08014eb8 	.word	0x08014eb8
 800c1e8:	08014e5c 	.word	0x08014e5c

0800c1ec <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <memp_free_pool+0x1e>
 800c1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800c228 <memp_free_pool+0x3c>)
 800c1fe:	f240 1295 	movw	r2, #405	@ 0x195
 800c202:	490a      	ldr	r1, [pc, #40]	@ (800c22c <memp_free_pool+0x40>)
 800c204:	480a      	ldr	r0, [pc, #40]	@ (800c230 <memp_free_pool+0x44>)
 800c206:	f007 f973 	bl	80134f0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d007      	beq.n	800c220 <memp_free_pool+0x34>
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d004      	beq.n	800c220 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f7ff ffbb 	bl	800c194 <do_memp_free_pool>
 800c21e:	e000      	b.n	800c222 <memp_free_pool+0x36>
    return;
 800c220:	bf00      	nop
}
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	08014ddc 	.word	0x08014ddc
 800c22c:	08014e84 	.word	0x08014e84
 800c230:	08014e5c 	.word	0x08014e5c

0800c234 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	4603      	mov	r3, r0
 800c23c:	6039      	str	r1, [r7, #0]
 800c23e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c240:	79fb      	ldrb	r3, [r7, #7]
 800c242:	2b0c      	cmp	r3, #12
 800c244:	d907      	bls.n	800c256 <memp_free+0x22>
 800c246:	4b0c      	ldr	r3, [pc, #48]	@ (800c278 <memp_free+0x44>)
 800c248:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800c24c:	490b      	ldr	r1, [pc, #44]	@ (800c27c <memp_free+0x48>)
 800c24e:	480c      	ldr	r0, [pc, #48]	@ (800c280 <memp_free+0x4c>)
 800c250:	f007 f94e 	bl	80134f0 <iprintf>
 800c254:	e00c      	b.n	800c270 <memp_free+0x3c>

  if (mem == NULL) {
 800c256:	683b      	ldr	r3, [r7, #0]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d008      	beq.n	800c26e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c25c:	79fb      	ldrb	r3, [r7, #7]
 800c25e:	4a09      	ldr	r2, [pc, #36]	@ (800c284 <memp_free+0x50>)
 800c260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff ff94 	bl	800c194 <do_memp_free_pool>
 800c26c:	e000      	b.n	800c270 <memp_free+0x3c>
    return;
 800c26e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	08014ddc 	.word	0x08014ddc
 800c27c:	08014ed8 	.word	0x08014ed8
 800c280:	08014e5c 	.word	0x08014e5c
 800c284:	0801719c 	.word	0x0801719c

0800c288 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c288:	b480      	push	{r7}
 800c28a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c28c:	bf00      	nop
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
	...

0800c298 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d108      	bne.n	800c2be <netif_add+0x26>
 800c2ac:	4b57      	ldr	r3, [pc, #348]	@ (800c40c <netif_add+0x174>)
 800c2ae:	f240 1227 	movw	r2, #295	@ 0x127
 800c2b2:	4957      	ldr	r1, [pc, #348]	@ (800c410 <netif_add+0x178>)
 800c2b4:	4857      	ldr	r0, [pc, #348]	@ (800c414 <netif_add+0x17c>)
 800c2b6:	f007 f91b 	bl	80134f0 <iprintf>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e0a2      	b.n	800c404 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c2be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d108      	bne.n	800c2d6 <netif_add+0x3e>
 800c2c4:	4b51      	ldr	r3, [pc, #324]	@ (800c40c <netif_add+0x174>)
 800c2c6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c2ca:	4953      	ldr	r1, [pc, #332]	@ (800c418 <netif_add+0x180>)
 800c2cc:	4851      	ldr	r0, [pc, #324]	@ (800c414 <netif_add+0x17c>)
 800c2ce:	f007 f90f 	bl	80134f0 <iprintf>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e096      	b.n	800c404 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c2d6:	68bb      	ldr	r3, [r7, #8]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d101      	bne.n	800c2e0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c2dc:	4b4f      	ldr	r3, [pc, #316]	@ (800c41c <netif_add+0x184>)
 800c2de:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d101      	bne.n	800c2ea <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c2e6:	4b4d      	ldr	r3, [pc, #308]	@ (800c41c <netif_add+0x184>)
 800c2e8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c2f0:	4b4a      	ldr	r3, [pc, #296]	@ (800c41c <netif_add+0x184>)
 800c2f2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2200      	movs	r2, #0
 800c304:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4a45      	ldr	r2, [pc, #276]	@ (800c420 <netif_add+0x188>)
 800c30a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	2200      	movs	r2, #0
 800c310:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	2200      	movs	r2, #0
 800c316:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	6a3a      	ldr	r2, [r7, #32]
 800c324:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c326:	4b3f      	ldr	r3, [pc, #252]	@ (800c424 <netif_add+0x18c>)
 800c328:	781a      	ldrb	r2, [r3, #0]
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c334:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	68b9      	ldr	r1, [r7, #8]
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f000 f913 	bl	800c568 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c344:	68f8      	ldr	r0, [r7, #12]
 800c346:	4798      	blx	r3
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d001      	beq.n	800c352 <netif_add+0xba>
    return NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	e058      	b.n	800c404 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c358:	2bff      	cmp	r3, #255	@ 0xff
 800c35a:	d103      	bne.n	800c364 <netif_add+0xcc>
        netif->num = 0;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c368:	4b2f      	ldr	r3, [pc, #188]	@ (800c428 <netif_add+0x190>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	617b      	str	r3, [r7, #20]
 800c36e:	e02b      	b.n	800c3c8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	429a      	cmp	r2, r3
 800c376:	d106      	bne.n	800c386 <netif_add+0xee>
 800c378:	4b24      	ldr	r3, [pc, #144]	@ (800c40c <netif_add+0x174>)
 800c37a:	f240 128b 	movw	r2, #395	@ 0x18b
 800c37e:	492b      	ldr	r1, [pc, #172]	@ (800c42c <netif_add+0x194>)
 800c380:	4824      	ldr	r0, [pc, #144]	@ (800c414 <netif_add+0x17c>)
 800c382:	f007 f8b5 	bl	80134f0 <iprintf>
        num_netifs++;
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	3301      	adds	r3, #1
 800c38a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c38c:	693b      	ldr	r3, [r7, #16]
 800c38e:	2bff      	cmp	r3, #255	@ 0xff
 800c390:	dd06      	ble.n	800c3a0 <netif_add+0x108>
 800c392:	4b1e      	ldr	r3, [pc, #120]	@ (800c40c <netif_add+0x174>)
 800c394:	f240 128d 	movw	r2, #397	@ 0x18d
 800c398:	4925      	ldr	r1, [pc, #148]	@ (800c430 <netif_add+0x198>)
 800c39a:	481e      	ldr	r0, [pc, #120]	@ (800c414 <netif_add+0x17c>)
 800c39c:	f007 f8a8 	bl	80134f0 <iprintf>
        if (netif2->num == netif->num) {
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d108      	bne.n	800c3c2 <netif_add+0x12a>
          netif->num++;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	b2da      	uxtb	r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800c3c0:	e005      	b.n	800c3ce <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	617b      	str	r3, [r7, #20]
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1d0      	bne.n	800c370 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d1be      	bne.n	800c352 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3da:	2bfe      	cmp	r3, #254	@ 0xfe
 800c3dc:	d103      	bne.n	800c3e6 <netif_add+0x14e>
    netif_num = 0;
 800c3de:	4b11      	ldr	r3, [pc, #68]	@ (800c424 <netif_add+0x18c>)
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	701a      	strb	r2, [r3, #0]
 800c3e4:	e006      	b.n	800c3f4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	b2da      	uxtb	r2, r3
 800c3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800c424 <netif_add+0x18c>)
 800c3f2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c3f4:	4b0c      	ldr	r3, [pc, #48]	@ (800c428 <netif_add+0x190>)
 800c3f6:	681a      	ldr	r2, [r3, #0]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c3fc:	4a0a      	ldr	r2, [pc, #40]	@ (800c428 <netif_add+0x190>)
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c402:	68fb      	ldr	r3, [r7, #12]
}
 800c404:	4618      	mov	r0, r3
 800c406:	3718      	adds	r7, #24
 800c408:	46bd      	mov	sp, r7
 800c40a:	bd80      	pop	{r7, pc}
 800c40c:	08014ef4 	.word	0x08014ef4
 800c410:	08014fb0 	.word	0x08014fb0
 800c414:	08014f6c 	.word	0x08014f6c
 800c418:	08014fcc 	.word	0x08014fcc
 800c41c:	080170fc 	.word	0x080170fc
 800c420:	0800c843 	.word	0x0800c843
 800c424:	24008470 	.word	0x24008470
 800c428:	24008468 	.word	0x24008468
 800c42c:	08014ff0 	.word	0x08014ff0
 800c430:	08015004 	.word	0x08015004

0800c434 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f002 fc71 	bl	800ed28 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f006 ff21 	bl	8013290 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c44e:	bf00      	nop
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d106      	bne.n	800c478 <netif_do_set_ipaddr+0x20>
 800c46a:	4b1d      	ldr	r3, [pc, #116]	@ (800c4e0 <netif_do_set_ipaddr+0x88>)
 800c46c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800c470:	491c      	ldr	r1, [pc, #112]	@ (800c4e4 <netif_do_set_ipaddr+0x8c>)
 800c472:	481d      	ldr	r0, [pc, #116]	@ (800c4e8 <netif_do_set_ipaddr+0x90>)
 800c474:	f007 f83c 	bl	80134f0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d106      	bne.n	800c48c <netif_do_set_ipaddr+0x34>
 800c47e:	4b18      	ldr	r3, [pc, #96]	@ (800c4e0 <netif_do_set_ipaddr+0x88>)
 800c480:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800c484:	4917      	ldr	r1, [pc, #92]	@ (800c4e4 <netif_do_set_ipaddr+0x8c>)
 800c486:	4818      	ldr	r0, [pc, #96]	@ (800c4e8 <netif_do_set_ipaddr+0x90>)
 800c488:	f007 f832 	bl	80134f0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3304      	adds	r3, #4
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	429a      	cmp	r2, r3
 800c498:	d01c      	beq.n	800c4d4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	3304      	adds	r3, #4
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c4aa:	f107 0314 	add.w	r3, r7, #20
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f7ff ffbf 	bl	800c434 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <netif_do_set_ipaddr+0x6a>
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	e000      	b.n	800c4c4 <netif_do_set_ipaddr+0x6c>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	68fa      	ldr	r2, [r7, #12]
 800c4c6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	68f8      	ldr	r0, [r7, #12]
 800c4cc:	f000 f8d2 	bl	800c674 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e000      	b.n	800c4d6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c4d4:	2300      	movs	r3, #0
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3718      	adds	r7, #24
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	08014ef4 	.word	0x08014ef4
 800c4e4:	08015034 	.word	0x08015034
 800c4e8:	08014f6c 	.word	0x08014f6c

0800c4ec <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	3308      	adds	r3, #8
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	429a      	cmp	r2, r3
 800c504:	d00a      	beq.n	800c51c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d002      	beq.n	800c512 <netif_do_set_netmask+0x26>
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	e000      	b.n	800c514 <netif_do_set_netmask+0x28>
 800c512:	2300      	movs	r3, #0
 800c514:	68fa      	ldr	r2, [r7, #12]
 800c516:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c518:	2301      	movs	r3, #1
 800c51a:	e000      	b.n	800c51e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr

0800c52a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c52a:	b480      	push	{r7}
 800c52c:	b085      	sub	sp, #20
 800c52e:	af00      	add	r7, sp, #0
 800c530:	60f8      	str	r0, [r7, #12]
 800c532:	60b9      	str	r1, [r7, #8]
 800c534:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	330c      	adds	r3, #12
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	429a      	cmp	r2, r3
 800c542:	d00a      	beq.n	800c55a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <netif_do_set_gw+0x26>
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	e000      	b.n	800c552 <netif_do_set_gw+0x28>
 800c550:	2300      	movs	r3, #0
 800c552:	68fa      	ldr	r2, [r7, #12]
 800c554:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c556:	2301      	movs	r3, #1
 800c558:	e000      	b.n	800c55c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c55a:	2300      	movs	r3, #0
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3714      	adds	r7, #20
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b088      	sub	sp, #32
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	60f8      	str	r0, [r7, #12]
 800c570:	60b9      	str	r1, [r7, #8]
 800c572:	607a      	str	r2, [r7, #4]
 800c574:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c576:	2300      	movs	r3, #0
 800c578:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c57a:	2300      	movs	r3, #0
 800c57c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d101      	bne.n	800c588 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c584:	4b1c      	ldr	r3, [pc, #112]	@ (800c5f8 <netif_set_addr+0x90>)
 800c586:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d101      	bne.n	800c592 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c58e:	4b1a      	ldr	r3, [pc, #104]	@ (800c5f8 <netif_set_addr+0x90>)
 800c590:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c598:	4b17      	ldr	r3, [pc, #92]	@ (800c5f8 <netif_set_addr+0x90>)
 800c59a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d003      	beq.n	800c5aa <netif_set_addr+0x42>
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <netif_set_addr+0x46>
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e000      	b.n	800c5b0 <netif_set_addr+0x48>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d006      	beq.n	800c5c6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c5b8:	f107 0310 	add.w	r3, r7, #16
 800c5bc:	461a      	mov	r2, r3
 800c5be:	68b9      	ldr	r1, [r7, #8]
 800c5c0:	68f8      	ldr	r0, [r7, #12]
 800c5c2:	f7ff ff49 	bl	800c458 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	6879      	ldr	r1, [r7, #4]
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff ff8e 	bl	800c4ec <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c5d0:	69ba      	ldr	r2, [r7, #24]
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f7ff ffa8 	bl	800c52a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c5da:	697b      	ldr	r3, [r7, #20]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c5e0:	f107 0310 	add.w	r3, r7, #16
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	68b9      	ldr	r1, [r7, #8]
 800c5e8:	68f8      	ldr	r0, [r7, #12]
 800c5ea:	f7ff ff35 	bl	800c458 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c5ee:	bf00      	nop
 800c5f0:	3720      	adds	r7, #32
 800c5f2:	46bd      	mov	sp, r7
 800c5f4:	bd80      	pop	{r7, pc}
 800c5f6:	bf00      	nop
 800c5f8:	080170fc 	.word	0x080170fc

0800c5fc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c604:	4a04      	ldr	r2, [pc, #16]	@ (800c618 <netif_set_default+0x1c>)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c60a:	bf00      	nop
 800c60c:	370c      	adds	r7, #12
 800c60e:	46bd      	mov	sp, r7
 800c610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c614:	4770      	bx	lr
 800c616:	bf00      	nop
 800c618:	2400846c 	.word	0x2400846c

0800c61c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d107      	bne.n	800c63a <netif_set_up+0x1e>
 800c62a:	4b0f      	ldr	r3, [pc, #60]	@ (800c668 <netif_set_up+0x4c>)
 800c62c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800c630:	490e      	ldr	r1, [pc, #56]	@ (800c66c <netif_set_up+0x50>)
 800c632:	480f      	ldr	r0, [pc, #60]	@ (800c670 <netif_set_up+0x54>)
 800c634:	f006 ff5c 	bl	80134f0 <iprintf>
 800c638:	e013      	b.n	800c662 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c640:	f003 0301 	and.w	r3, r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10c      	bne.n	800c662 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c64e:	f043 0301 	orr.w	r3, r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c65a:	2103      	movs	r1, #3
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f809 	bl	800c674 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	08014ef4 	.word	0x08014ef4
 800c66c:	080150a4 	.word	0x080150a4
 800c670:	08014f6c 	.word	0x08014f6c

0800c674 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	460b      	mov	r3, r1
 800c67e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d106      	bne.n	800c694 <netif_issue_reports+0x20>
 800c686:	4b18      	ldr	r3, [pc, #96]	@ (800c6e8 <netif_issue_reports+0x74>)
 800c688:	f240 326d 	movw	r2, #877	@ 0x36d
 800c68c:	4917      	ldr	r1, [pc, #92]	@ (800c6ec <netif_issue_reports+0x78>)
 800c68e:	4818      	ldr	r0, [pc, #96]	@ (800c6f0 <netif_issue_reports+0x7c>)
 800c690:	f006 ff2e 	bl	80134f0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c69a:	f003 0304 	and.w	r3, r3, #4
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d01e      	beq.n	800c6e0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6a8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d017      	beq.n	800c6e0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6b0:	78fb      	ldrb	r3, [r7, #3]
 800c6b2:	f003 0301 	and.w	r3, r3, #1
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d013      	beq.n	800c6e2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	3304      	adds	r3, #4
 800c6be:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00e      	beq.n	800c6e2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c6ca:	f003 0308 	and.w	r3, r3, #8
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d007      	beq.n	800c6e2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	4619      	mov	r1, r3
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f7fd fd03 	bl	800a0e4 <etharp_request>
 800c6de:	e000      	b.n	800c6e2 <netif_issue_reports+0x6e>
    return;
 800c6e0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	08014ef4 	.word	0x08014ef4
 800c6ec:	080150c0 	.word	0x080150c0
 800c6f0:	08014f6c 	.word	0x08014f6c

0800c6f4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d107      	bne.n	800c712 <netif_set_down+0x1e>
 800c702:	4b12      	ldr	r3, [pc, #72]	@ (800c74c <netif_set_down+0x58>)
 800c704:	f240 329b 	movw	r2, #923	@ 0x39b
 800c708:	4911      	ldr	r1, [pc, #68]	@ (800c750 <netif_set_down+0x5c>)
 800c70a:	4812      	ldr	r0, [pc, #72]	@ (800c754 <netif_set_down+0x60>)
 800c70c:	f006 fef0 	bl	80134f0 <iprintf>
 800c710:	e019      	b.n	800c746 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c718:	f003 0301 	and.w	r3, r3, #1
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d012      	beq.n	800c746 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c726:	f023 0301 	bic.w	r3, r3, #1
 800c72a:	b2da      	uxtb	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c738:	f003 0308 	and.w	r3, r3, #8
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7fd f88d 	bl	8009860 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	08014ef4 	.word	0x08014ef4
 800c750:	080150e4 	.word	0x080150e4
 800c754:	08014f6c 	.word	0x08014f6c

0800c758 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d107      	bne.n	800c776 <netif_set_link_up+0x1e>
 800c766:	4b13      	ldr	r3, [pc, #76]	@ (800c7b4 <netif_set_link_up+0x5c>)
 800c768:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800c76c:	4912      	ldr	r1, [pc, #72]	@ (800c7b8 <netif_set_link_up+0x60>)
 800c76e:	4813      	ldr	r0, [pc, #76]	@ (800c7bc <netif_set_link_up+0x64>)
 800c770:	f006 febe 	bl	80134f0 <iprintf>
 800c774:	e01b      	b.n	800c7ae <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c77c:	f003 0304 	and.w	r3, r3, #4
 800c780:	2b00      	cmp	r3, #0
 800c782:	d114      	bne.n	800c7ae <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c78a:	f043 0304 	orr.w	r3, r3, #4
 800c78e:	b2da      	uxtb	r2, r3
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c796:	2103      	movs	r1, #3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f7ff ff6b 	bl	800c674 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	69db      	ldr	r3, [r3, #28]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <netif_set_link_up+0x56>
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	69db      	ldr	r3, [r3, #28]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}
 800c7b4:	08014ef4 	.word	0x08014ef4
 800c7b8:	08015104 	.word	0x08015104
 800c7bc:	08014f6c 	.word	0x08014f6c

0800c7c0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b082      	sub	sp, #8
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d107      	bne.n	800c7de <netif_set_link_down+0x1e>
 800c7ce:	4b11      	ldr	r3, [pc, #68]	@ (800c814 <netif_set_link_down+0x54>)
 800c7d0:	f240 4206 	movw	r2, #1030	@ 0x406
 800c7d4:	4910      	ldr	r1, [pc, #64]	@ (800c818 <netif_set_link_down+0x58>)
 800c7d6:	4811      	ldr	r0, [pc, #68]	@ (800c81c <netif_set_link_down+0x5c>)
 800c7d8:	f006 fe8a 	bl	80134f0 <iprintf>
 800c7dc:	e017      	b.n	800c80e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7e4:	f003 0304 	and.w	r3, r3, #4
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d010      	beq.n	800c80e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c7f2:	f023 0304 	bic.w	r3, r3, #4
 800c7f6:	b2da      	uxtb	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d003      	beq.n	800c80e <netif_set_link_down+0x4e>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	69db      	ldr	r3, [r3, #28]
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c80e:	3708      	adds	r7, #8
 800c810:	46bd      	mov	sp, r7
 800c812:	bd80      	pop	{r7, pc}
 800c814:	08014ef4 	.word	0x08014ef4
 800c818:	08015128 	.word	0x08015128
 800c81c:	08014f6c 	.word	0x08014f6c

0800c820 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c820:	b480      	push	{r7}
 800c822:	b083      	sub	sp, #12
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d002      	beq.n	800c836 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	683a      	ldr	r2, [r7, #0]
 800c834:	61da      	str	r2, [r3, #28]
  }
}
 800c836:	bf00      	nop
 800c838:	370c      	adds	r7, #12
 800c83a:	46bd      	mov	sp, r7
 800c83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c840:	4770      	bx	lr

0800c842 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c842:	b480      	push	{r7}
 800c844:	b085      	sub	sp, #20
 800c846:	af00      	add	r7, sp, #0
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	60b9      	str	r1, [r7, #8]
 800c84c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c84e:	f06f 030b 	mvn.w	r3, #11
}
 800c852:	4618      	mov	r0, r3
 800c854:	3714      	adds	r7, #20
 800c856:	46bd      	mov	sp, r7
 800c858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85c:	4770      	bx	lr
	...

0800c860 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	4603      	mov	r3, r0
 800c868:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c86a:	79fb      	ldrb	r3, [r7, #7]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d013      	beq.n	800c898 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c870:	4b0d      	ldr	r3, [pc, #52]	@ (800c8a8 <netif_get_by_index+0x48>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60fb      	str	r3, [r7, #12]
 800c876:	e00c      	b.n	800c892 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800c87e:	3301      	adds	r3, #1
 800c880:	b2db      	uxtb	r3, r3
 800c882:	79fa      	ldrb	r2, [r7, #7]
 800c884:	429a      	cmp	r2, r3
 800c886:	d101      	bne.n	800c88c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	e006      	b.n	800c89a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1ef      	bne.n	800c878 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3714      	adds	r7, #20
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a4:	4770      	bx	lr
 800c8a6:	bf00      	nop
 800c8a8:	24008468 	.word	0x24008468

0800c8ac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c8b2:	f000 fed1 	bl	800d658 <sys_arch_protect>
 800c8b6:	6038      	str	r0, [r7, #0]
 800c8b8:	4b0d      	ldr	r3, [pc, #52]	@ (800c8f0 <pbuf_free_ooseq+0x44>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	6838      	ldr	r0, [r7, #0]
 800c8c0:	f000 fed8 	bl	800d674 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8c4:	4b0b      	ldr	r3, [pc, #44]	@ (800c8f4 <pbuf_free_ooseq+0x48>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	607b      	str	r3, [r7, #4]
 800c8ca:	e00a      	b.n	800c8e2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d003      	beq.n	800c8dc <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f002 fa65 	bl	800eda4 <tcp_free_ooseq>
      return;
 800c8da:	e005      	b.n	800c8e8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	607b      	str	r3, [r7, #4]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1f1      	bne.n	800c8cc <pbuf_free_ooseq+0x20>
    }
  }
}
 800c8e8:	3708      	adds	r7, #8
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	24008471 	.word	0x24008471
 800c8f4:	24008488 	.word	0x24008488

0800c8f8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c900:	f7ff ffd4 	bl	800c8ac <pbuf_free_ooseq>
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c912:	f000 fea1 	bl	800d658 <sys_arch_protect>
 800c916:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c918:	4b0f      	ldr	r3, [pc, #60]	@ (800c958 <pbuf_pool_is_empty+0x4c>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c91e:	4b0e      	ldr	r3, [pc, #56]	@ (800c958 <pbuf_pool_is_empty+0x4c>)
 800c920:	2201      	movs	r2, #1
 800c922:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 fea5 	bl	800d674 <sys_arch_unprotect>

  if (!queued) {
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10f      	bne.n	800c950 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c930:	2100      	movs	r1, #0
 800c932:	480a      	ldr	r0, [pc, #40]	@ (800c95c <pbuf_pool_is_empty+0x50>)
 800c934:	f006 f8fa 	bl	8012b2c <tcpip_try_callback>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d008      	beq.n	800c950 <pbuf_pool_is_empty+0x44>
 800c93e:	f000 fe8b 	bl	800d658 <sys_arch_protect>
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	4b04      	ldr	r3, [pc, #16]	@ (800c958 <pbuf_pool_is_empty+0x4c>)
 800c946:	2200      	movs	r2, #0
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	6878      	ldr	r0, [r7, #4]
 800c94c:	f000 fe92 	bl	800d674 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c950:	bf00      	nop
 800c952:	3708      	adds	r7, #8
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	24008471 	.word	0x24008471
 800c95c:	0800c8f9 	.word	0x0800c8f9

0800c960 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4611      	mov	r1, r2
 800c96c:	461a      	mov	r2, r3
 800c96e:	460b      	mov	r3, r1
 800c970:	80fb      	strh	r3, [r7, #6]
 800c972:	4613      	mov	r3, r2
 800c974:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	68ba      	ldr	r2, [r7, #8]
 800c980:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	88fa      	ldrh	r2, [r7, #6]
 800c986:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	88ba      	ldrh	r2, [r7, #4]
 800c98c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c98e:	8b3b      	ldrh	r3, [r7, #24]
 800c990:	b2da      	uxtb	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	7f3a      	ldrb	r2, [r7, #28]
 800c99a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	73da      	strb	r2, [r3, #15]
}
 800c9a8:	bf00      	nop
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b08c      	sub	sp, #48	@ 0x30
 800c9b8:	af02      	add	r7, sp, #8
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	71fb      	strb	r3, [r7, #7]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	80bb      	strh	r3, [r7, #4]
 800c9c2:	4613      	mov	r3, r2
 800c9c4:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c9c6:	79fb      	ldrb	r3, [r7, #7]
 800c9c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800c9ca:	887b      	ldrh	r3, [r7, #2]
 800c9cc:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c9d0:	d07f      	beq.n	800cad2 <pbuf_alloc+0x11e>
 800c9d2:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c9d6:	f300 80c8 	bgt.w	800cb6a <pbuf_alloc+0x1b6>
 800c9da:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c9de:	d010      	beq.n	800ca02 <pbuf_alloc+0x4e>
 800c9e0:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c9e4:	f300 80c1 	bgt.w	800cb6a <pbuf_alloc+0x1b6>
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	d002      	beq.n	800c9f2 <pbuf_alloc+0x3e>
 800c9ec:	2b41      	cmp	r3, #65	@ 0x41
 800c9ee:	f040 80bc 	bne.w	800cb6a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c9f2:	887a      	ldrh	r2, [r7, #2]
 800c9f4:	88bb      	ldrh	r3, [r7, #4]
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	f000 f8d1 	bl	800cba0 <pbuf_alloc_reference>
 800c9fe:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800ca00:	e0bd      	b.n	800cb7e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ca02:	2300      	movs	r3, #0
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ca0a:	88bb      	ldrh	r3, [r7, #4]
 800ca0c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ca0e:	200c      	movs	r0, #12
 800ca10:	f7ff fb9a 	bl	800c148 <memp_malloc>
 800ca14:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d109      	bne.n	800ca30 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ca1c:	f7ff ff76 	bl	800c90c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ca20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d002      	beq.n	800ca2c <pbuf_alloc+0x78>
            pbuf_free(p);
 800ca26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ca28:	f000 faa8 	bl	800cf7c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e0a7      	b.n	800cb80 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ca30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca32:	3303      	adds	r3, #3
 800ca34:	b29b      	uxth	r3, r3
 800ca36:	f023 0303 	bic.w	r3, r3, #3
 800ca3a:	b29b      	uxth	r3, r3
 800ca3c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	8b7a      	ldrh	r2, [r7, #26]
 800ca44:	4293      	cmp	r3, r2
 800ca46:	bf28      	it	cs
 800ca48:	4613      	movcs	r3, r2
 800ca4a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ca4c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca4e:	3310      	adds	r3, #16
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	4413      	add	r3, r2
 800ca54:	3303      	adds	r3, #3
 800ca56:	f023 0303 	bic.w	r3, r3, #3
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	89f9      	ldrh	r1, [r7, #14]
 800ca5e:	8b7a      	ldrh	r2, [r7, #26]
 800ca60:	2300      	movs	r3, #0
 800ca62:	9301      	str	r3, [sp, #4]
 800ca64:	887b      	ldrh	r3, [r7, #2]
 800ca66:	9300      	str	r3, [sp, #0]
 800ca68:	460b      	mov	r3, r1
 800ca6a:	4601      	mov	r1, r0
 800ca6c:	6938      	ldr	r0, [r7, #16]
 800ca6e:	f7ff ff77 	bl	800c960 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	f003 0303 	and.w	r3, r3, #3
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d006      	beq.n	800ca8c <pbuf_alloc+0xd8>
 800ca7e:	4b42      	ldr	r3, [pc, #264]	@ (800cb88 <pbuf_alloc+0x1d4>)
 800ca80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca84:	4941      	ldr	r1, [pc, #260]	@ (800cb8c <pbuf_alloc+0x1d8>)
 800ca86:	4842      	ldr	r0, [pc, #264]	@ (800cb90 <pbuf_alloc+0x1dc>)
 800ca88:	f006 fd32 	bl	80134f0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ca8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800ca8e:	3303      	adds	r3, #3
 800ca90:	f023 0303 	bic.w	r3, r3, #3
 800ca94:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800ca98:	d106      	bne.n	800caa8 <pbuf_alloc+0xf4>
 800ca9a:	4b3b      	ldr	r3, [pc, #236]	@ (800cb88 <pbuf_alloc+0x1d4>)
 800ca9c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800caa0:	493c      	ldr	r1, [pc, #240]	@ (800cb94 <pbuf_alloc+0x1e0>)
 800caa2:	483b      	ldr	r0, [pc, #236]	@ (800cb90 <pbuf_alloc+0x1dc>)
 800caa4:	f006 fd24 	bl	80134f0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800caa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d102      	bne.n	800cab4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cab2:	e002      	b.n	800caba <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	693a      	ldr	r2, [r7, #16]
 800cab8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cabe:	8b7a      	ldrh	r2, [r7, #26]
 800cac0:	89fb      	ldrh	r3, [r7, #14]
 800cac2:	1ad3      	subs	r3, r2, r3
 800cac4:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800caca:	8b7b      	ldrh	r3, [r7, #26]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d19e      	bne.n	800ca0e <pbuf_alloc+0x5a>
      break;
 800cad0:	e055      	b.n	800cb7e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cad4:	3303      	adds	r3, #3
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	f023 0303 	bic.w	r3, r3, #3
 800cadc:	b29a      	uxth	r2, r3
 800cade:	88bb      	ldrh	r3, [r7, #4]
 800cae0:	3303      	adds	r3, #3
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	f023 0303 	bic.w	r3, r3, #3
 800cae8:	b29b      	uxth	r3, r3
 800caea:	4413      	add	r3, r2
 800caec:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800caee:	8b3b      	ldrh	r3, [r7, #24]
 800caf0:	3310      	adds	r3, #16
 800caf2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800caf4:	8b3a      	ldrh	r2, [r7, #24]
 800caf6:	88bb      	ldrh	r3, [r7, #4]
 800caf8:	3303      	adds	r3, #3
 800cafa:	f023 0303 	bic.w	r3, r3, #3
 800cafe:	429a      	cmp	r2, r3
 800cb00:	d306      	bcc.n	800cb10 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cb02:	8afa      	ldrh	r2, [r7, #22]
 800cb04:	88bb      	ldrh	r3, [r7, #4]
 800cb06:	3303      	adds	r3, #3
 800cb08:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d201      	bcs.n	800cb14 <pbuf_alloc+0x160>
        return NULL;
 800cb10:	2300      	movs	r3, #0
 800cb12:	e035      	b.n	800cb80 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800cb14:	8afb      	ldrh	r3, [r7, #22]
 800cb16:	4618      	mov	r0, r3
 800cb18:	f7ff f972 	bl	800be00 <mem_malloc>
 800cb1c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d101      	bne.n	800cb28 <pbuf_alloc+0x174>
        return NULL;
 800cb24:	2300      	movs	r3, #0
 800cb26:	e02b      	b.n	800cb80 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800cb28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cb2a:	3310      	adds	r3, #16
 800cb2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb2e:	4413      	add	r3, r2
 800cb30:	3303      	adds	r3, #3
 800cb32:	f023 0303 	bic.w	r3, r3, #3
 800cb36:	4618      	mov	r0, r3
 800cb38:	88b9      	ldrh	r1, [r7, #4]
 800cb3a:	88ba      	ldrh	r2, [r7, #4]
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	9301      	str	r3, [sp, #4]
 800cb40:	887b      	ldrh	r3, [r7, #2]
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	460b      	mov	r3, r1
 800cb46:	4601      	mov	r1, r0
 800cb48:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cb4a:	f7ff ff09 	bl	800c960 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	f003 0303 	and.w	r3, r3, #3
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d010      	beq.n	800cb7c <pbuf_alloc+0x1c8>
 800cb5a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb88 <pbuf_alloc+0x1d4>)
 800cb5c:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800cb60:	490d      	ldr	r1, [pc, #52]	@ (800cb98 <pbuf_alloc+0x1e4>)
 800cb62:	480b      	ldr	r0, [pc, #44]	@ (800cb90 <pbuf_alloc+0x1dc>)
 800cb64:	f006 fcc4 	bl	80134f0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800cb68:	e008      	b.n	800cb7c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cb6a:	4b07      	ldr	r3, [pc, #28]	@ (800cb88 <pbuf_alloc+0x1d4>)
 800cb6c:	f240 1227 	movw	r2, #295	@ 0x127
 800cb70:	490a      	ldr	r1, [pc, #40]	@ (800cb9c <pbuf_alloc+0x1e8>)
 800cb72:	4807      	ldr	r0, [pc, #28]	@ (800cb90 <pbuf_alloc+0x1dc>)
 800cb74:	f006 fcbc 	bl	80134f0 <iprintf>
      return NULL;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	e001      	b.n	800cb80 <pbuf_alloc+0x1cc>
      break;
 800cb7c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3728      	adds	r7, #40	@ 0x28
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	0801514c 	.word	0x0801514c
 800cb8c:	080151a8 	.word	0x080151a8
 800cb90:	080151d8 	.word	0x080151d8
 800cb94:	08015200 	.word	0x08015200
 800cb98:	08015234 	.word	0x08015234
 800cb9c:	08015260 	.word	0x08015260

0800cba0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af02      	add	r7, sp, #8
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	807b      	strh	r3, [r7, #2]
 800cbac:	4613      	mov	r3, r2
 800cbae:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cbb0:	883b      	ldrh	r3, [r7, #0]
 800cbb2:	2b41      	cmp	r3, #65	@ 0x41
 800cbb4:	d009      	beq.n	800cbca <pbuf_alloc_reference+0x2a>
 800cbb6:	883b      	ldrh	r3, [r7, #0]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d006      	beq.n	800cbca <pbuf_alloc_reference+0x2a>
 800cbbc:	4b0f      	ldr	r3, [pc, #60]	@ (800cbfc <pbuf_alloc_reference+0x5c>)
 800cbbe:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800cbc2:	490f      	ldr	r1, [pc, #60]	@ (800cc00 <pbuf_alloc_reference+0x60>)
 800cbc4:	480f      	ldr	r0, [pc, #60]	@ (800cc04 <pbuf_alloc_reference+0x64>)
 800cbc6:	f006 fc93 	bl	80134f0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cbca:	200b      	movs	r0, #11
 800cbcc:	f7ff fabc 	bl	800c148 <memp_malloc>
 800cbd0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d101      	bne.n	800cbdc <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	e00b      	b.n	800cbf4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800cbdc:	8879      	ldrh	r1, [r7, #2]
 800cbde:	887a      	ldrh	r2, [r7, #2]
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	9301      	str	r3, [sp, #4]
 800cbe4:	883b      	ldrh	r3, [r7, #0]
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	460b      	mov	r3, r1
 800cbea:	6879      	ldr	r1, [r7, #4]
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f7ff feb7 	bl	800c960 <pbuf_init_alloced_pbuf>
  return p;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	0801514c 	.word	0x0801514c
 800cc00:	0801527c 	.word	0x0801527c
 800cc04:	080151d8 	.word	0x080151d8

0800cc08 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b088      	sub	sp, #32
 800cc0c:	af02      	add	r7, sp, #8
 800cc0e:	607b      	str	r3, [r7, #4]
 800cc10:	4603      	mov	r3, r0
 800cc12:	73fb      	strb	r3, [r7, #15]
 800cc14:	460b      	mov	r3, r1
 800cc16:	81bb      	strh	r3, [r7, #12]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cc1c:	7bfb      	ldrb	r3, [r7, #15]
 800cc1e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cc20:	8a7b      	ldrh	r3, [r7, #18]
 800cc22:	3303      	adds	r3, #3
 800cc24:	f023 0203 	bic.w	r2, r3, #3
 800cc28:	89bb      	ldrh	r3, [r7, #12]
 800cc2a:	441a      	add	r2, r3
 800cc2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc2e:	429a      	cmp	r2, r3
 800cc30:	d901      	bls.n	800cc36 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cc32:	2300      	movs	r3, #0
 800cc34:	e018      	b.n	800cc68 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cc36:	6a3b      	ldr	r3, [r7, #32]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d007      	beq.n	800cc4c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cc3c:	8a7b      	ldrh	r3, [r7, #18]
 800cc3e:	3303      	adds	r3, #3
 800cc40:	f023 0303 	bic.w	r3, r3, #3
 800cc44:	6a3a      	ldr	r2, [r7, #32]
 800cc46:	4413      	add	r3, r2
 800cc48:	617b      	str	r3, [r7, #20]
 800cc4a:	e001      	b.n	800cc50 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cc50:	6878      	ldr	r0, [r7, #4]
 800cc52:	89b9      	ldrh	r1, [r7, #12]
 800cc54:	89ba      	ldrh	r2, [r7, #12]
 800cc56:	2302      	movs	r3, #2
 800cc58:	9301      	str	r3, [sp, #4]
 800cc5a:	897b      	ldrh	r3, [r7, #10]
 800cc5c:	9300      	str	r3, [sp, #0]
 800cc5e:	460b      	mov	r3, r1
 800cc60:	6979      	ldr	r1, [r7, #20]
 800cc62:	f7ff fe7d 	bl	800c960 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cc66:	687b      	ldr	r3, [r7, #4]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d106      	bne.n	800cc90 <pbuf_realloc+0x20>
 800cc82:	4b3a      	ldr	r3, [pc, #232]	@ (800cd6c <pbuf_realloc+0xfc>)
 800cc84:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800cc88:	4939      	ldr	r1, [pc, #228]	@ (800cd70 <pbuf_realloc+0x100>)
 800cc8a:	483a      	ldr	r0, [pc, #232]	@ (800cd74 <pbuf_realloc+0x104>)
 800cc8c:	f006 fc30 	bl	80134f0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	891b      	ldrh	r3, [r3, #8]
 800cc94:	887a      	ldrh	r2, [r7, #2]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d263      	bcs.n	800cd62 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	891a      	ldrh	r2, [r3, #8]
 800cc9e:	887b      	ldrh	r3, [r7, #2]
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cca4:	887b      	ldrh	r3, [r7, #2]
 800cca6:	817b      	strh	r3, [r7, #10]
  q = p;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ccac:	e018      	b.n	800cce0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	895b      	ldrh	r3, [r3, #10]
 800ccb2:	897a      	ldrh	r2, [r7, #10]
 800ccb4:	1ad3      	subs	r3, r2, r3
 800ccb6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	891a      	ldrh	r2, [r3, #8]
 800ccbc:	893b      	ldrh	r3, [r7, #8]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <pbuf_realloc+0x70>
 800ccd2:	4b26      	ldr	r3, [pc, #152]	@ (800cd6c <pbuf_realloc+0xfc>)
 800ccd4:	f240 12af 	movw	r2, #431	@ 0x1af
 800ccd8:	4927      	ldr	r1, [pc, #156]	@ (800cd78 <pbuf_realloc+0x108>)
 800ccda:	4826      	ldr	r0, [pc, #152]	@ (800cd74 <pbuf_realloc+0x104>)
 800ccdc:	f006 fc08 	bl	80134f0 <iprintf>
  while (rem_len > q->len) {
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	895b      	ldrh	r3, [r3, #10]
 800cce4:	897a      	ldrh	r2, [r7, #10]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d8e1      	bhi.n	800ccae <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	7b1b      	ldrb	r3, [r3, #12]
 800ccee:	f003 030f 	and.w	r3, r3, #15
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d121      	bne.n	800cd3a <pbuf_realloc+0xca>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	895b      	ldrh	r3, [r3, #10]
 800ccfa:	897a      	ldrh	r2, [r7, #10]
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d01c      	beq.n	800cd3a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	7b5b      	ldrb	r3, [r3, #13]
 800cd04:	f003 0302 	and.w	r3, r3, #2
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d116      	bne.n	800cd3a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	685a      	ldr	r2, [r3, #4]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	897b      	ldrh	r3, [r7, #10]
 800cd18:	4413      	add	r3, r2
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	68f8      	ldr	r0, [r7, #12]
 800cd20:	f7fe ff64 	bl	800bbec <mem_trim>
 800cd24:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d106      	bne.n	800cd3a <pbuf_realloc+0xca>
 800cd2c:	4b0f      	ldr	r3, [pc, #60]	@ (800cd6c <pbuf_realloc+0xfc>)
 800cd2e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800cd32:	4912      	ldr	r1, [pc, #72]	@ (800cd7c <pbuf_realloc+0x10c>)
 800cd34:	480f      	ldr	r0, [pc, #60]	@ (800cd74 <pbuf_realloc+0x104>)
 800cd36:	f006 fbdb 	bl	80134f0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	897a      	ldrh	r2, [r7, #10]
 800cd3e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	895a      	ldrh	r2, [r3, #10]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d004      	beq.n	800cd5a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 f911 	bl	800cf7c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	601a      	str	r2, [r3, #0]
 800cd60:	e000      	b.n	800cd64 <pbuf_realloc+0xf4>
    return;
 800cd62:	bf00      	nop

}
 800cd64:	3710      	adds	r7, #16
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	0801514c 	.word	0x0801514c
 800cd70:	08015290 	.word	0x08015290
 800cd74:	080151d8 	.word	0x080151d8
 800cd78:	080152a8 	.word	0x080152a8
 800cd7c:	080152c0 	.word	0x080152c0

0800cd80 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b086      	sub	sp, #24
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d106      	bne.n	800cda2 <pbuf_add_header_impl+0x22>
 800cd94:	4b2b      	ldr	r3, [pc, #172]	@ (800ce44 <pbuf_add_header_impl+0xc4>)
 800cd96:	f240 12df 	movw	r2, #479	@ 0x1df
 800cd9a:	492b      	ldr	r1, [pc, #172]	@ (800ce48 <pbuf_add_header_impl+0xc8>)
 800cd9c:	482b      	ldr	r0, [pc, #172]	@ (800ce4c <pbuf_add_header_impl+0xcc>)
 800cd9e:	f006 fba7 	bl	80134f0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d003      	beq.n	800cdb0 <pbuf_add_header_impl+0x30>
 800cda8:	68bb      	ldr	r3, [r7, #8]
 800cdaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cdae:	d301      	bcc.n	800cdb4 <pbuf_add_header_impl+0x34>
    return 1;
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	e043      	b.n	800ce3c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <pbuf_add_header_impl+0x3e>
    return 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	e03e      	b.n	800ce3c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	891a      	ldrh	r2, [r3, #8]
 800cdc6:	8a7b      	ldrh	r3, [r7, #18]
 800cdc8:	4413      	add	r3, r2
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	8a7a      	ldrh	r2, [r7, #18]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d901      	bls.n	800cdd6 <pbuf_add_header_impl+0x56>
    return 1;
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e032      	b.n	800ce3c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	7b1b      	ldrb	r3, [r3, #12]
 800cdda:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800cddc:	8a3b      	ldrh	r3, [r7, #16]
 800cdde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d00c      	beq.n	800ce00 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	425b      	negs	r3, r3
 800cdee:	4413      	add	r3, r2
 800cdf0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	3310      	adds	r3, #16
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d20d      	bcs.n	800ce18 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800cdfc:	2301      	movs	r3, #1
 800cdfe:	e01d      	b.n	800ce3c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d006      	beq.n	800ce14 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	685a      	ldr	r2, [r3, #4]
 800ce0a:	68bb      	ldr	r3, [r7, #8]
 800ce0c:	425b      	negs	r3, r3
 800ce0e:	4413      	add	r3, r2
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	e001      	b.n	800ce18 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e011      	b.n	800ce3c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	697a      	ldr	r2, [r7, #20]
 800ce1c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	895a      	ldrh	r2, [r3, #10]
 800ce22:	8a7b      	ldrh	r3, [r7, #18]
 800ce24:	4413      	add	r3, r2
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	891a      	ldrh	r2, [r3, #8]
 800ce30:	8a7b      	ldrh	r3, [r7, #18]
 800ce32:	4413      	add	r3, r2
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	811a      	strh	r2, [r3, #8]


  return 0;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3718      	adds	r7, #24
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	0801514c 	.word	0x0801514c
 800ce48:	080152dc 	.word	0x080152dc
 800ce4c:	080151d8 	.word	0x080151d8

0800ce50 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f7ff ff8e 	bl	800cd80 <pbuf_add_header_impl>
 800ce64:	4603      	mov	r3, r0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
	...

0800ce70 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <pbuf_remove_header+0x1e>
 800ce80:	4b20      	ldr	r3, [pc, #128]	@ (800cf04 <pbuf_remove_header+0x94>)
 800ce82:	f240 224b 	movw	r2, #587	@ 0x24b
 800ce86:	4920      	ldr	r1, [pc, #128]	@ (800cf08 <pbuf_remove_header+0x98>)
 800ce88:	4820      	ldr	r0, [pc, #128]	@ (800cf0c <pbuf_remove_header+0x9c>)
 800ce8a:	f006 fb31 	bl	80134f0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d003      	beq.n	800ce9c <pbuf_remove_header+0x2c>
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ce9a:	d301      	bcc.n	800cea0 <pbuf_remove_header+0x30>
    return 1;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e02c      	b.n	800cefa <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <pbuf_remove_header+0x3a>
    return 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	e027      	b.n	800cefa <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	895b      	ldrh	r3, [r3, #10]
 800ceb2:	89fa      	ldrh	r2, [r7, #14]
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d908      	bls.n	800ceca <pbuf_remove_header+0x5a>
 800ceb8:	4b12      	ldr	r3, [pc, #72]	@ (800cf04 <pbuf_remove_header+0x94>)
 800ceba:	f240 2255 	movw	r2, #597	@ 0x255
 800cebe:	4914      	ldr	r1, [pc, #80]	@ (800cf10 <pbuf_remove_header+0xa0>)
 800cec0:	4812      	ldr	r0, [pc, #72]	@ (800cf0c <pbuf_remove_header+0x9c>)
 800cec2:	f006 fb15 	bl	80134f0 <iprintf>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e017      	b.n	800cefa <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	685b      	ldr	r3, [r3, #4]
 800cece:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	685a      	ldr	r2, [r3, #4]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	441a      	add	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	895a      	ldrh	r2, [r3, #10]
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	1ad3      	subs	r3, r2, r3
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	891a      	ldrh	r2, [r3, #8]
 800ceee:	89fb      	ldrh	r3, [r7, #14]
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	b29a      	uxth	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800cef8:	2300      	movs	r3, #0
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3710      	adds	r7, #16
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	0801514c 	.word	0x0801514c
 800cf08:	080152dc 	.word	0x080152dc
 800cf0c:	080151d8 	.word	0x080151d8
 800cf10:	080152e8 	.word	0x080152e8

0800cf14 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	807b      	strh	r3, [r7, #2]
 800cf20:	4613      	mov	r3, r2
 800cf22:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800cf24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	da08      	bge.n	800cf3e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800cf2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf30:	425b      	negs	r3, r3
 800cf32:	4619      	mov	r1, r3
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f7ff ff9b 	bl	800ce70 <pbuf_remove_header>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	e007      	b.n	800cf4e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800cf3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf42:	787a      	ldrb	r2, [r7, #1]
 800cf44:	4619      	mov	r1, r3
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff ff1a 	bl	800cd80 <pbuf_add_header_impl>
 800cf4c:	4603      	mov	r3, r0
  }
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}

0800cf56 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	460b      	mov	r3, r1
 800cf60:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800cf62:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800cf66:	2201      	movs	r2, #1
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f7ff ffd2 	bl	800cf14 <pbuf_header_impl>
 800cf70:	4603      	mov	r3, r0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b088      	sub	sp, #32
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d10b      	bne.n	800cfa2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d106      	bne.n	800cf9e <pbuf_free+0x22>
 800cf90:	4b3b      	ldr	r3, [pc, #236]	@ (800d080 <pbuf_free+0x104>)
 800cf92:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800cf96:	493b      	ldr	r1, [pc, #236]	@ (800d084 <pbuf_free+0x108>)
 800cf98:	483b      	ldr	r0, [pc, #236]	@ (800d088 <pbuf_free+0x10c>)
 800cf9a:	f006 faa9 	bl	80134f0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	e069      	b.n	800d076 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800cfa6:	e062      	b.n	800d06e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800cfa8:	f000 fb56 	bl	800d658 <sys_arch_protect>
 800cfac:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	7b9b      	ldrb	r3, [r3, #14]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d106      	bne.n	800cfc4 <pbuf_free+0x48>
 800cfb6:	4b32      	ldr	r3, [pc, #200]	@ (800d080 <pbuf_free+0x104>)
 800cfb8:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800cfbc:	4933      	ldr	r1, [pc, #204]	@ (800d08c <pbuf_free+0x110>)
 800cfbe:	4832      	ldr	r0, [pc, #200]	@ (800d088 <pbuf_free+0x10c>)
 800cfc0:	f006 fa96 	bl	80134f0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	7b9b      	ldrb	r3, [r3, #14]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	b2da      	uxtb	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	739a      	strb	r2, [r3, #14]
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	7b9b      	ldrb	r3, [r3, #14]
 800cfd4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800cfd6:	69b8      	ldr	r0, [r7, #24]
 800cfd8:	f000 fb4c 	bl	800d674 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800cfdc:	7dfb      	ldrb	r3, [r7, #23]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d143      	bne.n	800d06a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7b1b      	ldrb	r3, [r3, #12]
 800cfec:	f003 030f 	and.w	r3, r3, #15
 800cff0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	7b5b      	ldrb	r3, [r3, #13]
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d011      	beq.n	800d022 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	691b      	ldr	r3, [r3, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d106      	bne.n	800d018 <pbuf_free+0x9c>
 800d00a:	4b1d      	ldr	r3, [pc, #116]	@ (800d080 <pbuf_free+0x104>)
 800d00c:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800d010:	491f      	ldr	r1, [pc, #124]	@ (800d090 <pbuf_free+0x114>)
 800d012:	481d      	ldr	r0, [pc, #116]	@ (800d088 <pbuf_free+0x10c>)
 800d014:	f006 fa6c 	bl	80134f0 <iprintf>
        pc->custom_free_function(p);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	691b      	ldr	r3, [r3, #16]
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	4798      	blx	r3
 800d020:	e01d      	b.n	800d05e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d022:	7bfb      	ldrb	r3, [r7, #15]
 800d024:	2b02      	cmp	r3, #2
 800d026:	d104      	bne.n	800d032 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d028:	6879      	ldr	r1, [r7, #4]
 800d02a:	200c      	movs	r0, #12
 800d02c:	f7ff f902 	bl	800c234 <memp_free>
 800d030:	e015      	b.n	800d05e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d032:	7bfb      	ldrb	r3, [r7, #15]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d104      	bne.n	800d042 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	200b      	movs	r0, #11
 800d03c:	f7ff f8fa 	bl	800c234 <memp_free>
 800d040:	e00d      	b.n	800d05e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d103      	bne.n	800d050 <pbuf_free+0xd4>
          mem_free(p);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f7fe fd3f 	bl	800bacc <mem_free>
 800d04e:	e006      	b.n	800d05e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d050:	4b0b      	ldr	r3, [pc, #44]	@ (800d080 <pbuf_free+0x104>)
 800d052:	f240 320f 	movw	r2, #783	@ 0x30f
 800d056:	490f      	ldr	r1, [pc, #60]	@ (800d094 <pbuf_free+0x118>)
 800d058:	480b      	ldr	r0, [pc, #44]	@ (800d088 <pbuf_free+0x10c>)
 800d05a:	f006 fa49 	bl	80134f0 <iprintf>
        }
      }
      count++;
 800d05e:	7ffb      	ldrb	r3, [r7, #31]
 800d060:	3301      	adds	r3, #1
 800d062:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	607b      	str	r3, [r7, #4]
 800d068:	e001      	b.n	800d06e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d199      	bne.n	800cfa8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d074:	7ffb      	ldrb	r3, [r7, #31]
}
 800d076:	4618      	mov	r0, r3
 800d078:	3720      	adds	r7, #32
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd80      	pop	{r7, pc}
 800d07e:	bf00      	nop
 800d080:	0801514c 	.word	0x0801514c
 800d084:	080152dc 	.word	0x080152dc
 800d088:	080151d8 	.word	0x080151d8
 800d08c:	08015308 	.word	0x08015308
 800d090:	08015320 	.word	0x08015320
 800d094:	08015344 	.word	0x08015344

0800d098 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d0a4:	e005      	b.n	800d0b2 <pbuf_clen+0x1a>
    ++len;
 800d0a6:	89fb      	ldrh	r3, [r7, #14]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d1f6      	bne.n	800d0a6 <pbuf_clen+0xe>
  }
  return len;
 800d0b8:	89fb      	ldrh	r3, [r7, #14]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3714      	adds	r7, #20
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c4:	4770      	bx	lr
	...

0800d0c8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d016      	beq.n	800d104 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d0d6:	f000 fabf 	bl	800d658 <sys_arch_protect>
 800d0da:	60f8      	str	r0, [r7, #12]
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7b9b      	ldrb	r3, [r3, #14]
 800d0e0:	3301      	adds	r3, #1
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	739a      	strb	r2, [r3, #14]
 800d0e8:	68f8      	ldr	r0, [r7, #12]
 800d0ea:	f000 fac3 	bl	800d674 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	7b9b      	ldrb	r3, [r3, #14]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d106      	bne.n	800d104 <pbuf_ref+0x3c>
 800d0f6:	4b05      	ldr	r3, [pc, #20]	@ (800d10c <pbuf_ref+0x44>)
 800d0f8:	f240 3242 	movw	r2, #834	@ 0x342
 800d0fc:	4904      	ldr	r1, [pc, #16]	@ (800d110 <pbuf_ref+0x48>)
 800d0fe:	4805      	ldr	r0, [pc, #20]	@ (800d114 <pbuf_ref+0x4c>)
 800d100:	f006 f9f6 	bl	80134f0 <iprintf>
  }
}
 800d104:	bf00      	nop
 800d106:	3710      	adds	r7, #16
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}
 800d10c:	0801514c 	.word	0x0801514c
 800d110:	08015358 	.word	0x08015358
 800d114:	080151d8 	.word	0x080151d8

0800d118 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b084      	sub	sp, #16
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d002      	beq.n	800d12e <pbuf_cat+0x16>
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d107      	bne.n	800d13e <pbuf_cat+0x26>
 800d12e:	4b20      	ldr	r3, [pc, #128]	@ (800d1b0 <pbuf_cat+0x98>)
 800d130:	f240 3259 	movw	r2, #857	@ 0x359
 800d134:	491f      	ldr	r1, [pc, #124]	@ (800d1b4 <pbuf_cat+0x9c>)
 800d136:	4820      	ldr	r0, [pc, #128]	@ (800d1b8 <pbuf_cat+0xa0>)
 800d138:	f006 f9da 	bl	80134f0 <iprintf>
 800d13c:	e034      	b.n	800d1a8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	60fb      	str	r3, [r7, #12]
 800d142:	e00a      	b.n	800d15a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	891a      	ldrh	r2, [r3, #8]
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	891b      	ldrh	r3, [r3, #8]
 800d14c:	4413      	add	r3, r2
 800d14e:	b29a      	uxth	r2, r3
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	60fb      	str	r3, [r7, #12]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d1f0      	bne.n	800d144 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	891a      	ldrh	r2, [r3, #8]
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	895b      	ldrh	r3, [r3, #10]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d006      	beq.n	800d17c <pbuf_cat+0x64>
 800d16e:	4b10      	ldr	r3, [pc, #64]	@ (800d1b0 <pbuf_cat+0x98>)
 800d170:	f240 3262 	movw	r2, #866	@ 0x362
 800d174:	4911      	ldr	r1, [pc, #68]	@ (800d1bc <pbuf_cat+0xa4>)
 800d176:	4810      	ldr	r0, [pc, #64]	@ (800d1b8 <pbuf_cat+0xa0>)
 800d178:	f006 f9ba 	bl	80134f0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d006      	beq.n	800d192 <pbuf_cat+0x7a>
 800d184:	4b0a      	ldr	r3, [pc, #40]	@ (800d1b0 <pbuf_cat+0x98>)
 800d186:	f240 3263 	movw	r2, #867	@ 0x363
 800d18a:	490d      	ldr	r1, [pc, #52]	@ (800d1c0 <pbuf_cat+0xa8>)
 800d18c:	480a      	ldr	r0, [pc, #40]	@ (800d1b8 <pbuf_cat+0xa0>)
 800d18e:	f006 f9af 	bl	80134f0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	891a      	ldrh	r2, [r3, #8]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	891b      	ldrh	r3, [r3, #8]
 800d19a:	4413      	add	r3, r2
 800d19c:	b29a      	uxth	r2, r3
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	683a      	ldr	r2, [r7, #0]
 800d1a6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d1a8:	3710      	adds	r7, #16
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	0801514c 	.word	0x0801514c
 800d1b4:	0801536c 	.word	0x0801536c
 800d1b8:	080151d8 	.word	0x080151d8
 800d1bc:	080153a4 	.word	0x080153a4
 800d1c0:	080153d4 	.word	0x080153d4

0800d1c4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	617b      	str	r3, [r7, #20]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d008      	beq.n	800d1ee <pbuf_copy+0x2a>
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d005      	beq.n	800d1ee <pbuf_copy+0x2a>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	891a      	ldrh	r2, [r3, #8]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	891b      	ldrh	r3, [r3, #8]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d209      	bcs.n	800d202 <pbuf_copy+0x3e>
 800d1ee:	4b57      	ldr	r3, [pc, #348]	@ (800d34c <pbuf_copy+0x188>)
 800d1f0:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800d1f4:	4956      	ldr	r1, [pc, #344]	@ (800d350 <pbuf_copy+0x18c>)
 800d1f6:	4857      	ldr	r0, [pc, #348]	@ (800d354 <pbuf_copy+0x190>)
 800d1f8:	f006 f97a 	bl	80134f0 <iprintf>
 800d1fc:	f06f 030f 	mvn.w	r3, #15
 800d200:	e09f      	b.n	800d342 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	895b      	ldrh	r3, [r3, #10]
 800d206:	461a      	mov	r2, r3
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	1ad2      	subs	r2, r2, r3
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	895b      	ldrh	r3, [r3, #10]
 800d210:	4619      	mov	r1, r3
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	1acb      	subs	r3, r1, r3
 800d216:	429a      	cmp	r2, r3
 800d218:	d306      	bcc.n	800d228 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	895b      	ldrh	r3, [r3, #10]
 800d21e:	461a      	mov	r2, r3
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	1ad3      	subs	r3, r2, r3
 800d224:	60fb      	str	r3, [r7, #12]
 800d226:	e005      	b.n	800d234 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	895b      	ldrh	r3, [r3, #10]
 800d22c:	461a      	mov	r2, r3
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	1ad3      	subs	r3, r2, r3
 800d232:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	697b      	ldr	r3, [r7, #20]
 800d23a:	18d0      	adds	r0, r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	4413      	add	r3, r2
 800d244:	68fa      	ldr	r2, [r7, #12]
 800d246:	4619      	mov	r1, r3
 800d248:	f006 fa2d 	bl	80136a6 <memcpy>
    offset_to += len;
 800d24c:	697a      	ldr	r2, [r7, #20]
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	4413      	add	r3, r2
 800d252:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d254:	693a      	ldr	r2, [r7, #16]
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	4413      	add	r3, r2
 800d25a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	895b      	ldrh	r3, [r3, #10]
 800d260:	461a      	mov	r2, r3
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	4293      	cmp	r3, r2
 800d266:	d906      	bls.n	800d276 <pbuf_copy+0xb2>
 800d268:	4b38      	ldr	r3, [pc, #224]	@ (800d34c <pbuf_copy+0x188>)
 800d26a:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800d26e:	493a      	ldr	r1, [pc, #232]	@ (800d358 <pbuf_copy+0x194>)
 800d270:	4838      	ldr	r0, [pc, #224]	@ (800d354 <pbuf_copy+0x190>)
 800d272:	f006 f93d 	bl	80134f0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	895b      	ldrh	r3, [r3, #10]
 800d27a:	461a      	mov	r2, r3
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	4293      	cmp	r3, r2
 800d280:	d906      	bls.n	800d290 <pbuf_copy+0xcc>
 800d282:	4b32      	ldr	r3, [pc, #200]	@ (800d34c <pbuf_copy+0x188>)
 800d284:	f240 32da 	movw	r2, #986	@ 0x3da
 800d288:	4934      	ldr	r1, [pc, #208]	@ (800d35c <pbuf_copy+0x198>)
 800d28a:	4832      	ldr	r0, [pc, #200]	@ (800d354 <pbuf_copy+0x190>)
 800d28c:	f006 f930 	bl	80134f0 <iprintf>
    if (offset_from >= p_from->len) {
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	895b      	ldrh	r3, [r3, #10]
 800d294:	461a      	mov	r2, r3
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	4293      	cmp	r3, r2
 800d29a:	d304      	bcc.n	800d2a6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d29c:	2300      	movs	r3, #0
 800d29e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	895b      	ldrh	r3, [r3, #10]
 800d2aa:	461a      	mov	r2, r3
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d114      	bne.n	800d2dc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10c      	bne.n	800d2dc <pbuf_copy+0x118>
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d009      	beq.n	800d2dc <pbuf_copy+0x118>
 800d2c8:	4b20      	ldr	r3, [pc, #128]	@ (800d34c <pbuf_copy+0x188>)
 800d2ca:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800d2ce:	4924      	ldr	r1, [pc, #144]	@ (800d360 <pbuf_copy+0x19c>)
 800d2d0:	4820      	ldr	r0, [pc, #128]	@ (800d354 <pbuf_copy+0x190>)
 800d2d2:	f006 f90d 	bl	80134f0 <iprintf>
 800d2d6:	f06f 030f 	mvn.w	r3, #15
 800d2da:	e032      	b.n	800d342 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d013      	beq.n	800d30a <pbuf_copy+0x146>
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	895a      	ldrh	r2, [r3, #10]
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	891b      	ldrh	r3, [r3, #8]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d10d      	bne.n	800d30a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d009      	beq.n	800d30a <pbuf_copy+0x146>
 800d2f6:	4b15      	ldr	r3, [pc, #84]	@ (800d34c <pbuf_copy+0x188>)
 800d2f8:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800d2fc:	4919      	ldr	r1, [pc, #100]	@ (800d364 <pbuf_copy+0x1a0>)
 800d2fe:	4815      	ldr	r0, [pc, #84]	@ (800d354 <pbuf_copy+0x190>)
 800d300:	f006 f8f6 	bl	80134f0 <iprintf>
 800d304:	f06f 0305 	mvn.w	r3, #5
 800d308:	e01b      	b.n	800d342 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d013      	beq.n	800d338 <pbuf_copy+0x174>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	895a      	ldrh	r2, [r3, #10]
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	891b      	ldrh	r3, [r3, #8]
 800d318:	429a      	cmp	r2, r3
 800d31a:	d10d      	bne.n	800d338 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d009      	beq.n	800d338 <pbuf_copy+0x174>
 800d324:	4b09      	ldr	r3, [pc, #36]	@ (800d34c <pbuf_copy+0x188>)
 800d326:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800d32a:	490e      	ldr	r1, [pc, #56]	@ (800d364 <pbuf_copy+0x1a0>)
 800d32c:	4809      	ldr	r0, [pc, #36]	@ (800d354 <pbuf_copy+0x190>)
 800d32e:	f006 f8df 	bl	80134f0 <iprintf>
 800d332:	f06f 0305 	mvn.w	r3, #5
 800d336:	e004      	b.n	800d342 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f47f af61 	bne.w	800d202 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d340:	2300      	movs	r3, #0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	0801514c 	.word	0x0801514c
 800d350:	08015420 	.word	0x08015420
 800d354:	080151d8 	.word	0x080151d8
 800d358:	08015450 	.word	0x08015450
 800d35c:	08015468 	.word	0x08015468
 800d360:	08015484 	.word	0x08015484
 800d364:	08015494 	.word	0x08015494

0800d368 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b088      	sub	sp, #32
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	60f8      	str	r0, [r7, #12]
 800d370:	60b9      	str	r1, [r7, #8]
 800d372:	4611      	mov	r1, r2
 800d374:	461a      	mov	r2, r3
 800d376:	460b      	mov	r3, r1
 800d378:	80fb      	strh	r3, [r7, #6]
 800d37a:	4613      	mov	r3, r2
 800d37c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d37e:	2300      	movs	r3, #0
 800d380:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d382:	2300      	movs	r3, #0
 800d384:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d108      	bne.n	800d39e <pbuf_copy_partial+0x36>
 800d38c:	4b2b      	ldr	r3, [pc, #172]	@ (800d43c <pbuf_copy_partial+0xd4>)
 800d38e:	f240 420a 	movw	r2, #1034	@ 0x40a
 800d392:	492b      	ldr	r1, [pc, #172]	@ (800d440 <pbuf_copy_partial+0xd8>)
 800d394:	482b      	ldr	r0, [pc, #172]	@ (800d444 <pbuf_copy_partial+0xdc>)
 800d396:	f006 f8ab 	bl	80134f0 <iprintf>
 800d39a:	2300      	movs	r3, #0
 800d39c:	e04a      	b.n	800d434 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d108      	bne.n	800d3b6 <pbuf_copy_partial+0x4e>
 800d3a4:	4b25      	ldr	r3, [pc, #148]	@ (800d43c <pbuf_copy_partial+0xd4>)
 800d3a6:	f240 420b 	movw	r2, #1035	@ 0x40b
 800d3aa:	4927      	ldr	r1, [pc, #156]	@ (800d448 <pbuf_copy_partial+0xe0>)
 800d3ac:	4825      	ldr	r0, [pc, #148]	@ (800d444 <pbuf_copy_partial+0xdc>)
 800d3ae:	f006 f89f 	bl	80134f0 <iprintf>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	e03e      	b.n	800d434 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	61fb      	str	r3, [r7, #28]
 800d3ba:	e034      	b.n	800d426 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d3bc:	88bb      	ldrh	r3, [r7, #4]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d00a      	beq.n	800d3d8 <pbuf_copy_partial+0x70>
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	895b      	ldrh	r3, [r3, #10]
 800d3c6:	88ba      	ldrh	r2, [r7, #4]
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d305      	bcc.n	800d3d8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	895b      	ldrh	r3, [r3, #10]
 800d3d0:	88ba      	ldrh	r2, [r7, #4]
 800d3d2:	1ad3      	subs	r3, r2, r3
 800d3d4:	80bb      	strh	r3, [r7, #4]
 800d3d6:	e023      	b.n	800d420 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d3d8:	69fb      	ldr	r3, [r7, #28]
 800d3da:	895a      	ldrh	r2, [r3, #10]
 800d3dc:	88bb      	ldrh	r3, [r7, #4]
 800d3de:	1ad3      	subs	r3, r2, r3
 800d3e0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d3e2:	8b3a      	ldrh	r2, [r7, #24]
 800d3e4:	88fb      	ldrh	r3, [r7, #6]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d901      	bls.n	800d3ee <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d3ea:	88fb      	ldrh	r3, [r7, #6]
 800d3ec:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d3ee:	8b7b      	ldrh	r3, [r7, #26]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	18d0      	adds	r0, r2, r3
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	88bb      	ldrh	r3, [r7, #4]
 800d3fa:	4413      	add	r3, r2
 800d3fc:	8b3a      	ldrh	r2, [r7, #24]
 800d3fe:	4619      	mov	r1, r3
 800d400:	f006 f951 	bl	80136a6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d404:	8afa      	ldrh	r2, [r7, #22]
 800d406:	8b3b      	ldrh	r3, [r7, #24]
 800d408:	4413      	add	r3, r2
 800d40a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d40c:	8b7a      	ldrh	r2, [r7, #26]
 800d40e:	8b3b      	ldrh	r3, [r7, #24]
 800d410:	4413      	add	r3, r2
 800d412:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d414:	88fa      	ldrh	r2, [r7, #6]
 800d416:	8b3b      	ldrh	r3, [r7, #24]
 800d418:	1ad3      	subs	r3, r2, r3
 800d41a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	61fb      	str	r3, [r7, #28]
 800d426:	88fb      	ldrh	r3, [r7, #6]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d002      	beq.n	800d432 <pbuf_copy_partial+0xca>
 800d42c:	69fb      	ldr	r3, [r7, #28]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d1c4      	bne.n	800d3bc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d432:	8afb      	ldrh	r3, [r7, #22]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3720      	adds	r7, #32
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	0801514c 	.word	0x0801514c
 800d440:	080154c0 	.word	0x080154c0
 800d444:	080151d8 	.word	0x080151d8
 800d448:	080154e0 	.word	0x080154e0

0800d44c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b084      	sub	sp, #16
 800d450:	af00      	add	r7, sp, #0
 800d452:	4603      	mov	r3, r0
 800d454:	603a      	str	r2, [r7, #0]
 800d456:	71fb      	strb	r3, [r7, #7]
 800d458:	460b      	mov	r3, r1
 800d45a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	8919      	ldrh	r1, [r3, #8]
 800d460:	88ba      	ldrh	r2, [r7, #4]
 800d462:	79fb      	ldrb	r3, [r7, #7]
 800d464:	4618      	mov	r0, r3
 800d466:	f7ff faa5 	bl	800c9b4 <pbuf_alloc>
 800d46a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d101      	bne.n	800d476 <pbuf_clone+0x2a>
    return NULL;
 800d472:	2300      	movs	r3, #0
 800d474:	e011      	b.n	800d49a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d476:	6839      	ldr	r1, [r7, #0]
 800d478:	68f8      	ldr	r0, [r7, #12]
 800d47a:	f7ff fea3 	bl	800d1c4 <pbuf_copy>
 800d47e:	4603      	mov	r3, r0
 800d480:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d482:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d006      	beq.n	800d498 <pbuf_clone+0x4c>
 800d48a:	4b06      	ldr	r3, [pc, #24]	@ (800d4a4 <pbuf_clone+0x58>)
 800d48c:	f240 5224 	movw	r2, #1316	@ 0x524
 800d490:	4905      	ldr	r1, [pc, #20]	@ (800d4a8 <pbuf_clone+0x5c>)
 800d492:	4806      	ldr	r0, [pc, #24]	@ (800d4ac <pbuf_clone+0x60>)
 800d494:	f006 f82c 	bl	80134f0 <iprintf>
  return q;
 800d498:	68fb      	ldr	r3, [r7, #12]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	0801514c 	.word	0x0801514c
 800d4a8:	080155ec 	.word	0x080155ec
 800d4ac:	080151d8 	.word	0x080151d8

0800d4b0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
 800d4b8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2104      	movs	r1, #4
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7f8 fbe1 	bl	8005c88 <osMessageQueueNew>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d102      	bne.n	800d4da <sys_mbox_new+0x2a>
    return ERR_MEM;
 800d4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d4d8:	e000      	b.n	800d4dc <sys_mbox_new+0x2c>

  return ERR_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b084      	sub	sp, #16
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6818      	ldr	r0, [r3, #0]
 800d4f2:	4639      	mov	r1, r7
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f7f8 fc3a 	bl	8005d70 <osMessageQueuePut>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 800d502:	2300      	movs	r3, #0
 800d504:	73fb      	strb	r3, [r7, #15]
 800d506:	e001      	b.n	800d50c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 800d508:	23ff      	movs	r3, #255	@ 0xff
 800d50a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 800d50c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3710      	adds	r7, #16
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b086      	sub	sp, #24
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 800d524:	f7f8 f8c0 	bl	80056a8 <osKernelGetTickCount>
 800d528:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d013      	beq.n	800d558 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	6818      	ldr	r0, [r3, #0]
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	68b9      	ldr	r1, [r7, #8]
 800d53a:	f7f8 fc79 	bl	8005e30 <osMessageQueueGet>
 800d53e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 800d540:	693b      	ldr	r3, [r7, #16]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d105      	bne.n	800d552 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 800d546:	f7f8 f8af 	bl	80056a8 <osKernelGetTickCount>
 800d54a:	4602      	mov	r2, r0
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	1ad3      	subs	r3, r2, r3
 800d550:	e00f      	b.n	800d572 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 800d552:	f04f 33ff 	mov.w	r3, #4294967295
 800d556:	e00c      	b.n	800d572 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6818      	ldr	r0, [r3, #0]
 800d55c:	f04f 33ff 	mov.w	r3, #4294967295
 800d560:	2200      	movs	r2, #0
 800d562:	68b9      	ldr	r1, [r7, #8]
 800d564:	f7f8 fc64 	bl	8005e30 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 800d568:	f7f8 f89e 	bl	80056a8 <osKernelGetTickCount>
 800d56c:	4602      	mov	r2, r0
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 800d572:	4618      	mov	r0, r3
 800d574:	3718      	adds	r7, #24
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 800d57a:	b480      	push	{r7}
 800d57c:	b083      	sub	sp, #12
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d101      	bne.n	800d58e <sys_mbox_valid+0x14>
    return 0;
 800d58a:	2300      	movs	r3, #0
 800d58c:	e000      	b.n	800d590 <sys_mbox_valid+0x16>
  else
    return 1;
 800d58e:	2301      	movs	r3, #1
}
 800d590:	4618      	mov	r0, r3
 800d592:	370c      	adds	r7, #12
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 800d5a0:	2000      	movs	r0, #0
 800d5a2:	f7f8 f944 	bl	800582e <osMutexNew>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	4a01      	ldr	r2, [pc, #4]	@ (800d5b0 <sys_init+0x14>)
 800d5aa:	6013      	str	r3, [r2, #0]
#endif
}
 800d5ac:	bf00      	nop
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	24008478 	.word	0x24008478

0800d5b4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 800d5bc:	2000      	movs	r0, #0
 800d5be:	f7f8 f936 	bl	800582e <osMutexNew>
 800d5c2:	4602      	mov	r2, r0
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d102      	bne.n	800d5d6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 800d5d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d5d4:	e000      	b.n	800d5d8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f04f 31ff 	mov.w	r1, #4294967295
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f7f8 f9a2 	bl	800593a <osMutexAcquire>
#endif
}
 800d5f6:	bf00      	nop
 800d5f8:	3708      	adds	r7, #8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7f8 f9e0 	bl	80059d0 <osMutexRelease>
}
 800d610:	bf00      	nop
 800d612:	3708      	adds	r7, #8
 800d614:	46bd      	mov	sp, r7
 800d616:	bd80      	pop	{r7, pc}

0800d618 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b08e      	sub	sp, #56	@ 0x38
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	607a      	str	r2, [r7, #4]
 800d624:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 800d626:	f107 0314 	add.w	r3, r7, #20
 800d62a:	2224      	movs	r2, #36	@ 0x24
 800d62c:	2100      	movs	r1, #0
 800d62e:	4618      	mov	r0, r3
 800d630:	f005 ffc3 	bl	80135ba <memset>
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	617b      	str	r3, [r7, #20]
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d63c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 800d640:	f107 0314 	add.w	r3, r7, #20
 800d644:	461a      	mov	r2, r3
 800d646:	6879      	ldr	r1, [r7, #4]
 800d648:	68b8      	ldr	r0, [r7, #8]
 800d64a:	f7f8 f842 	bl	80056d2 <osThreadNew>
 800d64e:	4603      	mov	r3, r0
#endif
}
 800d650:	4618      	mov	r0, r3
 800d652:	3738      	adds	r7, #56	@ 0x38
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 800d65c:	4b04      	ldr	r3, [pc, #16]	@ (800d670 <sys_arch_protect+0x18>)
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f04f 31ff 	mov.w	r1, #4294967295
 800d664:	4618      	mov	r0, r3
 800d666:	f7f8 f968 	bl	800593a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 800d66a:	2301      	movs	r3, #1
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	24008478 	.word	0x24008478

0800d674 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800d67c:	4b04      	ldr	r3, [pc, #16]	@ (800d690 <sys_arch_unprotect+0x1c>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4618      	mov	r0, r3
 800d682:	f7f8 f9a5 	bl	80059d0 <osMutexRelease>
}
 800d686:	bf00      	nop
 800d688:	3708      	adds	r7, #8
 800d68a:	46bd      	mov	sp, r7
 800d68c:	bd80      	pop	{r7, pc}
 800d68e:	bf00      	nop
 800d690:	24008478 	.word	0x24008478

0800d694 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d698:	f005 fe2a 	bl	80132f0 <rand>
 800d69c:	4603      	mov	r3, r0
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	4b01      	ldr	r3, [pc, #4]	@ (800d6b4 <tcp_init+0x20>)
 800d6ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d6b0:	bf00      	nop
 800d6b2:	bd80      	pop	{r7, pc}
 800d6b4:	24000028 	.word	0x24000028

0800d6b8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b082      	sub	sp, #8
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7d1b      	ldrb	r3, [r3, #20]
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d105      	bne.n	800d6d4 <tcp_free+0x1c>
 800d6c8:	4b06      	ldr	r3, [pc, #24]	@ (800d6e4 <tcp_free+0x2c>)
 800d6ca:	22d4      	movs	r2, #212	@ 0xd4
 800d6cc:	4906      	ldr	r1, [pc, #24]	@ (800d6e8 <tcp_free+0x30>)
 800d6ce:	4807      	ldr	r0, [pc, #28]	@ (800d6ec <tcp_free+0x34>)
 800d6d0:	f005 ff0e 	bl	80134f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d6d4:	6879      	ldr	r1, [r7, #4]
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	f7fe fdac 	bl	800c234 <memp_free>
}
 800d6dc:	bf00      	nop
 800d6de:	3708      	adds	r7, #8
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}
 800d6e4:	08015678 	.word	0x08015678
 800d6e8:	080156d4 	.word	0x080156d4
 800d6ec:	080156e8 	.word	0x080156e8

0800d6f0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d105      	bne.n	800d70c <tcp_free_listen+0x1c>
 800d700:	4b06      	ldr	r3, [pc, #24]	@ (800d71c <tcp_free_listen+0x2c>)
 800d702:	22df      	movs	r2, #223	@ 0xdf
 800d704:	4906      	ldr	r1, [pc, #24]	@ (800d720 <tcp_free_listen+0x30>)
 800d706:	4807      	ldr	r0, [pc, #28]	@ (800d724 <tcp_free_listen+0x34>)
 800d708:	f005 fef2 	bl	80134f0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d70c:	6879      	ldr	r1, [r7, #4]
 800d70e:	2002      	movs	r0, #2
 800d710:	f7fe fd90 	bl	800c234 <memp_free>
}
 800d714:	bf00      	nop
 800d716:	3708      	adds	r7, #8
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}
 800d71c:	08015678 	.word	0x08015678
 800d720:	08015710 	.word	0x08015710
 800d724:	080156e8 	.word	0x080156e8

0800d728 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d72c:	f000 fea4 	bl	800e478 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d730:	4b07      	ldr	r3, [pc, #28]	@ (800d750 <tcp_tmr+0x28>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	3301      	adds	r3, #1
 800d736:	b2da      	uxtb	r2, r3
 800d738:	4b05      	ldr	r3, [pc, #20]	@ (800d750 <tcp_tmr+0x28>)
 800d73a:	701a      	strb	r2, [r3, #0]
 800d73c:	4b04      	ldr	r3, [pc, #16]	@ (800d750 <tcp_tmr+0x28>)
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f003 0301 	and.w	r3, r3, #1
 800d744:	2b00      	cmp	r3, #0
 800d746:	d001      	beq.n	800d74c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d748:	f000 fb54 	bl	800ddf4 <tcp_slowtmr>
  }
}
 800d74c:	bf00      	nop
 800d74e:	bd80      	pop	{r7, pc}
 800d750:	24008491 	.word	0x24008491

0800d754 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d105      	bne.n	800d770 <tcp_remove_listener+0x1c>
 800d764:	4b0d      	ldr	r3, [pc, #52]	@ (800d79c <tcp_remove_listener+0x48>)
 800d766:	22ff      	movs	r2, #255	@ 0xff
 800d768:	490d      	ldr	r1, [pc, #52]	@ (800d7a0 <tcp_remove_listener+0x4c>)
 800d76a:	480e      	ldr	r0, [pc, #56]	@ (800d7a4 <tcp_remove_listener+0x50>)
 800d76c:	f005 fec0 	bl	80134f0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	e00a      	b.n	800d78c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d77a:	683a      	ldr	r2, [r7, #0]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d102      	bne.n	800d786 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	68db      	ldr	r3, [r3, #12]
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d1f1      	bne.n	800d776 <tcp_remove_listener+0x22>
    }
  }
}
 800d792:	bf00      	nop
 800d794:	bf00      	nop
 800d796:	3710      	adds	r7, #16
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	08015678 	.word	0x08015678
 800d7a0:	0801572c 	.word	0x0801572c
 800d7a4:	080156e8 	.word	0x080156e8

0800d7a8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d106      	bne.n	800d7c4 <tcp_listen_closed+0x1c>
 800d7b6:	4b14      	ldr	r3, [pc, #80]	@ (800d808 <tcp_listen_closed+0x60>)
 800d7b8:	f240 1211 	movw	r2, #273	@ 0x111
 800d7bc:	4913      	ldr	r1, [pc, #76]	@ (800d80c <tcp_listen_closed+0x64>)
 800d7be:	4814      	ldr	r0, [pc, #80]	@ (800d810 <tcp_listen_closed+0x68>)
 800d7c0:	f005 fe96 	bl	80134f0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	7d1b      	ldrb	r3, [r3, #20]
 800d7c8:	2b01      	cmp	r3, #1
 800d7ca:	d006      	beq.n	800d7da <tcp_listen_closed+0x32>
 800d7cc:	4b0e      	ldr	r3, [pc, #56]	@ (800d808 <tcp_listen_closed+0x60>)
 800d7ce:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d7d2:	4910      	ldr	r1, [pc, #64]	@ (800d814 <tcp_listen_closed+0x6c>)
 800d7d4:	480e      	ldr	r0, [pc, #56]	@ (800d810 <tcp_listen_closed+0x68>)
 800d7d6:	f005 fe8b 	bl	80134f0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d7da:	2301      	movs	r3, #1
 800d7dc:	60fb      	str	r3, [r7, #12]
 800d7de:	e00b      	b.n	800d7f8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d7e0:	4a0d      	ldr	r2, [pc, #52]	@ (800d818 <tcp_listen_closed+0x70>)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	6879      	ldr	r1, [r7, #4]
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7ff ffb1 	bl	800d754 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	3301      	adds	r3, #1
 800d7f6:	60fb      	str	r3, [r7, #12]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	d9f0      	bls.n	800d7e0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d7fe:	bf00      	nop
 800d800:	bf00      	nop
 800d802:	3710      	adds	r7, #16
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}
 800d808:	08015678 	.word	0x08015678
 800d80c:	08015754 	.word	0x08015754
 800d810:	080156e8 	.word	0x080156e8
 800d814:	08015760 	.word	0x08015760
 800d818:	080171e8 	.word	0x080171e8

0800d81c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d81c:	b5b0      	push	{r4, r5, r7, lr}
 800d81e:	b088      	sub	sp, #32
 800d820:	af04      	add	r7, sp, #16
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	460b      	mov	r3, r1
 800d826:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d106      	bne.n	800d83c <tcp_close_shutdown+0x20>
 800d82e:	4b63      	ldr	r3, [pc, #396]	@ (800d9bc <tcp_close_shutdown+0x1a0>)
 800d830:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d834:	4962      	ldr	r1, [pc, #392]	@ (800d9c0 <tcp_close_shutdown+0x1a4>)
 800d836:	4863      	ldr	r0, [pc, #396]	@ (800d9c4 <tcp_close_shutdown+0x1a8>)
 800d838:	f005 fe5a 	bl	80134f0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d83c:	78fb      	ldrb	r3, [r7, #3]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d066      	beq.n	800d910 <tcp_close_shutdown+0xf4>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	7d1b      	ldrb	r3, [r3, #20]
 800d846:	2b04      	cmp	r3, #4
 800d848:	d003      	beq.n	800d852 <tcp_close_shutdown+0x36>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	7d1b      	ldrb	r3, [r3, #20]
 800d84e:	2b07      	cmp	r3, #7
 800d850:	d15e      	bne.n	800d910 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d856:	2b00      	cmp	r3, #0
 800d858:	d104      	bne.n	800d864 <tcp_close_shutdown+0x48>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d85e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d862:	d055      	beq.n	800d910 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	8b5b      	ldrh	r3, [r3, #26]
 800d868:	f003 0310 	and.w	r3, r3, #16
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d106      	bne.n	800d87e <tcp_close_shutdown+0x62>
 800d870:	4b52      	ldr	r3, [pc, #328]	@ (800d9bc <tcp_close_shutdown+0x1a0>)
 800d872:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d876:	4954      	ldr	r1, [pc, #336]	@ (800d9c8 <tcp_close_shutdown+0x1ac>)
 800d878:	4852      	ldr	r0, [pc, #328]	@ (800d9c4 <tcp_close_shutdown+0x1a8>)
 800d87a:	f005 fe39 	bl	80134f0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d886:	687d      	ldr	r5, [r7, #4]
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	3304      	adds	r3, #4
 800d88c:	687a      	ldr	r2, [r7, #4]
 800d88e:	8ad2      	ldrh	r2, [r2, #22]
 800d890:	6879      	ldr	r1, [r7, #4]
 800d892:	8b09      	ldrh	r1, [r1, #24]
 800d894:	9102      	str	r1, [sp, #8]
 800d896:	9201      	str	r2, [sp, #4]
 800d898:	9300      	str	r3, [sp, #0]
 800d89a:	462b      	mov	r3, r5
 800d89c:	4622      	mov	r2, r4
 800d89e:	4601      	mov	r1, r0
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f004 fe8d 	bl	80125c0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f001 f8c8 	bl	800ea3c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d8ac:	4b47      	ldr	r3, [pc, #284]	@ (800d9cc <tcp_close_shutdown+0x1b0>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d105      	bne.n	800d8c2 <tcp_close_shutdown+0xa6>
 800d8b6:	4b45      	ldr	r3, [pc, #276]	@ (800d9cc <tcp_close_shutdown+0x1b0>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	4a43      	ldr	r2, [pc, #268]	@ (800d9cc <tcp_close_shutdown+0x1b0>)
 800d8be:	6013      	str	r3, [r2, #0]
 800d8c0:	e013      	b.n	800d8ea <tcp_close_shutdown+0xce>
 800d8c2:	4b42      	ldr	r3, [pc, #264]	@ (800d9cc <tcp_close_shutdown+0x1b0>)
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	60fb      	str	r3, [r7, #12]
 800d8c8:	e00c      	b.n	800d8e4 <tcp_close_shutdown+0xc8>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d104      	bne.n	800d8de <tcp_close_shutdown+0xc2>
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	68da      	ldr	r2, [r3, #12]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	60da      	str	r2, [r3, #12]
 800d8dc:	e005      	b.n	800d8ea <tcp_close_shutdown+0xce>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	68db      	ldr	r3, [r3, #12]
 800d8e2:	60fb      	str	r3, [r7, #12]
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1ef      	bne.n	800d8ca <tcp_close_shutdown+0xae>
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	60da      	str	r2, [r3, #12]
 800d8f0:	4b37      	ldr	r3, [pc, #220]	@ (800d9d0 <tcp_close_shutdown+0x1b4>)
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d8f6:	4b37      	ldr	r3, [pc, #220]	@ (800d9d4 <tcp_close_shutdown+0x1b8>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	429a      	cmp	r2, r3
 800d8fe:	d102      	bne.n	800d906 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d900:	f003 fd5c 	bl	80113bc <tcp_trigger_input_pcb_close>
 800d904:	e002      	b.n	800d90c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7ff fed6 	bl	800d6b8 <tcp_free>
      }
      return ERR_OK;
 800d90c:	2300      	movs	r3, #0
 800d90e:	e050      	b.n	800d9b2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	7d1b      	ldrb	r3, [r3, #20]
 800d914:	2b02      	cmp	r3, #2
 800d916:	d03b      	beq.n	800d990 <tcp_close_shutdown+0x174>
 800d918:	2b02      	cmp	r3, #2
 800d91a:	dc44      	bgt.n	800d9a6 <tcp_close_shutdown+0x18a>
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d002      	beq.n	800d926 <tcp_close_shutdown+0x10a>
 800d920:	2b01      	cmp	r3, #1
 800d922:	d02a      	beq.n	800d97a <tcp_close_shutdown+0x15e>
 800d924:	e03f      	b.n	800d9a6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	8adb      	ldrh	r3, [r3, #22]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d021      	beq.n	800d972 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d92e:	4b2a      	ldr	r3, [pc, #168]	@ (800d9d8 <tcp_close_shutdown+0x1bc>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	d105      	bne.n	800d944 <tcp_close_shutdown+0x128>
 800d938:	4b27      	ldr	r3, [pc, #156]	@ (800d9d8 <tcp_close_shutdown+0x1bc>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	4a26      	ldr	r2, [pc, #152]	@ (800d9d8 <tcp_close_shutdown+0x1bc>)
 800d940:	6013      	str	r3, [r2, #0]
 800d942:	e013      	b.n	800d96c <tcp_close_shutdown+0x150>
 800d944:	4b24      	ldr	r3, [pc, #144]	@ (800d9d8 <tcp_close_shutdown+0x1bc>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	60bb      	str	r3, [r7, #8]
 800d94a:	e00c      	b.n	800d966 <tcp_close_shutdown+0x14a>
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	68db      	ldr	r3, [r3, #12]
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	429a      	cmp	r2, r3
 800d954:	d104      	bne.n	800d960 <tcp_close_shutdown+0x144>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	68da      	ldr	r2, [r3, #12]
 800d95a:	68bb      	ldr	r3, [r7, #8]
 800d95c:	60da      	str	r2, [r3, #12]
 800d95e:	e005      	b.n	800d96c <tcp_close_shutdown+0x150>
 800d960:	68bb      	ldr	r3, [r7, #8]
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	60bb      	str	r3, [r7, #8]
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d1ef      	bne.n	800d94c <tcp_close_shutdown+0x130>
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2200      	movs	r2, #0
 800d970:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff fea0 	bl	800d6b8 <tcp_free>
      break;
 800d978:	e01a      	b.n	800d9b0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f7ff ff14 	bl	800d7a8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d980:	6879      	ldr	r1, [r7, #4]
 800d982:	4816      	ldr	r0, [pc, #88]	@ (800d9dc <tcp_close_shutdown+0x1c0>)
 800d984:	f001 f8aa 	bl	800eadc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff feb1 	bl	800d6f0 <tcp_free_listen>
      break;
 800d98e:	e00f      	b.n	800d9b0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d990:	6879      	ldr	r1, [r7, #4]
 800d992:	480e      	ldr	r0, [pc, #56]	@ (800d9cc <tcp_close_shutdown+0x1b0>)
 800d994:	f001 f8a2 	bl	800eadc <tcp_pcb_remove>
 800d998:	4b0d      	ldr	r3, [pc, #52]	@ (800d9d0 <tcp_close_shutdown+0x1b4>)
 800d99a:	2201      	movs	r2, #1
 800d99c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f7ff fe8a 	bl	800d6b8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d9a4:	e004      	b.n	800d9b0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f81a 	bl	800d9e0 <tcp_close_shutdown_fin>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	e000      	b.n	800d9b2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bdb0      	pop	{r4, r5, r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	08015678 	.word	0x08015678
 800d9c0:	08015778 	.word	0x08015778
 800d9c4:	080156e8 	.word	0x080156e8
 800d9c8:	08015798 	.word	0x08015798
 800d9cc:	24008488 	.word	0x24008488
 800d9d0:	24008490 	.word	0x24008490
 800d9d4:	240084c8 	.word	0x240084c8
 800d9d8:	24008480 	.word	0x24008480
 800d9dc:	24008484 	.word	0x24008484

0800d9e0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b084      	sub	sp, #16
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d106      	bne.n	800d9fc <tcp_close_shutdown_fin+0x1c>
 800d9ee:	4b2e      	ldr	r3, [pc, #184]	@ (800daa8 <tcp_close_shutdown_fin+0xc8>)
 800d9f0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d9f4:	492d      	ldr	r1, [pc, #180]	@ (800daac <tcp_close_shutdown_fin+0xcc>)
 800d9f6:	482e      	ldr	r0, [pc, #184]	@ (800dab0 <tcp_close_shutdown_fin+0xd0>)
 800d9f8:	f005 fd7a 	bl	80134f0 <iprintf>

  switch (pcb->state) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	7d1b      	ldrb	r3, [r3, #20]
 800da00:	2b07      	cmp	r3, #7
 800da02:	d020      	beq.n	800da46 <tcp_close_shutdown_fin+0x66>
 800da04:	2b07      	cmp	r3, #7
 800da06:	dc2b      	bgt.n	800da60 <tcp_close_shutdown_fin+0x80>
 800da08:	2b03      	cmp	r3, #3
 800da0a:	d002      	beq.n	800da12 <tcp_close_shutdown_fin+0x32>
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	d00d      	beq.n	800da2c <tcp_close_shutdown_fin+0x4c>
 800da10:	e026      	b.n	800da60 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f003 fee2 	bl	80117dc <tcp_send_fin>
 800da18:	4603      	mov	r3, r0
 800da1a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d11f      	bne.n	800da64 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2205      	movs	r2, #5
 800da28:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da2a:	e01b      	b.n	800da64 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f003 fed5 	bl	80117dc <tcp_send_fin>
 800da32:	4603      	mov	r3, r0
 800da34:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d114      	bne.n	800da68 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2205      	movs	r2, #5
 800da42:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da44:	e010      	b.n	800da68 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f003 fec8 	bl	80117dc <tcp_send_fin>
 800da4c:	4603      	mov	r3, r0
 800da4e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800da50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d109      	bne.n	800da6c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2209      	movs	r2, #9
 800da5c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800da5e:	e005      	b.n	800da6c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800da60:	2300      	movs	r3, #0
 800da62:	e01c      	b.n	800da9e <tcp_close_shutdown_fin+0xbe>
      break;
 800da64:	bf00      	nop
 800da66:	e002      	b.n	800da6e <tcp_close_shutdown_fin+0x8e>
      break;
 800da68:	bf00      	nop
 800da6a:	e000      	b.n	800da6e <tcp_close_shutdown_fin+0x8e>
      break;
 800da6c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800da6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d103      	bne.n	800da7e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f003 ffee 	bl	8011a58 <tcp_output>
 800da7c:	e00d      	b.n	800da9a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800da7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da86:	d108      	bne.n	800da9a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	8b5b      	ldrh	r3, [r3, #26]
 800da8c:	f043 0308 	orr.w	r3, r3, #8
 800da90:	b29a      	uxth	r2, r3
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800da96:	2300      	movs	r3, #0
 800da98:	e001      	b.n	800da9e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800da9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}
 800daa6:	bf00      	nop
 800daa8:	08015678 	.word	0x08015678
 800daac:	08015754 	.word	0x08015754
 800dab0:	080156e8 	.word	0x080156e8

0800dab4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dab4:	b580      	push	{r7, lr}
 800dab6:	b082      	sub	sp, #8
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d109      	bne.n	800dad6 <tcp_close+0x22>
 800dac2:	4b0f      	ldr	r3, [pc, #60]	@ (800db00 <tcp_close+0x4c>)
 800dac4:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800dac8:	490e      	ldr	r1, [pc, #56]	@ (800db04 <tcp_close+0x50>)
 800daca:	480f      	ldr	r0, [pc, #60]	@ (800db08 <tcp_close+0x54>)
 800dacc:	f005 fd10 	bl	80134f0 <iprintf>
 800dad0:	f06f 030f 	mvn.w	r3, #15
 800dad4:	e00f      	b.n	800daf6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	7d1b      	ldrb	r3, [r3, #20]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d006      	beq.n	800daec <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	8b5b      	ldrh	r3, [r3, #26]
 800dae2:	f043 0310 	orr.w	r3, r3, #16
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800daec:	2101      	movs	r1, #1
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7ff fe94 	bl	800d81c <tcp_close_shutdown>
 800daf4:	4603      	mov	r3, r0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	3708      	adds	r7, #8
 800dafa:	46bd      	mov	sp, r7
 800dafc:	bd80      	pop	{r7, pc}
 800dafe:	bf00      	nop
 800db00:	08015678 	.word	0x08015678
 800db04:	080157b4 	.word	0x080157b4
 800db08:	080156e8 	.word	0x080156e8

0800db0c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b08e      	sub	sp, #56	@ 0x38
 800db10:	af04      	add	r7, sp, #16
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d107      	bne.n	800db2c <tcp_abandon+0x20>
 800db1c:	4b52      	ldr	r3, [pc, #328]	@ (800dc68 <tcp_abandon+0x15c>)
 800db1e:	f240 223d 	movw	r2, #573	@ 0x23d
 800db22:	4952      	ldr	r1, [pc, #328]	@ (800dc6c <tcp_abandon+0x160>)
 800db24:	4852      	ldr	r0, [pc, #328]	@ (800dc70 <tcp_abandon+0x164>)
 800db26:	f005 fce3 	bl	80134f0 <iprintf>
 800db2a:	e099      	b.n	800dc60 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7d1b      	ldrb	r3, [r3, #20]
 800db30:	2b01      	cmp	r3, #1
 800db32:	d106      	bne.n	800db42 <tcp_abandon+0x36>
 800db34:	4b4c      	ldr	r3, [pc, #304]	@ (800dc68 <tcp_abandon+0x15c>)
 800db36:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800db3a:	494e      	ldr	r1, [pc, #312]	@ (800dc74 <tcp_abandon+0x168>)
 800db3c:	484c      	ldr	r0, [pc, #304]	@ (800dc70 <tcp_abandon+0x164>)
 800db3e:	f005 fcd7 	bl	80134f0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	7d1b      	ldrb	r3, [r3, #20]
 800db46:	2b0a      	cmp	r3, #10
 800db48:	d107      	bne.n	800db5a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800db4a:	6879      	ldr	r1, [r7, #4]
 800db4c:	484a      	ldr	r0, [pc, #296]	@ (800dc78 <tcp_abandon+0x16c>)
 800db4e:	f000 ffc5 	bl	800eadc <tcp_pcb_remove>
    tcp_free(pcb);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fdb0 	bl	800d6b8 <tcp_free>
 800db58:	e082      	b.n	800dc60 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db66:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db6c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800db74:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7d1b      	ldrb	r3, [r3, #20]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d126      	bne.n	800dbd2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	8adb      	ldrh	r3, [r3, #22]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d02e      	beq.n	800dbea <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800db8c:	4b3b      	ldr	r3, [pc, #236]	@ (800dc7c <tcp_abandon+0x170>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	687a      	ldr	r2, [r7, #4]
 800db92:	429a      	cmp	r2, r3
 800db94:	d105      	bne.n	800dba2 <tcp_abandon+0x96>
 800db96:	4b39      	ldr	r3, [pc, #228]	@ (800dc7c <tcp_abandon+0x170>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	68db      	ldr	r3, [r3, #12]
 800db9c:	4a37      	ldr	r2, [pc, #220]	@ (800dc7c <tcp_abandon+0x170>)
 800db9e:	6013      	str	r3, [r2, #0]
 800dba0:	e013      	b.n	800dbca <tcp_abandon+0xbe>
 800dba2:	4b36      	ldr	r3, [pc, #216]	@ (800dc7c <tcp_abandon+0x170>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	61fb      	str	r3, [r7, #28]
 800dba8:	e00c      	b.n	800dbc4 <tcp_abandon+0xb8>
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	429a      	cmp	r2, r3
 800dbb2:	d104      	bne.n	800dbbe <tcp_abandon+0xb2>
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68da      	ldr	r2, [r3, #12]
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	60da      	str	r2, [r3, #12]
 800dbbc:	e005      	b.n	800dbca <tcp_abandon+0xbe>
 800dbbe:	69fb      	ldr	r3, [r7, #28]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	61fb      	str	r3, [r7, #28]
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d1ef      	bne.n	800dbaa <tcp_abandon+0x9e>
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	60da      	str	r2, [r3, #12]
 800dbd0:	e00b      	b.n	800dbea <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	8adb      	ldrh	r3, [r3, #22]
 800dbda:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	4828      	ldr	r0, [pc, #160]	@ (800dc80 <tcp_abandon+0x174>)
 800dbe0:	f000 ff7c 	bl	800eadc <tcp_pcb_remove>
 800dbe4:	4b27      	ldr	r3, [pc, #156]	@ (800dc84 <tcp_abandon+0x178>)
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d004      	beq.n	800dbfc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f000 fd1e 	bl	800e638 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d004      	beq.n	800dc0e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 fd15 	bl	800e638 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d004      	beq.n	800dc20 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	f000 fd0c 	bl	800e638 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00e      	beq.n	800dc44 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dc26:	6879      	ldr	r1, [r7, #4]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	687a      	ldr	r2, [r7, #4]
 800dc2e:	8b12      	ldrh	r2, [r2, #24]
 800dc30:	9202      	str	r2, [sp, #8]
 800dc32:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800dc34:	9201      	str	r2, [sp, #4]
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	697a      	ldr	r2, [r7, #20]
 800dc3c:	69b9      	ldr	r1, [r7, #24]
 800dc3e:	6878      	ldr	r0, [r7, #4]
 800dc40:	f004 fcbe 	bl	80125c0 <tcp_rst>
    }
    last_state = pcb->state;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	7d1b      	ldrb	r3, [r3, #20]
 800dc48:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f7ff fd34 	bl	800d6b8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d004      	beq.n	800dc60 <tcp_abandon+0x154>
 800dc56:	693b      	ldr	r3, [r7, #16]
 800dc58:	f06f 010c 	mvn.w	r1, #12
 800dc5c:	68f8      	ldr	r0, [r7, #12]
 800dc5e:	4798      	blx	r3
  }
}
 800dc60:	3728      	adds	r7, #40	@ 0x28
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}
 800dc66:	bf00      	nop
 800dc68:	08015678 	.word	0x08015678
 800dc6c:	080157e8 	.word	0x080157e8
 800dc70:	080156e8 	.word	0x080156e8
 800dc74:	08015804 	.word	0x08015804
 800dc78:	2400848c 	.word	0x2400848c
 800dc7c:	24008480 	.word	0x24008480
 800dc80:	24008488 	.word	0x24008488
 800dc84:	24008490 	.word	0x24008490

0800dc88 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dc90:	2101      	movs	r1, #1
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff ff3a 	bl	800db0c <tcp_abandon>
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}

0800dca0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d106      	bne.n	800dcbc <tcp_update_rcv_ann_wnd+0x1c>
 800dcae:	4b25      	ldr	r3, [pc, #148]	@ (800dd44 <tcp_update_rcv_ann_wnd+0xa4>)
 800dcb0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800dcb4:	4924      	ldr	r1, [pc, #144]	@ (800dd48 <tcp_update_rcv_ann_wnd+0xa8>)
 800dcb6:	4825      	ldr	r0, [pc, #148]	@ (800dd4c <tcp_update_rcv_ann_wnd+0xac>)
 800dcb8:	f005 fc1a 	bl	80134f0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcc0:	687a      	ldr	r2, [r7, #4]
 800dcc2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800dcc4:	4413      	add	r3, r2
 800dcc6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800dcd0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800dcd4:	bf28      	it	cs
 800dcd6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800dcda:	b292      	uxth	r2, r2
 800dcdc:	4413      	add	r3, r2
 800dcde:	68fa      	ldr	r2, [r7, #12]
 800dce0:	1ad3      	subs	r3, r2, r3
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	db08      	blt.n	800dcf8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	e020      	b.n	800dd3a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd00:	1ad3      	subs	r3, r2, r3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	dd03      	ble.n	800dd0e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2200      	movs	r2, #0
 800dd0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dd0c:	e014      	b.n	800dd38 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd16:	1ad3      	subs	r3, r2, r3
 800dd18:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd20:	d306      	bcc.n	800dd30 <tcp_update_rcv_ann_wnd+0x90>
 800dd22:	4b08      	ldr	r3, [pc, #32]	@ (800dd44 <tcp_update_rcv_ann_wnd+0xa4>)
 800dd24:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800dd28:	4909      	ldr	r1, [pc, #36]	@ (800dd50 <tcp_update_rcv_ann_wnd+0xb0>)
 800dd2a:	4808      	ldr	r0, [pc, #32]	@ (800dd4c <tcp_update_rcv_ann_wnd+0xac>)
 800dd2c:	f005 fbe0 	bl	80134f0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800dd38:	2300      	movs	r3, #0
  }
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	08015678 	.word	0x08015678
 800dd48:	08015900 	.word	0x08015900
 800dd4c:	080156e8 	.word	0x080156e8
 800dd50:	08015924 	.word	0x08015924

0800dd54 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d107      	bne.n	800dd76 <tcp_recved+0x22>
 800dd66:	4b1f      	ldr	r3, [pc, #124]	@ (800dde4 <tcp_recved+0x90>)
 800dd68:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800dd6c:	491e      	ldr	r1, [pc, #120]	@ (800dde8 <tcp_recved+0x94>)
 800dd6e:	481f      	ldr	r0, [pc, #124]	@ (800ddec <tcp_recved+0x98>)
 800dd70:	f005 fbbe 	bl	80134f0 <iprintf>
 800dd74:	e032      	b.n	800dddc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	7d1b      	ldrb	r3, [r3, #20]
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d106      	bne.n	800dd8c <tcp_recved+0x38>
 800dd7e:	4b19      	ldr	r3, [pc, #100]	@ (800dde4 <tcp_recved+0x90>)
 800dd80:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800dd84:	491a      	ldr	r1, [pc, #104]	@ (800ddf0 <tcp_recved+0x9c>)
 800dd86:	4819      	ldr	r0, [pc, #100]	@ (800ddec <tcp_recved+0x98>)
 800dd88:	f005 fbb2 	bl	80134f0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800dd90:	887b      	ldrh	r3, [r7, #2]
 800dd92:	4413      	add	r3, r2
 800dd94:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800dd96:	89fb      	ldrh	r3, [r7, #14]
 800dd98:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800dd9c:	d804      	bhi.n	800dda8 <tcp_recved+0x54>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dda2:	89fa      	ldrh	r2, [r7, #14]
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d204      	bcs.n	800ddb2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800ddae:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ddb0:	e002      	b.n	800ddb8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	89fa      	ldrh	r2, [r7, #14]
 800ddb6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f7ff ff71 	bl	800dca0 <tcp_update_rcv_ann_wnd>
 800ddbe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800ddc6:	d309      	bcc.n	800dddc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8b5b      	ldrh	r3, [r3, #26]
 800ddcc:	f043 0302 	orr.w	r3, r3, #2
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ddd6:	6878      	ldr	r0, [r7, #4]
 800ddd8:	f003 fe3e 	bl	8011a58 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
 800dde2:	bf00      	nop
 800dde4:	08015678 	.word	0x08015678
 800dde8:	08015940 	.word	0x08015940
 800ddec:	080156e8 	.word	0x080156e8
 800ddf0:	08015958 	.word	0x08015958

0800ddf4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800ddf4:	b5b0      	push	{r4, r5, r7, lr}
 800ddf6:	b090      	sub	sp, #64	@ 0x40
 800ddf8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800de00:	4b95      	ldr	r3, [pc, #596]	@ (800e058 <tcp_slowtmr+0x264>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	4a94      	ldr	r2, [pc, #592]	@ (800e058 <tcp_slowtmr+0x264>)
 800de08:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800de0a:	4b94      	ldr	r3, [pc, #592]	@ (800e05c <tcp_slowtmr+0x268>)
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	3301      	adds	r3, #1
 800de10:	b2da      	uxtb	r2, r3
 800de12:	4b92      	ldr	r3, [pc, #584]	@ (800e05c <tcp_slowtmr+0x268>)
 800de14:	701a      	strb	r2, [r3, #0]
 800de16:	e000      	b.n	800de1a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800de18:	bf00      	nop
  prev = NULL;
 800de1a:	2300      	movs	r3, #0
 800de1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800de1e:	4b90      	ldr	r3, [pc, #576]	@ (800e060 <tcp_slowtmr+0x26c>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800de24:	e29d      	b.n	800e362 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800de26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de28:	7d1b      	ldrb	r3, [r3, #20]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d106      	bne.n	800de3c <tcp_slowtmr+0x48>
 800de2e:	4b8d      	ldr	r3, [pc, #564]	@ (800e064 <tcp_slowtmr+0x270>)
 800de30:	f240 42be 	movw	r2, #1214	@ 0x4be
 800de34:	498c      	ldr	r1, [pc, #560]	@ (800e068 <tcp_slowtmr+0x274>)
 800de36:	488d      	ldr	r0, [pc, #564]	@ (800e06c <tcp_slowtmr+0x278>)
 800de38:	f005 fb5a 	bl	80134f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3e:	7d1b      	ldrb	r3, [r3, #20]
 800de40:	2b01      	cmp	r3, #1
 800de42:	d106      	bne.n	800de52 <tcp_slowtmr+0x5e>
 800de44:	4b87      	ldr	r3, [pc, #540]	@ (800e064 <tcp_slowtmr+0x270>)
 800de46:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800de4a:	4989      	ldr	r1, [pc, #548]	@ (800e070 <tcp_slowtmr+0x27c>)
 800de4c:	4887      	ldr	r0, [pc, #540]	@ (800e06c <tcp_slowtmr+0x278>)
 800de4e:	f005 fb4f 	bl	80134f0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800de52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de54:	7d1b      	ldrb	r3, [r3, #20]
 800de56:	2b0a      	cmp	r3, #10
 800de58:	d106      	bne.n	800de68 <tcp_slowtmr+0x74>
 800de5a:	4b82      	ldr	r3, [pc, #520]	@ (800e064 <tcp_slowtmr+0x270>)
 800de5c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800de60:	4984      	ldr	r1, [pc, #528]	@ (800e074 <tcp_slowtmr+0x280>)
 800de62:	4882      	ldr	r0, [pc, #520]	@ (800e06c <tcp_slowtmr+0x278>)
 800de64:	f005 fb44 	bl	80134f0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800de68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de6a:	7f9a      	ldrb	r2, [r3, #30]
 800de6c:	4b7b      	ldr	r3, [pc, #492]	@ (800e05c <tcp_slowtmr+0x268>)
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	429a      	cmp	r2, r3
 800de72:	d105      	bne.n	800de80 <tcp_slowtmr+0x8c>
      prev = pcb;
 800de74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de76:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800de78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de7a:	68db      	ldr	r3, [r3, #12]
 800de7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800de7e:	e270      	b.n	800e362 <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 800de80:	4b76      	ldr	r3, [pc, #472]	@ (800e05c <tcp_slowtmr+0x268>)
 800de82:	781a      	ldrb	r2, [r3, #0]
 800de84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de86:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de96:	7d1b      	ldrb	r3, [r3, #20]
 800de98:	2b02      	cmp	r3, #2
 800de9a:	d10a      	bne.n	800deb2 <tcp_slowtmr+0xbe>
 800de9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dea2:	2b05      	cmp	r3, #5
 800dea4:	d905      	bls.n	800deb2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800dea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800deaa:	3301      	adds	r3, #1
 800deac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800deb0:	e11e      	b.n	800e0f0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800deb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800deb8:	2b0b      	cmp	r3, #11
 800deba:	d905      	bls.n	800dec8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800debc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dec0:	3301      	adds	r3, #1
 800dec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dec6:	e113      	b.n	800e0f0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d075      	beq.n	800dfbe <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ded2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d006      	beq.n	800dee8 <tcp_slowtmr+0xf4>
 800deda:	4b62      	ldr	r3, [pc, #392]	@ (800e064 <tcp_slowtmr+0x270>)
 800dedc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800dee0:	4965      	ldr	r1, [pc, #404]	@ (800e078 <tcp_slowtmr+0x284>)
 800dee2:	4862      	ldr	r0, [pc, #392]	@ (800e06c <tcp_slowtmr+0x278>)
 800dee4:	f005 fb04 	bl	80134f0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800deec:	2b00      	cmp	r3, #0
 800deee:	d106      	bne.n	800defe <tcp_slowtmr+0x10a>
 800def0:	4b5c      	ldr	r3, [pc, #368]	@ (800e064 <tcp_slowtmr+0x270>)
 800def2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800def6:	4961      	ldr	r1, [pc, #388]	@ (800e07c <tcp_slowtmr+0x288>)
 800def8:	485c      	ldr	r0, [pc, #368]	@ (800e06c <tcp_slowtmr+0x278>)
 800defa:	f005 faf9 	bl	80134f0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800defe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df00:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800df04:	2b0b      	cmp	r3, #11
 800df06:	d905      	bls.n	800df14 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800df08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df0c:	3301      	adds	r3, #1
 800df0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df12:	e0ed      	b.n	800e0f0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800df14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df16:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800df1a:	3b01      	subs	r3, #1
 800df1c:	4a58      	ldr	r2, [pc, #352]	@ (800e080 <tcp_slowtmr+0x28c>)
 800df1e:	5cd3      	ldrb	r3, [r2, r3]
 800df20:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800df22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df24:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800df28:	7c7a      	ldrb	r2, [r7, #17]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d907      	bls.n	800df3e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800df2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df30:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800df34:	3301      	adds	r3, #1
 800df36:	b2da      	uxtb	r2, r3
 800df38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800df3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800df44:	7c7a      	ldrb	r2, [r7, #17]
 800df46:	429a      	cmp	r2, r3
 800df48:	f200 80d2 	bhi.w	800e0f0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800df4c:	2301      	movs	r3, #1
 800df4e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800df50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df52:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df56:	2b00      	cmp	r3, #0
 800df58:	d108      	bne.n	800df6c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800df5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df5c:	f004 fc24 	bl	80127a8 <tcp_zero_window_probe>
 800df60:	4603      	mov	r3, r0
 800df62:	2b00      	cmp	r3, #0
 800df64:	d014      	beq.n	800df90 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800df66:	2300      	movs	r3, #0
 800df68:	623b      	str	r3, [r7, #32]
 800df6a:	e011      	b.n	800df90 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800df6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800df72:	4619      	mov	r1, r3
 800df74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df76:	f003 fae9 	bl	801154c <tcp_split_unsent_seg>
 800df7a:	4603      	mov	r3, r0
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d107      	bne.n	800df90 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800df80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df82:	f003 fd69 	bl	8011a58 <tcp_output>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d101      	bne.n	800df90 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800df8c:	2300      	movs	r3, #0
 800df8e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800df90:	6a3b      	ldr	r3, [r7, #32]
 800df92:	2b00      	cmp	r3, #0
 800df94:	f000 80ac 	beq.w	800e0f0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800df98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df9a:	2200      	movs	r2, #0
 800df9c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800dfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dfa6:	2b06      	cmp	r3, #6
 800dfa8:	f200 80a2 	bhi.w	800e0f0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800dfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfae:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	b2da      	uxtb	r2, r3
 800dfb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800dfbc:	e098      	b.n	800e0f0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800dfbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfc0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	db0f      	blt.n	800dfe8 <tcp_slowtmr+0x1f4>
 800dfc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dfce:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dfd2:	4293      	cmp	r3, r2
 800dfd4:	d008      	beq.n	800dfe8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800dfd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	3301      	adds	r3, #1
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	b21a      	sxth	r2, r3
 800dfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800dfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfea:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800dfee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dff0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800dff4:	429a      	cmp	r2, r3
 800dff6:	db7b      	blt.n	800e0f0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800dff8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dffa:	f004 f821 	bl	8012040 <tcp_rexmit_rto_prepare>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d007      	beq.n	800e014 <tcp_slowtmr+0x220>
 800e004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d171      	bne.n	800e0f0 <tcp_slowtmr+0x2fc>
 800e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e00e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e010:	2b00      	cmp	r3, #0
 800e012:	d06d      	beq.n	800e0f0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800e014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e016:	7d1b      	ldrb	r3, [r3, #20]
 800e018:	2b02      	cmp	r3, #2
 800e01a:	d03a      	beq.n	800e092 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e01e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e022:	2b0c      	cmp	r3, #12
 800e024:	bf28      	it	cs
 800e026:	230c      	movcs	r3, #12
 800e028:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e02a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e02c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e030:	10db      	asrs	r3, r3, #3
 800e032:	b21b      	sxth	r3, r3
 800e034:	461a      	mov	r2, r3
 800e036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e038:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e03c:	4413      	add	r3, r2
 800e03e:	7efa      	ldrb	r2, [r7, #27]
 800e040:	4910      	ldr	r1, [pc, #64]	@ (800e084 <tcp_slowtmr+0x290>)
 800e042:	5c8a      	ldrb	r2, [r1, r2]
 800e044:	4093      	lsls	r3, r2
 800e046:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800e04e:	4293      	cmp	r3, r2
 800e050:	dc1a      	bgt.n	800e088 <tcp_slowtmr+0x294>
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	b21a      	sxth	r2, r3
 800e056:	e019      	b.n	800e08c <tcp_slowtmr+0x298>
 800e058:	2400847c 	.word	0x2400847c
 800e05c:	24008492 	.word	0x24008492
 800e060:	24008488 	.word	0x24008488
 800e064:	08015678 	.word	0x08015678
 800e068:	080159e8 	.word	0x080159e8
 800e06c:	080156e8 	.word	0x080156e8
 800e070:	08015a14 	.word	0x08015a14
 800e074:	08015a40 	.word	0x08015a40
 800e078:	08015a70 	.word	0x08015a70
 800e07c:	08015aa4 	.word	0x08015aa4
 800e080:	080171e0 	.word	0x080171e0
 800e084:	080171d0 	.word	0x080171d0
 800e088:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800e08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e08e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800e092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e094:	2200      	movs	r2, #0
 800e096:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e09a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e09e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	bf28      	it	cs
 800e0a8:	4613      	movcs	r3, r2
 800e0aa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e0ac:	8a7b      	ldrh	r3, [r7, #18]
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	b29a      	uxth	r2, r3
 800e0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0b4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e0b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e0be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0c2:	005b      	lsls	r3, r3, #1
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d206      	bcs.n	800e0d8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e0ce:	005b      	lsls	r3, r3, #1
 800e0d0:	b29a      	uxth	r2, r3
 800e0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800e0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0da:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800e0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800e0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800e0ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0ec:	f004 f818 	bl	8012120 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800e0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
 800e0f4:	2b06      	cmp	r3, #6
 800e0f6:	d111      	bne.n	800e11c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800e0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fa:	8b5b      	ldrh	r3, [r3, #26]
 800e0fc:	f003 0310 	and.w	r3, r3, #16
 800e100:	2b00      	cmp	r3, #0
 800e102:	d00b      	beq.n	800e11c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e104:	4b9c      	ldr	r3, [pc, #624]	@ (800e378 <tcp_slowtmr+0x584>)
 800e106:	681a      	ldr	r2, [r3, #0]
 800e108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	1ad3      	subs	r3, r2, r3
 800e10e:	2b28      	cmp	r3, #40	@ 0x28
 800e110:	d904      	bls.n	800e11c <tcp_slowtmr+0x328>
          ++pcb_remove;
 800e112:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e116:	3301      	adds	r3, #1
 800e118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11e:	7a5b      	ldrb	r3, [r3, #9]
 800e120:	f003 0308 	and.w	r3, r3, #8
 800e124:	2b00      	cmp	r3, #0
 800e126:	d04a      	beq.n	800e1be <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	d003      	beq.n	800e138 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800e130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e132:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e134:	2b07      	cmp	r3, #7
 800e136:	d142      	bne.n	800e1be <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e138:	4b8f      	ldr	r3, [pc, #572]	@ (800e378 <tcp_slowtmr+0x584>)
 800e13a:	681a      	ldr	r2, [r3, #0]
 800e13c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e13e:	6a1b      	ldr	r3, [r3, #32]
 800e140:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e144:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e148:	4b8c      	ldr	r3, [pc, #560]	@ (800e37c <tcp_slowtmr+0x588>)
 800e14a:	440b      	add	r3, r1
 800e14c:	498c      	ldr	r1, [pc, #560]	@ (800e380 <tcp_slowtmr+0x58c>)
 800e14e:	fba1 1303 	umull	r1, r3, r1, r3
 800e152:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e154:	429a      	cmp	r2, r3
 800e156:	d90a      	bls.n	800e16e <tcp_slowtmr+0x37a>
        ++pcb_remove;
 800e158:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e15c:	3301      	adds	r3, #1
 800e15e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e162:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e166:	3301      	adds	r3, #1
 800e168:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e16c:	e027      	b.n	800e1be <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e16e:	4b82      	ldr	r3, [pc, #520]	@ (800e378 <tcp_slowtmr+0x584>)
 800e170:	681a      	ldr	r2, [r3, #0]
 800e172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e174:	6a1b      	ldr	r3, [r3, #32]
 800e176:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e17a:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e180:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e184:	4618      	mov	r0, r3
 800e186:	4b7f      	ldr	r3, [pc, #508]	@ (800e384 <tcp_slowtmr+0x590>)
 800e188:	fb00 f303 	mul.w	r3, r0, r3
 800e18c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e18e:	497c      	ldr	r1, [pc, #496]	@ (800e380 <tcp_slowtmr+0x58c>)
 800e190:	fba1 1303 	umull	r1, r3, r1, r3
 800e194:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e196:	429a      	cmp	r2, r3
 800e198:	d911      	bls.n	800e1be <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e19a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e19c:	f004 fac4 	bl	8012728 <tcp_keepalive>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e1a6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d107      	bne.n	800e1be <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e1ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b0:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ba:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d011      	beq.n	800e1ea <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e1c6:	4b6c      	ldr	r3, [pc, #432]	@ (800e378 <tcp_slowtmr+0x584>)
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1cc:	6a1b      	ldr	r3, [r3, #32]
 800e1ce:	1ad2      	subs	r2, r2, r3
 800e1d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e1d6:	4619      	mov	r1, r3
 800e1d8:	460b      	mov	r3, r1
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	440b      	add	r3, r1
 800e1de:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d302      	bcc.n	800e1ea <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 800e1e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1e6:	f000 fddd 	bl	800eda4 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ec:	7d1b      	ldrb	r3, [r3, #20]
 800e1ee:	2b03      	cmp	r3, #3
 800e1f0:	d10b      	bne.n	800e20a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e1f2:	4b61      	ldr	r3, [pc, #388]	@ (800e378 <tcp_slowtmr+0x584>)
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	1ad3      	subs	r3, r2, r3
 800e1fc:	2b28      	cmp	r3, #40	@ 0x28
 800e1fe:	d904      	bls.n	800e20a <tcp_slowtmr+0x416>
        ++pcb_remove;
 800e200:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e204:	3301      	adds	r3, #1
 800e206:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800e20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20c:	7d1b      	ldrb	r3, [r3, #20]
 800e20e:	2b09      	cmp	r3, #9
 800e210:	d10b      	bne.n	800e22a <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e212:	4b59      	ldr	r3, [pc, #356]	@ (800e378 <tcp_slowtmr+0x584>)
 800e214:	681a      	ldr	r2, [r3, #0]
 800e216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e218:	6a1b      	ldr	r3, [r3, #32]
 800e21a:	1ad3      	subs	r3, r2, r3
 800e21c:	2bf0      	cmp	r3, #240	@ 0xf0
 800e21e:	d904      	bls.n	800e22a <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e224:	3301      	adds	r3, #1
 800e226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800e22a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d060      	beq.n	800e2f4 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 800e232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e238:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e23a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e23c:	f000 fbfe 	bl	800ea3c <tcp_pcb_purge>
      if (prev != NULL) {
 800e240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e242:	2b00      	cmp	r3, #0
 800e244:	d010      	beq.n	800e268 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e246:	4b50      	ldr	r3, [pc, #320]	@ (800e388 <tcp_slowtmr+0x594>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d106      	bne.n	800e25e <tcp_slowtmr+0x46a>
 800e250:	4b4e      	ldr	r3, [pc, #312]	@ (800e38c <tcp_slowtmr+0x598>)
 800e252:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e256:	494e      	ldr	r1, [pc, #312]	@ (800e390 <tcp_slowtmr+0x59c>)
 800e258:	484e      	ldr	r0, [pc, #312]	@ (800e394 <tcp_slowtmr+0x5a0>)
 800e25a:	f005 f949 	bl	80134f0 <iprintf>
        prev->next = pcb->next;
 800e25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e260:	68da      	ldr	r2, [r3, #12]
 800e262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e264:	60da      	str	r2, [r3, #12]
 800e266:	e00f      	b.n	800e288 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e268:	4b47      	ldr	r3, [pc, #284]	@ (800e388 <tcp_slowtmr+0x594>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e26e:	429a      	cmp	r2, r3
 800e270:	d006      	beq.n	800e280 <tcp_slowtmr+0x48c>
 800e272:	4b46      	ldr	r3, [pc, #280]	@ (800e38c <tcp_slowtmr+0x598>)
 800e274:	f240 5271 	movw	r2, #1393	@ 0x571
 800e278:	4947      	ldr	r1, [pc, #284]	@ (800e398 <tcp_slowtmr+0x5a4>)
 800e27a:	4846      	ldr	r0, [pc, #280]	@ (800e394 <tcp_slowtmr+0x5a0>)
 800e27c:	f005 f938 	bl	80134f0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e282:	68db      	ldr	r3, [r3, #12]
 800e284:	4a40      	ldr	r2, [pc, #256]	@ (800e388 <tcp_slowtmr+0x594>)
 800e286:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e288:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d013      	beq.n	800e2b8 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e292:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e296:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e298:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e29c:	3304      	adds	r3, #4
 800e29e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e2a0:	8ad2      	ldrh	r2, [r2, #22]
 800e2a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e2a4:	8b09      	ldrh	r1, [r1, #24]
 800e2a6:	9102      	str	r1, [sp, #8]
 800e2a8:	9201      	str	r2, [sp, #4]
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	462b      	mov	r3, r5
 800e2ae:	4622      	mov	r2, r4
 800e2b0:	4601      	mov	r1, r0
 800e2b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e2b4:	f004 f984 	bl	80125c0 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e2be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c0:	7d1b      	ldrb	r3, [r3, #20]
 800e2c2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ca:	68db      	ldr	r3, [r3, #12]
 800e2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e2ce:	6838      	ldr	r0, [r7, #0]
 800e2d0:	f7ff f9f2 	bl	800d6b8 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e2d4:	4b31      	ldr	r3, [pc, #196]	@ (800e39c <tcp_slowtmr+0x5a8>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d004      	beq.n	800e2ea <tcp_slowtmr+0x4f6>
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f06f 010c 	mvn.w	r1, #12
 800e2e6:	68b8      	ldr	r0, [r7, #8]
 800e2e8:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e2ea:	4b2c      	ldr	r3, [pc, #176]	@ (800e39c <tcp_slowtmr+0x5a8>)
 800e2ec:	781b      	ldrb	r3, [r3, #0]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d037      	beq.n	800e362 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e2f2:	e592      	b.n	800de1a <tcp_slowtmr+0x26>
      prev = pcb;
 800e2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e2f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2fa:	68db      	ldr	r3, [r3, #12]
 800e2fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e300:	7f1b      	ldrb	r3, [r3, #28]
 800e302:	3301      	adds	r3, #1
 800e304:	b2da      	uxtb	r2, r3
 800e306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e308:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30c:	7f1a      	ldrb	r2, [r3, #28]
 800e30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e310:	7f5b      	ldrb	r3, [r3, #29]
 800e312:	429a      	cmp	r2, r3
 800e314:	d325      	bcc.n	800e362 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	2200      	movs	r2, #0
 800e31a:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800e31c:	4b1f      	ldr	r3, [pc, #124]	@ (800e39c <tcp_slowtmr+0x5a8>)
 800e31e:	2200      	movs	r2, #0
 800e320:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e324:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00b      	beq.n	800e344 <tcp_slowtmr+0x550>
 800e32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e332:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e334:	6912      	ldr	r2, [r2, #16]
 800e336:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e338:	4610      	mov	r0, r2
 800e33a:	4798      	blx	r3
 800e33c:	4603      	mov	r3, r0
 800e33e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e342:	e002      	b.n	800e34a <tcp_slowtmr+0x556>
 800e344:	2300      	movs	r3, #0
 800e346:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e34a:	4b14      	ldr	r3, [pc, #80]	@ (800e39c <tcp_slowtmr+0x5a8>)
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f47f ad62 	bne.w	800de18 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e354:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d102      	bne.n	800e362 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e35c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e35e:	f003 fb7b 	bl	8011a58 <tcp_output>
  while (pcb != NULL) {
 800e362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e364:	2b00      	cmp	r3, #0
 800e366:	f47f ad5e 	bne.w	800de26 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e36a:	2300      	movs	r3, #0
 800e36c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e36e:	4b0c      	ldr	r3, [pc, #48]	@ (800e3a0 <tcp_slowtmr+0x5ac>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e374:	e069      	b.n	800e44a <tcp_slowtmr+0x656>
 800e376:	bf00      	nop
 800e378:	2400847c 	.word	0x2400847c
 800e37c:	000a4cb8 	.word	0x000a4cb8
 800e380:	10624dd3 	.word	0x10624dd3
 800e384:	000124f8 	.word	0x000124f8
 800e388:	24008488 	.word	0x24008488
 800e38c:	08015678 	.word	0x08015678
 800e390:	08015adc 	.word	0x08015adc
 800e394:	080156e8 	.word	0x080156e8
 800e398:	08015b08 	.word	0x08015b08
 800e39c:	24008490 	.word	0x24008490
 800e3a0:	2400848c 	.word	0x2400848c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a6:	7d1b      	ldrb	r3, [r3, #20]
 800e3a8:	2b0a      	cmp	r3, #10
 800e3aa:	d006      	beq.n	800e3ba <tcp_slowtmr+0x5c6>
 800e3ac:	4b2b      	ldr	r3, [pc, #172]	@ (800e45c <tcp_slowtmr+0x668>)
 800e3ae:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e3b2:	492b      	ldr	r1, [pc, #172]	@ (800e460 <tcp_slowtmr+0x66c>)
 800e3b4:	482b      	ldr	r0, [pc, #172]	@ (800e464 <tcp_slowtmr+0x670>)
 800e3b6:	f005 f89b 	bl	80134f0 <iprintf>
    pcb_remove = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e3c0:	4b29      	ldr	r3, [pc, #164]	@ (800e468 <tcp_slowtmr+0x674>)
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c6:	6a1b      	ldr	r3, [r3, #32]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	2bf0      	cmp	r3, #240	@ 0xf0
 800e3cc:	d904      	bls.n	800e3d8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800e3ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d02f      	beq.n	800e440 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e3e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e3e2:	f000 fb2b 	bl	800ea3c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d010      	beq.n	800e40e <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e3ec:	4b1f      	ldr	r3, [pc, #124]	@ (800e46c <tcp_slowtmr+0x678>)
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e3f2:	429a      	cmp	r2, r3
 800e3f4:	d106      	bne.n	800e404 <tcp_slowtmr+0x610>
 800e3f6:	4b19      	ldr	r3, [pc, #100]	@ (800e45c <tcp_slowtmr+0x668>)
 800e3f8:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e3fc:	491c      	ldr	r1, [pc, #112]	@ (800e470 <tcp_slowtmr+0x67c>)
 800e3fe:	4819      	ldr	r0, [pc, #100]	@ (800e464 <tcp_slowtmr+0x670>)
 800e400:	f005 f876 	bl	80134f0 <iprintf>
        prev->next = pcb->next;
 800e404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e406:	68da      	ldr	r2, [r3, #12]
 800e408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e40a:	60da      	str	r2, [r3, #12]
 800e40c:	e00f      	b.n	800e42e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e40e:	4b17      	ldr	r3, [pc, #92]	@ (800e46c <tcp_slowtmr+0x678>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e414:	429a      	cmp	r2, r3
 800e416:	d006      	beq.n	800e426 <tcp_slowtmr+0x632>
 800e418:	4b10      	ldr	r3, [pc, #64]	@ (800e45c <tcp_slowtmr+0x668>)
 800e41a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e41e:	4915      	ldr	r1, [pc, #84]	@ (800e474 <tcp_slowtmr+0x680>)
 800e420:	4810      	ldr	r0, [pc, #64]	@ (800e464 <tcp_slowtmr+0x670>)
 800e422:	f005 f865 	bl	80134f0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	4a10      	ldr	r2, [pc, #64]	@ (800e46c <tcp_slowtmr+0x678>)
 800e42c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e430:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e438:	69f8      	ldr	r0, [r7, #28]
 800e43a:	f7ff f93d 	bl	800d6b8 <tcp_free>
 800e43e:	e004      	b.n	800e44a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800e440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e442:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e446:	68db      	ldr	r3, [r3, #12]
 800e448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d1a9      	bne.n	800e3a4 <tcp_slowtmr+0x5b0>
    }
  }
}
 800e450:	bf00      	nop
 800e452:	bf00      	nop
 800e454:	3730      	adds	r7, #48	@ 0x30
 800e456:	46bd      	mov	sp, r7
 800e458:	bdb0      	pop	{r4, r5, r7, pc}
 800e45a:	bf00      	nop
 800e45c:	08015678 	.word	0x08015678
 800e460:	08015b34 	.word	0x08015b34
 800e464:	080156e8 	.word	0x080156e8
 800e468:	2400847c 	.word	0x2400847c
 800e46c:	2400848c 	.word	0x2400848c
 800e470:	08015b64 	.word	0x08015b64
 800e474:	08015b8c 	.word	0x08015b8c

0800e478 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b082      	sub	sp, #8
 800e47c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e47e:	4b2d      	ldr	r3, [pc, #180]	@ (800e534 <tcp_fasttmr+0xbc>)
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	3301      	adds	r3, #1
 800e484:	b2da      	uxtb	r2, r3
 800e486:	4b2b      	ldr	r3, [pc, #172]	@ (800e534 <tcp_fasttmr+0xbc>)
 800e488:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e48a:	4b2b      	ldr	r3, [pc, #172]	@ (800e538 <tcp_fasttmr+0xc0>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e490:	e048      	b.n	800e524 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	7f9a      	ldrb	r2, [r3, #30]
 800e496:	4b27      	ldr	r3, [pc, #156]	@ (800e534 <tcp_fasttmr+0xbc>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d03f      	beq.n	800e51e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e49e:	4b25      	ldr	r3, [pc, #148]	@ (800e534 <tcp_fasttmr+0xbc>)
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8b5b      	ldrh	r3, [r3, #26]
 800e4aa:	f003 0301 	and.w	r3, r3, #1
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d010      	beq.n	800e4d4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	8b5b      	ldrh	r3, [r3, #26]
 800e4b6:	f043 0302 	orr.w	r3, r3, #2
 800e4ba:	b29a      	uxth	r2, r3
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e4c0:	6878      	ldr	r0, [r7, #4]
 800e4c2:	f003 fac9 	bl	8011a58 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	8b5b      	ldrh	r3, [r3, #26]
 800e4ca:	f023 0303 	bic.w	r3, r3, #3
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	8b5b      	ldrh	r3, [r3, #26]
 800e4d8:	f003 0308 	and.w	r3, r3, #8
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d009      	beq.n	800e4f4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	8b5b      	ldrh	r3, [r3, #26]
 800e4e4:	f023 0308 	bic.w	r3, r3, #8
 800e4e8:	b29a      	uxth	r2, r3
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f7ff fa76 	bl	800d9e0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	68db      	ldr	r3, [r3, #12]
 800e4f8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00a      	beq.n	800e518 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e502:	4b0e      	ldr	r3, [pc, #56]	@ (800e53c <tcp_fasttmr+0xc4>)
 800e504:	2200      	movs	r2, #0
 800e506:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f000 f819 	bl	800e540 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e50e:	4b0b      	ldr	r3, [pc, #44]	@ (800e53c <tcp_fasttmr+0xc4>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d000      	beq.n	800e518 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e516:	e7b8      	b.n	800e48a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	607b      	str	r3, [r7, #4]
 800e51c:	e002      	b.n	800e524 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	68db      	ldr	r3, [r3, #12]
 800e522:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d1b3      	bne.n	800e492 <tcp_fasttmr+0x1a>
    }
  }
}
 800e52a:	bf00      	nop
 800e52c:	bf00      	nop
 800e52e:	3708      	adds	r7, #8
 800e530:	46bd      	mov	sp, r7
 800e532:	bd80      	pop	{r7, pc}
 800e534:	24008492 	.word	0x24008492
 800e538:	24008488 	.word	0x24008488
 800e53c:	24008490 	.word	0x24008490

0800e540 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e540:	b590      	push	{r4, r7, lr}
 800e542:	b085      	sub	sp, #20
 800e544:	af00      	add	r7, sp, #0
 800e546:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d109      	bne.n	800e562 <tcp_process_refused_data+0x22>
 800e54e:	4b37      	ldr	r3, [pc, #220]	@ (800e62c <tcp_process_refused_data+0xec>)
 800e550:	f240 6209 	movw	r2, #1545	@ 0x609
 800e554:	4936      	ldr	r1, [pc, #216]	@ (800e630 <tcp_process_refused_data+0xf0>)
 800e556:	4837      	ldr	r0, [pc, #220]	@ (800e634 <tcp_process_refused_data+0xf4>)
 800e558:	f004 ffca 	bl	80134f0 <iprintf>
 800e55c:	f06f 030f 	mvn.w	r3, #15
 800e560:	e060      	b.n	800e624 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e566:	7b5b      	ldrb	r3, [r3, #13]
 800e568:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e56e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d00b      	beq.n	800e598 <tcp_process_refused_data+0x58>
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6918      	ldr	r0, [r3, #16]
 800e58a:	2300      	movs	r3, #0
 800e58c:	68ba      	ldr	r2, [r7, #8]
 800e58e:	6879      	ldr	r1, [r7, #4]
 800e590:	47a0      	blx	r4
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
 800e596:	e007      	b.n	800e5a8 <tcp_process_refused_data+0x68>
 800e598:	2300      	movs	r3, #0
 800e59a:	68ba      	ldr	r2, [r7, #8]
 800e59c:	6879      	ldr	r1, [r7, #4]
 800e59e:	2000      	movs	r0, #0
 800e5a0:	f000 f8a4 	bl	800e6ec <tcp_recv_null>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e5a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d12a      	bne.n	800e606 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e5b0:	7bbb      	ldrb	r3, [r7, #14]
 800e5b2:	f003 0320 	and.w	r3, r3, #32
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d033      	beq.n	800e622 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5be:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e5c2:	d005      	beq.n	800e5d0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	b29a      	uxth	r2, r3
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d00b      	beq.n	800e5f2 <tcp_process_refused_data+0xb2>
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	6918      	ldr	r0, [r3, #16]
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	6879      	ldr	r1, [r7, #4]
 800e5ea:	47a0      	blx	r4
 800e5ec:	4603      	mov	r3, r0
 800e5ee:	73fb      	strb	r3, [r7, #15]
 800e5f0:	e001      	b.n	800e5f6 <tcp_process_refused_data+0xb6>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e5fa:	f113 0f0d 	cmn.w	r3, #13
 800e5fe:	d110      	bne.n	800e622 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800e600:	f06f 030c 	mvn.w	r3, #12
 800e604:	e00e      	b.n	800e624 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800e606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e60a:	f113 0f0d 	cmn.w	r3, #13
 800e60e:	d102      	bne.n	800e616 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e610:	f06f 030c 	mvn.w	r3, #12
 800e614:	e006      	b.n	800e624 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	68ba      	ldr	r2, [r7, #8]
 800e61a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e61c:	f06f 0304 	mvn.w	r3, #4
 800e620:	e000      	b.n	800e624 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800e622:	2300      	movs	r3, #0
}
 800e624:	4618      	mov	r0, r3
 800e626:	3714      	adds	r7, #20
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd90      	pop	{r4, r7, pc}
 800e62c:	08015678 	.word	0x08015678
 800e630:	08015bb4 	.word	0x08015bb4
 800e634:	080156e8 	.word	0x080156e8

0800e638 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b084      	sub	sp, #16
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e640:	e007      	b.n	800e652 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f80a 	bl	800e662 <tcp_seg_free>
    seg = next;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1f4      	bne.n	800e642 <tcp_segs_free+0xa>
  }
}
 800e658:	bf00      	nop
 800e65a:	bf00      	nop
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b082      	sub	sp, #8
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d00c      	beq.n	800e68a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d004      	beq.n	800e682 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7fe fc7d 	bl	800cf7c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e682:	6879      	ldr	r1, [r7, #4]
 800e684:	2003      	movs	r0, #3
 800e686:	f7fd fdd5 	bl	800c234 <memp_free>
  }
}
 800e68a:	bf00      	nop
 800e68c:	3708      	adds	r7, #8
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
	...

0800e694 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b084      	sub	sp, #16
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d106      	bne.n	800e6b0 <tcp_seg_copy+0x1c>
 800e6a2:	4b0f      	ldr	r3, [pc, #60]	@ (800e6e0 <tcp_seg_copy+0x4c>)
 800e6a4:	f240 6282 	movw	r2, #1666	@ 0x682
 800e6a8:	490e      	ldr	r1, [pc, #56]	@ (800e6e4 <tcp_seg_copy+0x50>)
 800e6aa:	480f      	ldr	r0, [pc, #60]	@ (800e6e8 <tcp_seg_copy+0x54>)
 800e6ac:	f004 ff20 	bl	80134f0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e6b0:	2003      	movs	r0, #3
 800e6b2:	f7fd fd49 	bl	800c148 <memp_malloc>
 800e6b6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d101      	bne.n	800e6c2 <tcp_seg_copy+0x2e>
    return NULL;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	e00a      	b.n	800e6d8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e6c2:	2210      	movs	r2, #16
 800e6c4:	6879      	ldr	r1, [r7, #4]
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f004 ffed 	bl	80136a6 <memcpy>
  pbuf_ref(cseg->p);
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	685b      	ldr	r3, [r3, #4]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fe fcf9 	bl	800d0c8 <pbuf_ref>
  return cseg;
 800e6d6:	68fb      	ldr	r3, [r7, #12]
}
 800e6d8:	4618      	mov	r0, r3
 800e6da:	3710      	adds	r7, #16
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bd80      	pop	{r7, pc}
 800e6e0:	08015678 	.word	0x08015678
 800e6e4:	08015bf8 	.word	0x08015bf8
 800e6e8:	080156e8 	.word	0x080156e8

0800e6ec <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b084      	sub	sp, #16
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	60f8      	str	r0, [r7, #12]
 800e6f4:	60b9      	str	r1, [r7, #8]
 800e6f6:	607a      	str	r2, [r7, #4]
 800e6f8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d109      	bne.n	800e714 <tcp_recv_null+0x28>
 800e700:	4b12      	ldr	r3, [pc, #72]	@ (800e74c <tcp_recv_null+0x60>)
 800e702:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e706:	4912      	ldr	r1, [pc, #72]	@ (800e750 <tcp_recv_null+0x64>)
 800e708:	4812      	ldr	r0, [pc, #72]	@ (800e754 <tcp_recv_null+0x68>)
 800e70a:	f004 fef1 	bl	80134f0 <iprintf>
 800e70e:	f06f 030f 	mvn.w	r3, #15
 800e712:	e016      	b.n	800e742 <tcp_recv_null+0x56>

  if (p != NULL) {
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d009      	beq.n	800e72e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	891b      	ldrh	r3, [r3, #8]
 800e71e:	4619      	mov	r1, r3
 800e720:	68b8      	ldr	r0, [r7, #8]
 800e722:	f7ff fb17 	bl	800dd54 <tcp_recved>
    pbuf_free(p);
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f7fe fc28 	bl	800cf7c <pbuf_free>
 800e72c:	e008      	b.n	800e740 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800e72e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d104      	bne.n	800e740 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800e736:	68b8      	ldr	r0, [r7, #8]
 800e738:	f7ff f9bc 	bl	800dab4 <tcp_close>
 800e73c:	4603      	mov	r3, r0
 800e73e:	e000      	b.n	800e742 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	08015678 	.word	0x08015678
 800e750:	08015c14 	.word	0x08015c14
 800e754:	080156e8 	.word	0x080156e8

0800e758 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b086      	sub	sp, #24
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	4603      	mov	r3, r0
 800e760:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e766:	2b00      	cmp	r3, #0
 800e768:	db01      	blt.n	800e76e <tcp_kill_prio+0x16>
 800e76a:	79fb      	ldrb	r3, [r7, #7]
 800e76c:	e000      	b.n	800e770 <tcp_kill_prio+0x18>
 800e76e:	237f      	movs	r3, #127	@ 0x7f
 800e770:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e772:	7afb      	ldrb	r3, [r7, #11]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d034      	beq.n	800e7e2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e778:	7afb      	ldrb	r3, [r7, #11]
 800e77a:	3b01      	subs	r3, #1
 800e77c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e782:	2300      	movs	r3, #0
 800e784:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e786:	4b19      	ldr	r3, [pc, #100]	@ (800e7ec <tcp_kill_prio+0x94>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	617b      	str	r3, [r7, #20]
 800e78c:	e01f      	b.n	800e7ce <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	7d5b      	ldrb	r3, [r3, #21]
 800e792:	7afa      	ldrb	r2, [r7, #11]
 800e794:	429a      	cmp	r2, r3
 800e796:	d80c      	bhi.n	800e7b2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e79c:	7afa      	ldrb	r2, [r7, #11]
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d112      	bne.n	800e7c8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e7a2:	4b13      	ldr	r3, [pc, #76]	@ (800e7f0 <tcp_kill_prio+0x98>)
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	6a1b      	ldr	r3, [r3, #32]
 800e7aa:	1ad3      	subs	r3, r2, r3
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d80a      	bhi.n	800e7c8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e7b2:	4b0f      	ldr	r3, [pc, #60]	@ (800e7f0 <tcp_kill_prio+0x98>)
 800e7b4:	681a      	ldr	r2, [r3, #0]
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	6a1b      	ldr	r3, [r3, #32]
 800e7ba:	1ad3      	subs	r3, r2, r3
 800e7bc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	7d5b      	ldrb	r3, [r3, #21]
 800e7c6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	68db      	ldr	r3, [r3, #12]
 800e7cc:	617b      	str	r3, [r7, #20]
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1dc      	bne.n	800e78e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d004      	beq.n	800e7e4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e7da:	6938      	ldr	r0, [r7, #16]
 800e7dc:	f7ff fa54 	bl	800dc88 <tcp_abort>
 800e7e0:	e000      	b.n	800e7e4 <tcp_kill_prio+0x8c>
    return;
 800e7e2:	bf00      	nop
  }
}
 800e7e4:	3718      	adds	r7, #24
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	24008488 	.word	0x24008488
 800e7f0:	2400847c 	.word	0x2400847c

0800e7f4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b086      	sub	sp, #24
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e7fe:	79fb      	ldrb	r3, [r7, #7]
 800e800:	2b08      	cmp	r3, #8
 800e802:	d009      	beq.n	800e818 <tcp_kill_state+0x24>
 800e804:	79fb      	ldrb	r3, [r7, #7]
 800e806:	2b09      	cmp	r3, #9
 800e808:	d006      	beq.n	800e818 <tcp_kill_state+0x24>
 800e80a:	4b1a      	ldr	r3, [pc, #104]	@ (800e874 <tcp_kill_state+0x80>)
 800e80c:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e810:	4919      	ldr	r1, [pc, #100]	@ (800e878 <tcp_kill_state+0x84>)
 800e812:	481a      	ldr	r0, [pc, #104]	@ (800e87c <tcp_kill_state+0x88>)
 800e814:	f004 fe6c 	bl	80134f0 <iprintf>

  inactivity = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e81c:	2300      	movs	r3, #0
 800e81e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e820:	4b17      	ldr	r3, [pc, #92]	@ (800e880 <tcp_kill_state+0x8c>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	617b      	str	r3, [r7, #20]
 800e826:	e017      	b.n	800e858 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e828:	697b      	ldr	r3, [r7, #20]
 800e82a:	7d1b      	ldrb	r3, [r3, #20]
 800e82c:	79fa      	ldrb	r2, [r7, #7]
 800e82e:	429a      	cmp	r2, r3
 800e830:	d10f      	bne.n	800e852 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e832:	4b14      	ldr	r3, [pc, #80]	@ (800e884 <tcp_kill_state+0x90>)
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	697b      	ldr	r3, [r7, #20]
 800e838:	6a1b      	ldr	r3, [r3, #32]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	68fa      	ldr	r2, [r7, #12]
 800e83e:	429a      	cmp	r2, r3
 800e840:	d807      	bhi.n	800e852 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e842:	4b10      	ldr	r3, [pc, #64]	@ (800e884 <tcp_kill_state+0x90>)
 800e844:	681a      	ldr	r2, [r3, #0]
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	6a1b      	ldr	r3, [r3, #32]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	617b      	str	r3, [r7, #20]
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d1e4      	bne.n	800e828 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e85e:	693b      	ldr	r3, [r7, #16]
 800e860:	2b00      	cmp	r3, #0
 800e862:	d003      	beq.n	800e86c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e864:	2100      	movs	r1, #0
 800e866:	6938      	ldr	r0, [r7, #16]
 800e868:	f7ff f950 	bl	800db0c <tcp_abandon>
  }
}
 800e86c:	bf00      	nop
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	08015678 	.word	0x08015678
 800e878:	08015c30 	.word	0x08015c30
 800e87c:	080156e8 	.word	0x080156e8
 800e880:	24008488 	.word	0x24008488
 800e884:	2400847c 	.word	0x2400847c

0800e888 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e892:	2300      	movs	r3, #0
 800e894:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e896:	4b12      	ldr	r3, [pc, #72]	@ (800e8e0 <tcp_kill_timewait+0x58>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	60fb      	str	r3, [r7, #12]
 800e89c:	e012      	b.n	800e8c4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e89e:	4b11      	ldr	r3, [pc, #68]	@ (800e8e4 <tcp_kill_timewait+0x5c>)
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	6a1b      	ldr	r3, [r3, #32]
 800e8a6:	1ad3      	subs	r3, r2, r3
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	429a      	cmp	r2, r3
 800e8ac:	d807      	bhi.n	800e8be <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e8ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e8e4 <tcp_kill_timewait+0x5c>)
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	6a1b      	ldr	r3, [r3, #32]
 800e8b6:	1ad3      	subs	r3, r2, r3
 800e8b8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	68db      	ldr	r3, [r3, #12]
 800e8c2:	60fb      	str	r3, [r7, #12]
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1e9      	bne.n	800e89e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d002      	beq.n	800e8d6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8d0:	68b8      	ldr	r0, [r7, #8]
 800e8d2:	f7ff f9d9 	bl	800dc88 <tcp_abort>
  }
}
 800e8d6:	bf00      	nop
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	2400848c 	.word	0x2400848c
 800e8e4:	2400847c 	.word	0x2400847c

0800e8e8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b082      	sub	sp, #8
 800e8ec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e8ee:	4b10      	ldr	r3, [pc, #64]	@ (800e930 <tcp_handle_closepend+0x48>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8f4:	e014      	b.n	800e920 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	8b5b      	ldrh	r3, [r3, #26]
 800e900:	f003 0308 	and.w	r3, r3, #8
 800e904:	2b00      	cmp	r3, #0
 800e906:	d009      	beq.n	800e91c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	8b5b      	ldrh	r3, [r3, #26]
 800e90c:	f023 0308 	bic.w	r3, r3, #8
 800e910:	b29a      	uxth	r2, r3
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f7ff f862 	bl	800d9e0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1e7      	bne.n	800e8f6 <tcp_handle_closepend+0xe>
  }
}
 800e926:	bf00      	nop
 800e928:	bf00      	nop
 800e92a:	3708      	adds	r7, #8
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}
 800e930:	24008488 	.word	0x24008488

0800e934 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	4603      	mov	r3, r0
 800e93c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e93e:	2001      	movs	r0, #1
 800e940:	f7fd fc02 	bl	800c148 <memp_malloc>
 800e944:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d126      	bne.n	800e99a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e94c:	f7ff ffcc 	bl	800e8e8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e950:	f7ff ff9a 	bl	800e888 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e954:	2001      	movs	r0, #1
 800e956:	f7fd fbf7 	bl	800c148 <memp_malloc>
 800e95a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d11b      	bne.n	800e99a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e962:	2009      	movs	r0, #9
 800e964:	f7ff ff46 	bl	800e7f4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e968:	2001      	movs	r0, #1
 800e96a:	f7fd fbed 	bl	800c148 <memp_malloc>
 800e96e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d111      	bne.n	800e99a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e976:	2008      	movs	r0, #8
 800e978:	f7ff ff3c 	bl	800e7f4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e97c:	2001      	movs	r0, #1
 800e97e:	f7fd fbe3 	bl	800c148 <memp_malloc>
 800e982:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d107      	bne.n	800e99a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e98a:	79fb      	ldrb	r3, [r7, #7]
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7ff fee3 	bl	800e758 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e992:	2001      	movs	r0, #1
 800e994:	f7fd fbd8 	bl	800c148 <memp_malloc>
 800e998:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d03f      	beq.n	800ea20 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e9a0:	229c      	movs	r2, #156	@ 0x9c
 800e9a2:	2100      	movs	r1, #0
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f004 fe08 	bl	80135ba <memset>
    pcb->prio = prio;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	79fa      	ldrb	r2, [r7, #7]
 800e9ae:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e9b6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e9c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	22ff      	movs	r2, #255	@ 0xff
 800e9ce:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e9d6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2206      	movs	r2, #6
 800e9dc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	2206      	movs	r2, #6
 800e9e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e9ec:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	2201      	movs	r2, #1
 800e9f2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800e9f6:	4b0d      	ldr	r3, [pc, #52]	@ (800ea2c <tcp_alloc+0xf8>)
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e9fe:	4b0c      	ldr	r3, [pc, #48]	@ (800ea30 <tcp_alloc+0xfc>)
 800ea00:	781a      	ldrb	r2, [r3, #0]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea0c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	4a08      	ldr	r2, [pc, #32]	@ (800ea34 <tcp_alloc+0x100>)
 800ea14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	4a07      	ldr	r2, [pc, #28]	@ (800ea38 <tcp_alloc+0x104>)
 800ea1c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ea20:	68fb      	ldr	r3, [r7, #12]
}
 800ea22:	4618      	mov	r0, r3
 800ea24:	3710      	adds	r7, #16
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	2400847c 	.word	0x2400847c
 800ea30:	24008492 	.word	0x24008492
 800ea34:	0800e6ed 	.word	0x0800e6ed
 800ea38:	006ddd00 	.word	0x006ddd00

0800ea3c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d107      	bne.n	800ea5a <tcp_pcb_purge+0x1e>
 800ea4a:	4b21      	ldr	r3, [pc, #132]	@ (800ead0 <tcp_pcb_purge+0x94>)
 800ea4c:	f640 0251 	movw	r2, #2129	@ 0x851
 800ea50:	4920      	ldr	r1, [pc, #128]	@ (800ead4 <tcp_pcb_purge+0x98>)
 800ea52:	4821      	ldr	r0, [pc, #132]	@ (800ead8 <tcp_pcb_purge+0x9c>)
 800ea54:	f004 fd4c 	bl	80134f0 <iprintf>
 800ea58:	e037      	b.n	800eaca <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	7d1b      	ldrb	r3, [r3, #20]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d033      	beq.n	800eaca <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ea66:	2b0a      	cmp	r3, #10
 800ea68:	d02f      	beq.n	800eaca <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ea6e:	2b01      	cmp	r3, #1
 800ea70:	d02b      	beq.n	800eaca <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d007      	beq.n	800ea8a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7fe fa7c 	bl	800cf7c <pbuf_free>
      pcb->refused_data = NULL;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2200      	movs	r2, #0
 800ea88:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d002      	beq.n	800ea98 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 f986 	bl	800eda4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea9e:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaa4:	4618      	mov	r0, r3
 800eaa6:	f7ff fdc7 	bl	800e638 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7ff fdc2 	bl	800e638 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	66da      	str	r2, [r3, #108]	@ 0x6c
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	08015678 	.word	0x08015678
 800ead4:	08015cf0 	.word	0x08015cf0
 800ead8:	080156e8 	.word	0x080156e8

0800eadc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b084      	sub	sp, #16
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d106      	bne.n	800eafa <tcp_pcb_remove+0x1e>
 800eaec:	4b3e      	ldr	r3, [pc, #248]	@ (800ebe8 <tcp_pcb_remove+0x10c>)
 800eaee:	f640 0283 	movw	r2, #2179	@ 0x883
 800eaf2:	493e      	ldr	r1, [pc, #248]	@ (800ebec <tcp_pcb_remove+0x110>)
 800eaf4:	483e      	ldr	r0, [pc, #248]	@ (800ebf0 <tcp_pcb_remove+0x114>)
 800eaf6:	f004 fcfb 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d106      	bne.n	800eb0e <tcp_pcb_remove+0x32>
 800eb00:	4b39      	ldr	r3, [pc, #228]	@ (800ebe8 <tcp_pcb_remove+0x10c>)
 800eb02:	f640 0284 	movw	r2, #2180	@ 0x884
 800eb06:	493b      	ldr	r1, [pc, #236]	@ (800ebf4 <tcp_pcb_remove+0x118>)
 800eb08:	4839      	ldr	r0, [pc, #228]	@ (800ebf0 <tcp_pcb_remove+0x114>)
 800eb0a:	f004 fcf1 	bl	80134f0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	683a      	ldr	r2, [r7, #0]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d105      	bne.n	800eb24 <tcp_pcb_remove+0x48>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	68da      	ldr	r2, [r3, #12]
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	601a      	str	r2, [r3, #0]
 800eb22:	e013      	b.n	800eb4c <tcp_pcb_remove+0x70>
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	60fb      	str	r3, [r7, #12]
 800eb2a:	e00c      	b.n	800eb46 <tcp_pcb_remove+0x6a>
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	683a      	ldr	r2, [r7, #0]
 800eb32:	429a      	cmp	r2, r3
 800eb34:	d104      	bne.n	800eb40 <tcp_pcb_remove+0x64>
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	68da      	ldr	r2, [r3, #12]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	60da      	str	r2, [r3, #12]
 800eb3e:	e005      	b.n	800eb4c <tcp_pcb_remove+0x70>
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	60fb      	str	r3, [r7, #12]
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1ef      	bne.n	800eb2c <tcp_pcb_remove+0x50>
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eb52:	6838      	ldr	r0, [r7, #0]
 800eb54:	f7ff ff72 	bl	800ea3c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	7d1b      	ldrb	r3, [r3, #20]
 800eb5c:	2b0a      	cmp	r3, #10
 800eb5e:	d013      	beq.n	800eb88 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d00f      	beq.n	800eb88 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	8b5b      	ldrh	r3, [r3, #26]
 800eb6c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d009      	beq.n	800eb88 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800eb74:	683b      	ldr	r3, [r7, #0]
 800eb76:	8b5b      	ldrh	r3, [r3, #26]
 800eb78:	f043 0302 	orr.w	r3, r3, #2
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	683b      	ldr	r3, [r7, #0]
 800eb80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb82:	6838      	ldr	r0, [r7, #0]
 800eb84:	f002 ff68 	bl	8011a58 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	7d1b      	ldrb	r3, [r3, #20]
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d020      	beq.n	800ebd2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d006      	beq.n	800eba6 <tcp_pcb_remove+0xca>
 800eb98:	4b13      	ldr	r3, [pc, #76]	@ (800ebe8 <tcp_pcb_remove+0x10c>)
 800eb9a:	f640 0293 	movw	r2, #2195	@ 0x893
 800eb9e:	4916      	ldr	r1, [pc, #88]	@ (800ebf8 <tcp_pcb_remove+0x11c>)
 800eba0:	4813      	ldr	r0, [pc, #76]	@ (800ebf0 <tcp_pcb_remove+0x114>)
 800eba2:	f004 fca5 	bl	80134f0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d006      	beq.n	800ebbc <tcp_pcb_remove+0xe0>
 800ebae:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe8 <tcp_pcb_remove+0x10c>)
 800ebb0:	f640 0294 	movw	r2, #2196	@ 0x894
 800ebb4:	4911      	ldr	r1, [pc, #68]	@ (800ebfc <tcp_pcb_remove+0x120>)
 800ebb6:	480e      	ldr	r0, [pc, #56]	@ (800ebf0 <tcp_pcb_remove+0x114>)
 800ebb8:	f004 fc9a 	bl	80134f0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d006      	beq.n	800ebd2 <tcp_pcb_remove+0xf6>
 800ebc4:	4b08      	ldr	r3, [pc, #32]	@ (800ebe8 <tcp_pcb_remove+0x10c>)
 800ebc6:	f640 0296 	movw	r2, #2198	@ 0x896
 800ebca:	490d      	ldr	r1, [pc, #52]	@ (800ec00 <tcp_pcb_remove+0x124>)
 800ebcc:	4808      	ldr	r0, [pc, #32]	@ (800ebf0 <tcp_pcb_remove+0x114>)
 800ebce:	f004 fc8f 	bl	80134f0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ebde:	bf00      	nop
 800ebe0:	3710      	adds	r7, #16
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
 800ebe6:	bf00      	nop
 800ebe8:	08015678 	.word	0x08015678
 800ebec:	08015d0c 	.word	0x08015d0c
 800ebf0:	080156e8 	.word	0x080156e8
 800ebf4:	08015d28 	.word	0x08015d28
 800ebf8:	08015d48 	.word	0x08015d48
 800ebfc:	08015d60 	.word	0x08015d60
 800ec00:	08015d7c 	.word	0x08015d7c

0800ec04 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b082      	sub	sp, #8
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d106      	bne.n	800ec20 <tcp_next_iss+0x1c>
 800ec12:	4b0a      	ldr	r3, [pc, #40]	@ (800ec3c <tcp_next_iss+0x38>)
 800ec14:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ec18:	4909      	ldr	r1, [pc, #36]	@ (800ec40 <tcp_next_iss+0x3c>)
 800ec1a:	480a      	ldr	r0, [pc, #40]	@ (800ec44 <tcp_next_iss+0x40>)
 800ec1c:	f004 fc68 	bl	80134f0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ec20:	4b09      	ldr	r3, [pc, #36]	@ (800ec48 <tcp_next_iss+0x44>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	4b09      	ldr	r3, [pc, #36]	@ (800ec4c <tcp_next_iss+0x48>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4413      	add	r3, r2
 800ec2a:	4a07      	ldr	r2, [pc, #28]	@ (800ec48 <tcp_next_iss+0x44>)
 800ec2c:	6013      	str	r3, [r2, #0]
  return iss;
 800ec2e:	4b06      	ldr	r3, [pc, #24]	@ (800ec48 <tcp_next_iss+0x44>)
 800ec30:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ec32:	4618      	mov	r0, r3
 800ec34:	3708      	adds	r7, #8
 800ec36:	46bd      	mov	sp, r7
 800ec38:	bd80      	pop	{r7, pc}
 800ec3a:	bf00      	nop
 800ec3c:	08015678 	.word	0x08015678
 800ec40:	08015d94 	.word	0x08015d94
 800ec44:	080156e8 	.word	0x080156e8
 800ec48:	2400002c 	.word	0x2400002c
 800ec4c:	2400847c 	.word	0x2400847c

0800ec50 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b086      	sub	sp, #24
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	4603      	mov	r3, r0
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
 800ec5c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d106      	bne.n	800ec72 <tcp_eff_send_mss_netif+0x22>
 800ec64:	4b14      	ldr	r3, [pc, #80]	@ (800ecb8 <tcp_eff_send_mss_netif+0x68>)
 800ec66:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800ec6a:	4914      	ldr	r1, [pc, #80]	@ (800ecbc <tcp_eff_send_mss_netif+0x6c>)
 800ec6c:	4814      	ldr	r0, [pc, #80]	@ (800ecc0 <tcp_eff_send_mss_netif+0x70>)
 800ec6e:	f004 fc3f 	bl	80134f0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ec72:	68bb      	ldr	r3, [r7, #8]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d101      	bne.n	800ec7c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ec78:	89fb      	ldrh	r3, [r7, #14]
 800ec7a:	e019      	b.n	800ecb0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800ec80:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ec82:	8afb      	ldrh	r3, [r7, #22]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d012      	beq.n	800ecae <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ec88:	2328      	movs	r3, #40	@ 0x28
 800ec8a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ec8c:	8afa      	ldrh	r2, [r7, #22]
 800ec8e:	8abb      	ldrh	r3, [r7, #20]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d904      	bls.n	800ec9e <tcp_eff_send_mss_netif+0x4e>
 800ec94:	8afa      	ldrh	r2, [r7, #22]
 800ec96:	8abb      	ldrh	r3, [r7, #20]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	e000      	b.n	800eca0 <tcp_eff_send_mss_netif+0x50>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800eca2:	8a7a      	ldrh	r2, [r7, #18]
 800eca4:	89fb      	ldrh	r3, [r7, #14]
 800eca6:	4293      	cmp	r3, r2
 800eca8:	bf28      	it	cs
 800ecaa:	4613      	movcs	r3, r2
 800ecac:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ecae:	89fb      	ldrh	r3, [r7, #14]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3718      	adds	r7, #24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd80      	pop	{r7, pc}
 800ecb8:	08015678 	.word	0x08015678
 800ecbc:	08015db0 	.word	0x08015db0
 800ecc0:	080156e8 	.word	0x080156e8

0800ecc4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d119      	bne.n	800ed0c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ecd8:	4b10      	ldr	r3, [pc, #64]	@ (800ed1c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ecda:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ecde:	4910      	ldr	r1, [pc, #64]	@ (800ed20 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ece0:	4810      	ldr	r0, [pc, #64]	@ (800ed24 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ece2:	f004 fc05 	bl	80134f0 <iprintf>

  while (pcb != NULL) {
 800ece6:	e011      	b.n	800ed0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d108      	bne.n	800ed06 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ecfa:	68f8      	ldr	r0, [r7, #12]
 800ecfc:	f7fe ffc4 	bl	800dc88 <tcp_abort>
      pcb = next;
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	60fb      	str	r3, [r7, #12]
 800ed04:	e002      	b.n	800ed0c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d1ea      	bne.n	800ece8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800ed12:	bf00      	nop
 800ed14:	bf00      	nop
 800ed16:	3710      	adds	r7, #16
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}
 800ed1c:	08015678 	.word	0x08015678
 800ed20:	08015dd8 	.word	0x08015dd8
 800ed24:	080156e8 	.word	0x080156e8

0800ed28 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b084      	sub	sp, #16
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d02a      	beq.n	800ed8e <tcp_netif_ip_addr_changed+0x66>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d026      	beq.n	800ed8e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800ed40:	4b15      	ldr	r3, [pc, #84]	@ (800ed98 <tcp_netif_ip_addr_changed+0x70>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4619      	mov	r1, r3
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7ff ffbc 	bl	800ecc4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800ed4c:	4b13      	ldr	r3, [pc, #76]	@ (800ed9c <tcp_netif_ip_addr_changed+0x74>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	4619      	mov	r1, r3
 800ed52:	6878      	ldr	r0, [r7, #4]
 800ed54:	f7ff ffb6 	bl	800ecc4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d017      	beq.n	800ed8e <tcp_netif_ip_addr_changed+0x66>
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d013      	beq.n	800ed8e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed66:	4b0e      	ldr	r3, [pc, #56]	@ (800eda0 <tcp_netif_ip_addr_changed+0x78>)
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	e00c      	b.n	800ed88 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d103      	bne.n	800ed82 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	681a      	ldr	r2, [r3, #0]
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	60fb      	str	r3, [r7, #12]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d1ef      	bne.n	800ed6e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800ed8e:	bf00      	nop
 800ed90:	3710      	adds	r7, #16
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}
 800ed96:	bf00      	nop
 800ed98:	24008488 	.word	0x24008488
 800ed9c:	24008480 	.word	0x24008480
 800eda0:	24008484 	.word	0x24008484

0800eda4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d007      	beq.n	800edc4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800edb8:	4618      	mov	r0, r3
 800edba:	f7ff fc3d 	bl	800e638 <tcp_segs_free>
    pcb->ooseq = NULL;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2200      	movs	r2, #0
 800edc2:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800edc4:	bf00      	nop
 800edc6:	3708      	adds	r7, #8
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}

0800edcc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800edcc:	b590      	push	{r4, r7, lr}
 800edce:	b08d      	sub	sp, #52	@ 0x34
 800edd0:	af04      	add	r7, sp, #16
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d105      	bne.n	800ede8 <tcp_input+0x1c>
 800eddc:	4b9b      	ldr	r3, [pc, #620]	@ (800f04c <tcp_input+0x280>)
 800edde:	2283      	movs	r2, #131	@ 0x83
 800ede0:	499b      	ldr	r1, [pc, #620]	@ (800f050 <tcp_input+0x284>)
 800ede2:	489c      	ldr	r0, [pc, #624]	@ (800f054 <tcp_input+0x288>)
 800ede4:	f004 fb84 	bl	80134f0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	685b      	ldr	r3, [r3, #4]
 800edec:	4a9a      	ldr	r2, [pc, #616]	@ (800f058 <tcp_input+0x28c>)
 800edee:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	895b      	ldrh	r3, [r3, #10]
 800edf4:	2b13      	cmp	r3, #19
 800edf6:	f240 83d1 	bls.w	800f59c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800edfa:	4b98      	ldr	r3, [pc, #608]	@ (800f05c <tcp_input+0x290>)
 800edfc:	695b      	ldr	r3, [r3, #20]
 800edfe:	4a97      	ldr	r2, [pc, #604]	@ (800f05c <tcp_input+0x290>)
 800ee00:	6812      	ldr	r2, [r2, #0]
 800ee02:	4611      	mov	r1, r2
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fb fe91 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	f040 83c7 	bne.w	800f5a0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800ee12:	4b92      	ldr	r3, [pc, #584]	@ (800f05c <tcp_input+0x290>)
 800ee14:	695b      	ldr	r3, [r3, #20]
 800ee16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800ee1a:	2be0      	cmp	r3, #224	@ 0xe0
 800ee1c:	f000 83c0 	beq.w	800f5a0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800ee20:	4b8d      	ldr	r3, [pc, #564]	@ (800f058 <tcp_input+0x28c>)
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	899b      	ldrh	r3, [r3, #12]
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fa f9f3 	bl	8009214 <lwip_htons>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	0b1b      	lsrs	r3, r3, #12
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800ee3a:	7cbb      	ldrb	r3, [r7, #18]
 800ee3c:	2b13      	cmp	r3, #19
 800ee3e:	f240 83b1 	bls.w	800f5a4 <tcp_input+0x7d8>
 800ee42:	7cbb      	ldrb	r3, [r7, #18]
 800ee44:	b29a      	uxth	r2, r3
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	891b      	ldrh	r3, [r3, #8]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	f200 83aa 	bhi.w	800f5a4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800ee50:	7cbb      	ldrb	r3, [r7, #18]
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	3b14      	subs	r3, #20
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	4b81      	ldr	r3, [pc, #516]	@ (800f060 <tcp_input+0x294>)
 800ee5a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800ee5c:	4b81      	ldr	r3, [pc, #516]	@ (800f064 <tcp_input+0x298>)
 800ee5e:	2200      	movs	r2, #0
 800ee60:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	895a      	ldrh	r2, [r3, #10]
 800ee66:	7cbb      	ldrb	r3, [r7, #18]
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	429a      	cmp	r2, r3
 800ee6c:	d309      	bcc.n	800ee82 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800ee6e:	4b7c      	ldr	r3, [pc, #496]	@ (800f060 <tcp_input+0x294>)
 800ee70:	881a      	ldrh	r2, [r3, #0]
 800ee72:	4b7d      	ldr	r3, [pc, #500]	@ (800f068 <tcp_input+0x29c>)
 800ee74:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ee76:	7cbb      	ldrb	r3, [r7, #18]
 800ee78:	4619      	mov	r1, r3
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f7fd fff8 	bl	800ce70 <pbuf_remove_header>
 800ee80:	e04e      	b.n	800ef20 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d105      	bne.n	800ee96 <tcp_input+0xca>
 800ee8a:	4b70      	ldr	r3, [pc, #448]	@ (800f04c <tcp_input+0x280>)
 800ee8c:	22c2      	movs	r2, #194	@ 0xc2
 800ee8e:	4977      	ldr	r1, [pc, #476]	@ (800f06c <tcp_input+0x2a0>)
 800ee90:	4870      	ldr	r0, [pc, #448]	@ (800f054 <tcp_input+0x288>)
 800ee92:	f004 fb2d 	bl	80134f0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ee96:	2114      	movs	r1, #20
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f7fd ffe9 	bl	800ce70 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	895a      	ldrh	r2, [r3, #10]
 800eea2:	4b71      	ldr	r3, [pc, #452]	@ (800f068 <tcp_input+0x29c>)
 800eea4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800eea6:	4b6e      	ldr	r3, [pc, #440]	@ (800f060 <tcp_input+0x294>)
 800eea8:	881a      	ldrh	r2, [r3, #0]
 800eeaa:	4b6f      	ldr	r3, [pc, #444]	@ (800f068 <tcp_input+0x29c>)
 800eeac:	881b      	ldrh	r3, [r3, #0]
 800eeae:	1ad3      	subs	r3, r2, r3
 800eeb0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800eeb2:	4b6d      	ldr	r3, [pc, #436]	@ (800f068 <tcp_input+0x29c>)
 800eeb4:	881b      	ldrh	r3, [r3, #0]
 800eeb6:	4619      	mov	r1, r3
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f7fd ffd9 	bl	800ce70 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	895b      	ldrh	r3, [r3, #10]
 800eec4:	8a3a      	ldrh	r2, [r7, #16]
 800eec6:	429a      	cmp	r2, r3
 800eec8:	f200 836e 	bhi.w	800f5a8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	4a64      	ldr	r2, [pc, #400]	@ (800f064 <tcp_input+0x298>)
 800eed4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	8a3a      	ldrh	r2, [r7, #16]
 800eedc:	4611      	mov	r1, r2
 800eede:	4618      	mov	r0, r3
 800eee0:	f7fd ffc6 	bl	800ce70 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	891a      	ldrh	r2, [r3, #8]
 800eee8:	8a3b      	ldrh	r3, [r7, #16]
 800eeea:	1ad3      	subs	r3, r2, r3
 800eeec:	b29a      	uxth	r2, r3
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	895b      	ldrh	r3, [r3, #10]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d005      	beq.n	800ef06 <tcp_input+0x13a>
 800eefa:	4b54      	ldr	r3, [pc, #336]	@ (800f04c <tcp_input+0x280>)
 800eefc:	22df      	movs	r2, #223	@ 0xdf
 800eefe:	495c      	ldr	r1, [pc, #368]	@ (800f070 <tcp_input+0x2a4>)
 800ef00:	4854      	ldr	r0, [pc, #336]	@ (800f054 <tcp_input+0x288>)
 800ef02:	f004 faf5 	bl	80134f0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	891a      	ldrh	r2, [r3, #8]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	891b      	ldrh	r3, [r3, #8]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d005      	beq.n	800ef20 <tcp_input+0x154>
 800ef14:	4b4d      	ldr	r3, [pc, #308]	@ (800f04c <tcp_input+0x280>)
 800ef16:	22e0      	movs	r2, #224	@ 0xe0
 800ef18:	4956      	ldr	r1, [pc, #344]	@ (800f074 <tcp_input+0x2a8>)
 800ef1a:	484e      	ldr	r0, [pc, #312]	@ (800f054 <tcp_input+0x288>)
 800ef1c:	f004 fae8 	bl	80134f0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800ef20:	4b4d      	ldr	r3, [pc, #308]	@ (800f058 <tcp_input+0x28c>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	881b      	ldrh	r3, [r3, #0]
 800ef26:	b29b      	uxth	r3, r3
 800ef28:	4a4b      	ldr	r2, [pc, #300]	@ (800f058 <tcp_input+0x28c>)
 800ef2a:	6814      	ldr	r4, [r2, #0]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fa f971 	bl	8009214 <lwip_htons>
 800ef32:	4603      	mov	r3, r0
 800ef34:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800ef36:	4b48      	ldr	r3, [pc, #288]	@ (800f058 <tcp_input+0x28c>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	885b      	ldrh	r3, [r3, #2]
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	4a46      	ldr	r2, [pc, #280]	@ (800f058 <tcp_input+0x28c>)
 800ef40:	6814      	ldr	r4, [r2, #0]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7fa f966 	bl	8009214 <lwip_htons>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800ef4c:	4b42      	ldr	r3, [pc, #264]	@ (800f058 <tcp_input+0x28c>)
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	685b      	ldr	r3, [r3, #4]
 800ef52:	4a41      	ldr	r2, [pc, #260]	@ (800f058 <tcp_input+0x28c>)
 800ef54:	6814      	ldr	r4, [r2, #0]
 800ef56:	4618      	mov	r0, r3
 800ef58:	f7fa f971 	bl	800923e <lwip_htonl>
 800ef5c:	4603      	mov	r3, r0
 800ef5e:	6063      	str	r3, [r4, #4]
 800ef60:	6863      	ldr	r3, [r4, #4]
 800ef62:	4a45      	ldr	r2, [pc, #276]	@ (800f078 <tcp_input+0x2ac>)
 800ef64:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800ef66:	4b3c      	ldr	r3, [pc, #240]	@ (800f058 <tcp_input+0x28c>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	689b      	ldr	r3, [r3, #8]
 800ef6c:	4a3a      	ldr	r2, [pc, #232]	@ (800f058 <tcp_input+0x28c>)
 800ef6e:	6814      	ldr	r4, [r2, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7fa f964 	bl	800923e <lwip_htonl>
 800ef76:	4603      	mov	r3, r0
 800ef78:	60a3      	str	r3, [r4, #8]
 800ef7a:	68a3      	ldr	r3, [r4, #8]
 800ef7c:	4a3f      	ldr	r2, [pc, #252]	@ (800f07c <tcp_input+0x2b0>)
 800ef7e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800ef80:	4b35      	ldr	r3, [pc, #212]	@ (800f058 <tcp_input+0x28c>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	89db      	ldrh	r3, [r3, #14]
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	4a33      	ldr	r2, [pc, #204]	@ (800f058 <tcp_input+0x28c>)
 800ef8a:	6814      	ldr	r4, [r2, #0]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fa f941 	bl	8009214 <lwip_htons>
 800ef92:	4603      	mov	r3, r0
 800ef94:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800ef96:	4b30      	ldr	r3, [pc, #192]	@ (800f058 <tcp_input+0x28c>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	899b      	ldrh	r3, [r3, #12]
 800ef9c:	b29b      	uxth	r3, r3
 800ef9e:	4618      	mov	r0, r3
 800efa0:	f7fa f938 	bl	8009214 <lwip_htons>
 800efa4:	4603      	mov	r3, r0
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800efac:	b2da      	uxtb	r2, r3
 800efae:	4b34      	ldr	r3, [pc, #208]	@ (800f080 <tcp_input+0x2b4>)
 800efb0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	891a      	ldrh	r2, [r3, #8]
 800efb6:	4b33      	ldr	r3, [pc, #204]	@ (800f084 <tcp_input+0x2b8>)
 800efb8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800efba:	4b31      	ldr	r3, [pc, #196]	@ (800f080 <tcp_input+0x2b4>)
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	f003 0303 	and.w	r3, r3, #3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00c      	beq.n	800efe0 <tcp_input+0x214>
    tcplen++;
 800efc6:	4b2f      	ldr	r3, [pc, #188]	@ (800f084 <tcp_input+0x2b8>)
 800efc8:	881b      	ldrh	r3, [r3, #0]
 800efca:	3301      	adds	r3, #1
 800efcc:	b29a      	uxth	r2, r3
 800efce:	4b2d      	ldr	r3, [pc, #180]	@ (800f084 <tcp_input+0x2b8>)
 800efd0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	891a      	ldrh	r2, [r3, #8]
 800efd6:	4b2b      	ldr	r3, [pc, #172]	@ (800f084 <tcp_input+0x2b8>)
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	f200 82e6 	bhi.w	800f5ac <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800efe0:	2300      	movs	r3, #0
 800efe2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe4:	4b28      	ldr	r3, [pc, #160]	@ (800f088 <tcp_input+0x2bc>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	61fb      	str	r3, [r7, #28]
 800efea:	e09d      	b.n	800f128 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800efec:	69fb      	ldr	r3, [r7, #28]
 800efee:	7d1b      	ldrb	r3, [r3, #20]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d105      	bne.n	800f000 <tcp_input+0x234>
 800eff4:	4b15      	ldr	r3, [pc, #84]	@ (800f04c <tcp_input+0x280>)
 800eff6:	22fb      	movs	r2, #251	@ 0xfb
 800eff8:	4924      	ldr	r1, [pc, #144]	@ (800f08c <tcp_input+0x2c0>)
 800effa:	4816      	ldr	r0, [pc, #88]	@ (800f054 <tcp_input+0x288>)
 800effc:	f004 fa78 	bl	80134f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f000:	69fb      	ldr	r3, [r7, #28]
 800f002:	7d1b      	ldrb	r3, [r3, #20]
 800f004:	2b0a      	cmp	r3, #10
 800f006:	d105      	bne.n	800f014 <tcp_input+0x248>
 800f008:	4b10      	ldr	r3, [pc, #64]	@ (800f04c <tcp_input+0x280>)
 800f00a:	22fc      	movs	r2, #252	@ 0xfc
 800f00c:	4920      	ldr	r1, [pc, #128]	@ (800f090 <tcp_input+0x2c4>)
 800f00e:	4811      	ldr	r0, [pc, #68]	@ (800f054 <tcp_input+0x288>)
 800f010:	f004 fa6e 	bl	80134f0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	7d1b      	ldrb	r3, [r3, #20]
 800f018:	2b01      	cmp	r3, #1
 800f01a:	d105      	bne.n	800f028 <tcp_input+0x25c>
 800f01c:	4b0b      	ldr	r3, [pc, #44]	@ (800f04c <tcp_input+0x280>)
 800f01e:	22fd      	movs	r2, #253	@ 0xfd
 800f020:	491c      	ldr	r1, [pc, #112]	@ (800f094 <tcp_input+0x2c8>)
 800f022:	480c      	ldr	r0, [pc, #48]	@ (800f054 <tcp_input+0x288>)
 800f024:	f004 fa64 	bl	80134f0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f028:	69fb      	ldr	r3, [r7, #28]
 800f02a:	7a1b      	ldrb	r3, [r3, #8]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d033      	beq.n	800f098 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f030:	69fb      	ldr	r3, [r7, #28]
 800f032:	7a1a      	ldrb	r2, [r3, #8]
 800f034:	4b09      	ldr	r3, [pc, #36]	@ (800f05c <tcp_input+0x290>)
 800f036:	685b      	ldr	r3, [r3, #4]
 800f038:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f03c:	3301      	adds	r3, #1
 800f03e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f040:	429a      	cmp	r2, r3
 800f042:	d029      	beq.n	800f098 <tcp_input+0x2cc>
      prev = pcb;
 800f044:	69fb      	ldr	r3, [r7, #28]
 800f046:	61bb      	str	r3, [r7, #24]
      continue;
 800f048:	e06b      	b.n	800f122 <tcp_input+0x356>
 800f04a:	bf00      	nop
 800f04c:	08015e0c 	.word	0x08015e0c
 800f050:	08015e68 	.word	0x08015e68
 800f054:	08015e80 	.word	0x08015e80
 800f058:	240084a4 	.word	0x240084a4
 800f05c:	24005368 	.word	0x24005368
 800f060:	240084a8 	.word	0x240084a8
 800f064:	240084ac 	.word	0x240084ac
 800f068:	240084aa 	.word	0x240084aa
 800f06c:	08015ea8 	.word	0x08015ea8
 800f070:	08015eb8 	.word	0x08015eb8
 800f074:	08015ec4 	.word	0x08015ec4
 800f078:	240084b4 	.word	0x240084b4
 800f07c:	240084b8 	.word	0x240084b8
 800f080:	240084c0 	.word	0x240084c0
 800f084:	240084be 	.word	0x240084be
 800f088:	24008488 	.word	0x24008488
 800f08c:	08015ee4 	.word	0x08015ee4
 800f090:	08015f0c 	.word	0x08015f0c
 800f094:	08015f38 	.word	0x08015f38
    }

    if (pcb->remote_port == tcphdr->src &&
 800f098:	69fb      	ldr	r3, [r7, #28]
 800f09a:	8b1a      	ldrh	r2, [r3, #24]
 800f09c:	4b72      	ldr	r3, [pc, #456]	@ (800f268 <tcp_input+0x49c>)
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d13a      	bne.n	800f11e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f0a8:	69fb      	ldr	r3, [r7, #28]
 800f0aa:	8ada      	ldrh	r2, [r3, #22]
 800f0ac:	4b6e      	ldr	r3, [pc, #440]	@ (800f268 <tcp_input+0x49c>)
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	885b      	ldrh	r3, [r3, #2]
 800f0b2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d132      	bne.n	800f11e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f0b8:	69fb      	ldr	r3, [r7, #28]
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	4b6b      	ldr	r3, [pc, #428]	@ (800f26c <tcp_input+0x4a0>)
 800f0be:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d12c      	bne.n	800f11e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f0c4:	69fb      	ldr	r3, [r7, #28]
 800f0c6:	681a      	ldr	r2, [r3, #0]
 800f0c8:	4b68      	ldr	r3, [pc, #416]	@ (800f26c <tcp_input+0x4a0>)
 800f0ca:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f0cc:	429a      	cmp	r2, r3
 800f0ce:	d126      	bne.n	800f11e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	68db      	ldr	r3, [r3, #12]
 800f0d4:	69fa      	ldr	r2, [r7, #28]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d106      	bne.n	800f0e8 <tcp_input+0x31c>
 800f0da:	4b65      	ldr	r3, [pc, #404]	@ (800f270 <tcp_input+0x4a4>)
 800f0dc:	f240 120d 	movw	r2, #269	@ 0x10d
 800f0e0:	4964      	ldr	r1, [pc, #400]	@ (800f274 <tcp_input+0x4a8>)
 800f0e2:	4865      	ldr	r0, [pc, #404]	@ (800f278 <tcp_input+0x4ac>)
 800f0e4:	f004 fa04 	bl	80134f0 <iprintf>
      if (prev != NULL) {
 800f0e8:	69bb      	ldr	r3, [r7, #24]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00a      	beq.n	800f104 <tcp_input+0x338>
        prev->next = pcb->next;
 800f0ee:	69fb      	ldr	r3, [r7, #28]
 800f0f0:	68da      	ldr	r2, [r3, #12]
 800f0f2:	69bb      	ldr	r3, [r7, #24]
 800f0f4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f0f6:	4b61      	ldr	r3, [pc, #388]	@ (800f27c <tcp_input+0x4b0>)
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	69fb      	ldr	r3, [r7, #28]
 800f0fc:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f0fe:	4a5f      	ldr	r2, [pc, #380]	@ (800f27c <tcp_input+0x4b0>)
 800f100:	69fb      	ldr	r3, [r7, #28]
 800f102:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f104:	69fb      	ldr	r3, [r7, #28]
 800f106:	68db      	ldr	r3, [r3, #12]
 800f108:	69fa      	ldr	r2, [r7, #28]
 800f10a:	429a      	cmp	r2, r3
 800f10c:	d111      	bne.n	800f132 <tcp_input+0x366>
 800f10e:	4b58      	ldr	r3, [pc, #352]	@ (800f270 <tcp_input+0x4a4>)
 800f110:	f240 1215 	movw	r2, #277	@ 0x115
 800f114:	495a      	ldr	r1, [pc, #360]	@ (800f280 <tcp_input+0x4b4>)
 800f116:	4858      	ldr	r0, [pc, #352]	@ (800f278 <tcp_input+0x4ac>)
 800f118:	f004 f9ea 	bl	80134f0 <iprintf>
      break;
 800f11c:	e009      	b.n	800f132 <tcp_input+0x366>
    }
    prev = pcb;
 800f11e:	69fb      	ldr	r3, [r7, #28]
 800f120:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f122:	69fb      	ldr	r3, [r7, #28]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	61fb      	str	r3, [r7, #28]
 800f128:	69fb      	ldr	r3, [r7, #28]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	f47f af5e 	bne.w	800efec <tcp_input+0x220>
 800f130:	e000      	b.n	800f134 <tcp_input+0x368>
      break;
 800f132:	bf00      	nop
  }

  if (pcb == NULL) {
 800f134:	69fb      	ldr	r3, [r7, #28]
 800f136:	2b00      	cmp	r3, #0
 800f138:	f040 80aa 	bne.w	800f290 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f13c:	4b51      	ldr	r3, [pc, #324]	@ (800f284 <tcp_input+0x4b8>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	61fb      	str	r3, [r7, #28]
 800f142:	e03f      	b.n	800f1c4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f144:	69fb      	ldr	r3, [r7, #28]
 800f146:	7d1b      	ldrb	r3, [r3, #20]
 800f148:	2b0a      	cmp	r3, #10
 800f14a:	d006      	beq.n	800f15a <tcp_input+0x38e>
 800f14c:	4b48      	ldr	r3, [pc, #288]	@ (800f270 <tcp_input+0x4a4>)
 800f14e:	f240 121f 	movw	r2, #287	@ 0x11f
 800f152:	494d      	ldr	r1, [pc, #308]	@ (800f288 <tcp_input+0x4bc>)
 800f154:	4848      	ldr	r0, [pc, #288]	@ (800f278 <tcp_input+0x4ac>)
 800f156:	f004 f9cb 	bl	80134f0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f15a:	69fb      	ldr	r3, [r7, #28]
 800f15c:	7a1b      	ldrb	r3, [r3, #8]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d009      	beq.n	800f176 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f162:	69fb      	ldr	r3, [r7, #28]
 800f164:	7a1a      	ldrb	r2, [r3, #8]
 800f166:	4b41      	ldr	r3, [pc, #260]	@ (800f26c <tcp_input+0x4a0>)
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f16e:	3301      	adds	r3, #1
 800f170:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f172:	429a      	cmp	r2, r3
 800f174:	d122      	bne.n	800f1bc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f176:	69fb      	ldr	r3, [r7, #28]
 800f178:	8b1a      	ldrh	r2, [r3, #24]
 800f17a:	4b3b      	ldr	r3, [pc, #236]	@ (800f268 <tcp_input+0x49c>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	881b      	ldrh	r3, [r3, #0]
 800f180:	b29b      	uxth	r3, r3
 800f182:	429a      	cmp	r2, r3
 800f184:	d11b      	bne.n	800f1be <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f186:	69fb      	ldr	r3, [r7, #28]
 800f188:	8ada      	ldrh	r2, [r3, #22]
 800f18a:	4b37      	ldr	r3, [pc, #220]	@ (800f268 <tcp_input+0x49c>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	885b      	ldrh	r3, [r3, #2]
 800f190:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f192:	429a      	cmp	r2, r3
 800f194:	d113      	bne.n	800f1be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	685a      	ldr	r2, [r3, #4]
 800f19a:	4b34      	ldr	r3, [pc, #208]	@ (800f26c <tcp_input+0x4a0>)
 800f19c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f19e:	429a      	cmp	r2, r3
 800f1a0:	d10d      	bne.n	800f1be <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	681a      	ldr	r2, [r3, #0]
 800f1a6:	4b31      	ldr	r3, [pc, #196]	@ (800f26c <tcp_input+0x4a0>)
 800f1a8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d107      	bne.n	800f1be <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f1ae:	69f8      	ldr	r0, [r7, #28]
 800f1b0:	f000 fb56 	bl	800f860 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f7fd fee1 	bl	800cf7c <pbuf_free>
        return;
 800f1ba:	e1fd      	b.n	800f5b8 <tcp_input+0x7ec>
        continue;
 800f1bc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	68db      	ldr	r3, [r3, #12]
 800f1c2:	61fb      	str	r3, [r7, #28]
 800f1c4:	69fb      	ldr	r3, [r7, #28]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1bc      	bne.n	800f144 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f1ce:	4b2f      	ldr	r3, [pc, #188]	@ (800f28c <tcp_input+0x4c0>)
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	617b      	str	r3, [r7, #20]
 800f1d4:	e02a      	b.n	800f22c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	7a1b      	ldrb	r3, [r3, #8]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00c      	beq.n	800f1f8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f1de:	697b      	ldr	r3, [r7, #20]
 800f1e0:	7a1a      	ldrb	r2, [r3, #8]
 800f1e2:	4b22      	ldr	r3, [pc, #136]	@ (800f26c <tcp_input+0x4a0>)
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d002      	beq.n	800f1f8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	61bb      	str	r3, [r7, #24]
        continue;
 800f1f6:	e016      	b.n	800f226 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	8ada      	ldrh	r2, [r3, #22]
 800f1fc:	4b1a      	ldr	r3, [pc, #104]	@ (800f268 <tcp_input+0x49c>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	885b      	ldrh	r3, [r3, #2]
 800f202:	b29b      	uxth	r3, r3
 800f204:	429a      	cmp	r2, r3
 800f206:	d10c      	bne.n	800f222 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	4b17      	ldr	r3, [pc, #92]	@ (800f26c <tcp_input+0x4a0>)
 800f20e:	695b      	ldr	r3, [r3, #20]
 800f210:	429a      	cmp	r2, r3
 800f212:	d00f      	beq.n	800f234 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f214:	697b      	ldr	r3, [r7, #20]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d00d      	beq.n	800f236 <tcp_input+0x46a>
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d009      	beq.n	800f236 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f222:	697b      	ldr	r3, [r7, #20]
 800f224:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	68db      	ldr	r3, [r3, #12]
 800f22a:	617b      	str	r3, [r7, #20]
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d1d1      	bne.n	800f1d6 <tcp_input+0x40a>
 800f232:	e000      	b.n	800f236 <tcp_input+0x46a>
            break;
 800f234:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d029      	beq.n	800f290 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d00a      	beq.n	800f258 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f242:	697b      	ldr	r3, [r7, #20]
 800f244:	68da      	ldr	r2, [r3, #12]
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f24a:	4b10      	ldr	r3, [pc, #64]	@ (800f28c <tcp_input+0x4c0>)
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f252:	4a0e      	ldr	r2, [pc, #56]	@ (800f28c <tcp_input+0x4c0>)
 800f254:	697b      	ldr	r3, [r7, #20]
 800f256:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f258:	6978      	ldr	r0, [r7, #20]
 800f25a:	f000 fa03 	bl	800f664 <tcp_listen_input>
      }
      pbuf_free(p);
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7fd fe8c 	bl	800cf7c <pbuf_free>
      return;
 800f264:	e1a8      	b.n	800f5b8 <tcp_input+0x7ec>
 800f266:	bf00      	nop
 800f268:	240084a4 	.word	0x240084a4
 800f26c:	24005368 	.word	0x24005368
 800f270:	08015e0c 	.word	0x08015e0c
 800f274:	08015f60 	.word	0x08015f60
 800f278:	08015e80 	.word	0x08015e80
 800f27c:	24008488 	.word	0x24008488
 800f280:	08015f8c 	.word	0x08015f8c
 800f284:	2400848c 	.word	0x2400848c
 800f288:	08015fb8 	.word	0x08015fb8
 800f28c:	24008484 	.word	0x24008484
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f290:	69fb      	ldr	r3, [r7, #28]
 800f292:	2b00      	cmp	r3, #0
 800f294:	f000 8158 	beq.w	800f548 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f298:	4b95      	ldr	r3, [pc, #596]	@ (800f4f0 <tcp_input+0x724>)
 800f29a:	2200      	movs	r2, #0
 800f29c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	891a      	ldrh	r2, [r3, #8]
 800f2a2:	4b93      	ldr	r3, [pc, #588]	@ (800f4f0 <tcp_input+0x724>)
 800f2a4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f2a6:	4a92      	ldr	r2, [pc, #584]	@ (800f4f0 <tcp_input+0x724>)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f2ac:	4b91      	ldr	r3, [pc, #580]	@ (800f4f4 <tcp_input+0x728>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	4a8f      	ldr	r2, [pc, #572]	@ (800f4f0 <tcp_input+0x724>)
 800f2b2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f2b4:	4b90      	ldr	r3, [pc, #576]	@ (800f4f8 <tcp_input+0x72c>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f2ba:	4b90      	ldr	r3, [pc, #576]	@ (800f4fc <tcp_input+0x730>)
 800f2bc:	2200      	movs	r2, #0
 800f2be:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f2c0:	4b8f      	ldr	r3, [pc, #572]	@ (800f500 <tcp_input+0x734>)
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f2c6:	4b8f      	ldr	r3, [pc, #572]	@ (800f504 <tcp_input+0x738>)
 800f2c8:	781b      	ldrb	r3, [r3, #0]
 800f2ca:	f003 0308 	and.w	r3, r3, #8
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d006      	beq.n	800f2e0 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	7b5b      	ldrb	r3, [r3, #13]
 800f2d6:	f043 0301 	orr.w	r3, r3, #1
 800f2da:	b2da      	uxtb	r2, r3
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d017      	beq.n	800f318 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f2e8:	69f8      	ldr	r0, [r7, #28]
 800f2ea:	f7ff f929 	bl	800e540 <tcp_process_refused_data>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	f113 0f0d 	cmn.w	r3, #13
 800f2f4:	d007      	beq.n	800f306 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f2f6:	69fb      	ldr	r3, [r7, #28]
 800f2f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d00c      	beq.n	800f318 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f2fe:	4b82      	ldr	r3, [pc, #520]	@ (800f508 <tcp_input+0x73c>)
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d008      	beq.n	800f318 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f306:	69fb      	ldr	r3, [r7, #28]
 800f308:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	f040 80e3 	bne.w	800f4d6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f310:	69f8      	ldr	r0, [r7, #28]
 800f312:	f003 f9a7 	bl	8012664 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f316:	e0de      	b.n	800f4d6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800f318:	4a7c      	ldr	r2, [pc, #496]	@ (800f50c <tcp_input+0x740>)
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f31e:	69f8      	ldr	r0, [r7, #28]
 800f320:	f000 fb18 	bl	800f954 <tcp_process>
 800f324:	4603      	mov	r3, r0
 800f326:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f328:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f32c:	f113 0f0d 	cmn.w	r3, #13
 800f330:	f000 80d3 	beq.w	800f4da <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800f334:	4b71      	ldr	r3, [pc, #452]	@ (800f4fc <tcp_input+0x730>)
 800f336:	781b      	ldrb	r3, [r3, #0]
 800f338:	f003 0308 	and.w	r3, r3, #8
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d015      	beq.n	800f36c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f340:	69fb      	ldr	r3, [r7, #28]
 800f342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f346:	2b00      	cmp	r3, #0
 800f348:	d008      	beq.n	800f35c <tcp_input+0x590>
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f350:	69fa      	ldr	r2, [r7, #28]
 800f352:	6912      	ldr	r2, [r2, #16]
 800f354:	f06f 010d 	mvn.w	r1, #13
 800f358:	4610      	mov	r0, r2
 800f35a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f35c:	69f9      	ldr	r1, [r7, #28]
 800f35e:	486c      	ldr	r0, [pc, #432]	@ (800f510 <tcp_input+0x744>)
 800f360:	f7ff fbbc 	bl	800eadc <tcp_pcb_remove>
        tcp_free(pcb);
 800f364:	69f8      	ldr	r0, [r7, #28]
 800f366:	f7fe f9a7 	bl	800d6b8 <tcp_free>
 800f36a:	e0da      	b.n	800f522 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800f36c:	2300      	movs	r3, #0
 800f36e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f370:	4b63      	ldr	r3, [pc, #396]	@ (800f500 <tcp_input+0x734>)
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d01d      	beq.n	800f3b4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f378:	4b61      	ldr	r3, [pc, #388]	@ (800f500 <tcp_input+0x734>)
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f37e:	69fb      	ldr	r3, [r7, #28]
 800f380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f384:	2b00      	cmp	r3, #0
 800f386:	d00a      	beq.n	800f39e <tcp_input+0x5d2>
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800f38e:	69fa      	ldr	r2, [r7, #28]
 800f390:	6910      	ldr	r0, [r2, #16]
 800f392:	89fa      	ldrh	r2, [r7, #14]
 800f394:	69f9      	ldr	r1, [r7, #28]
 800f396:	4798      	blx	r3
 800f398:	4603      	mov	r3, r0
 800f39a:	74fb      	strb	r3, [r7, #19]
 800f39c:	e001      	b.n	800f3a2 <tcp_input+0x5d6>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f3a2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f3a6:	f113 0f0d 	cmn.w	r3, #13
 800f3aa:	f000 8098 	beq.w	800f4de <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f3ae:	4b54      	ldr	r3, [pc, #336]	@ (800f500 <tcp_input+0x734>)
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f3b4:	69f8      	ldr	r0, [r7, #28]
 800f3b6:	f000 f915 	bl	800f5e4 <tcp_input_delayed_close>
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f040 8090 	bne.w	800f4e2 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f3c2:	4b4d      	ldr	r3, [pc, #308]	@ (800f4f8 <tcp_input+0x72c>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d041      	beq.n	800f44e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d006      	beq.n	800f3e0 <tcp_input+0x614>
 800f3d2:	4b50      	ldr	r3, [pc, #320]	@ (800f514 <tcp_input+0x748>)
 800f3d4:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800f3d8:	494f      	ldr	r1, [pc, #316]	@ (800f518 <tcp_input+0x74c>)
 800f3da:	4850      	ldr	r0, [pc, #320]	@ (800f51c <tcp_input+0x750>)
 800f3dc:	f004 f888 	bl	80134f0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	8b5b      	ldrh	r3, [r3, #26]
 800f3e4:	f003 0310 	and.w	r3, r3, #16
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d008      	beq.n	800f3fe <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f3ec:	4b42      	ldr	r3, [pc, #264]	@ (800f4f8 <tcp_input+0x72c>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7fd fdc3 	bl	800cf7c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f3f6:	69f8      	ldr	r0, [r7, #28]
 800f3f8:	f7fe fc46 	bl	800dc88 <tcp_abort>
            goto aborted;
 800f3fc:	e091      	b.n	800f522 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00c      	beq.n	800f422 <tcp_input+0x656>
 800f408:	69fb      	ldr	r3, [r7, #28]
 800f40a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f40e:	69fb      	ldr	r3, [r7, #28]
 800f410:	6918      	ldr	r0, [r3, #16]
 800f412:	4b39      	ldr	r3, [pc, #228]	@ (800f4f8 <tcp_input+0x72c>)
 800f414:	681a      	ldr	r2, [r3, #0]
 800f416:	2300      	movs	r3, #0
 800f418:	69f9      	ldr	r1, [r7, #28]
 800f41a:	47a0      	blx	r4
 800f41c:	4603      	mov	r3, r0
 800f41e:	74fb      	strb	r3, [r7, #19]
 800f420:	e008      	b.n	800f434 <tcp_input+0x668>
 800f422:	4b35      	ldr	r3, [pc, #212]	@ (800f4f8 <tcp_input+0x72c>)
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	2300      	movs	r3, #0
 800f428:	69f9      	ldr	r1, [r7, #28]
 800f42a:	2000      	movs	r0, #0
 800f42c:	f7ff f95e 	bl	800e6ec <tcp_recv_null>
 800f430:	4603      	mov	r3, r0
 800f432:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f434:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f438:	f113 0f0d 	cmn.w	r3, #13
 800f43c:	d053      	beq.n	800f4e6 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f43e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d003      	beq.n	800f44e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f446:	4b2c      	ldr	r3, [pc, #176]	@ (800f4f8 <tcp_input+0x72c>)
 800f448:	681a      	ldr	r2, [r3, #0]
 800f44a:	69fb      	ldr	r3, [r7, #28]
 800f44c:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f44e:	4b2b      	ldr	r3, [pc, #172]	@ (800f4fc <tcp_input+0x730>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	f003 0320 	and.w	r3, r3, #32
 800f456:	2b00      	cmp	r3, #0
 800f458:	d030      	beq.n	800f4bc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800f45a:	69fb      	ldr	r3, [r7, #28]
 800f45c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d009      	beq.n	800f476 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f466:	7b5a      	ldrb	r2, [r3, #13]
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f46c:	f042 0220 	orr.w	r2, r2, #32
 800f470:	b2d2      	uxtb	r2, r2
 800f472:	735a      	strb	r2, [r3, #13]
 800f474:	e022      	b.n	800f4bc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f476:	69fb      	ldr	r3, [r7, #28]
 800f478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f47a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800f47e:	d005      	beq.n	800f48c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800f480:	69fb      	ldr	r3, [r7, #28]
 800f482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f484:	3301      	adds	r3, #1
 800f486:	b29a      	uxth	r2, r3
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f492:	2b00      	cmp	r3, #0
 800f494:	d00b      	beq.n	800f4ae <tcp_input+0x6e2>
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	6918      	ldr	r0, [r3, #16]
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	69f9      	ldr	r1, [r7, #28]
 800f4a6:	47a0      	blx	r4
 800f4a8:	4603      	mov	r3, r0
 800f4aa:	74fb      	strb	r3, [r7, #19]
 800f4ac:	e001      	b.n	800f4b2 <tcp_input+0x6e6>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f4b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f4b6:	f113 0f0d 	cmn.w	r3, #13
 800f4ba:	d016      	beq.n	800f4ea <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f4bc:	4b13      	ldr	r3, [pc, #76]	@ (800f50c <tcp_input+0x740>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f4c2:	69f8      	ldr	r0, [r7, #28]
 800f4c4:	f000 f88e 	bl	800f5e4 <tcp_input_delayed_close>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d128      	bne.n	800f520 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f4ce:	69f8      	ldr	r0, [r7, #28]
 800f4d0:	f002 fac2 	bl	8011a58 <tcp_output>
 800f4d4:	e025      	b.n	800f522 <tcp_input+0x756>
        goto aborted;
 800f4d6:	bf00      	nop
 800f4d8:	e023      	b.n	800f522 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f4da:	bf00      	nop
 800f4dc:	e021      	b.n	800f522 <tcp_input+0x756>
              goto aborted;
 800f4de:	bf00      	nop
 800f4e0:	e01f      	b.n	800f522 <tcp_input+0x756>
          goto aborted;
 800f4e2:	bf00      	nop
 800f4e4:	e01d      	b.n	800f522 <tcp_input+0x756>
            goto aborted;
 800f4e6:	bf00      	nop
 800f4e8:	e01b      	b.n	800f522 <tcp_input+0x756>
              goto aborted;
 800f4ea:	bf00      	nop
 800f4ec:	e019      	b.n	800f522 <tcp_input+0x756>
 800f4ee:	bf00      	nop
 800f4f0:	24008494 	.word	0x24008494
 800f4f4:	240084a4 	.word	0x240084a4
 800f4f8:	240084c4 	.word	0x240084c4
 800f4fc:	240084c1 	.word	0x240084c1
 800f500:	240084bc 	.word	0x240084bc
 800f504:	240084c0 	.word	0x240084c0
 800f508:	240084be 	.word	0x240084be
 800f50c:	240084c8 	.word	0x240084c8
 800f510:	24008488 	.word	0x24008488
 800f514:	08015e0c 	.word	0x08015e0c
 800f518:	08015fe8 	.word	0x08015fe8
 800f51c:	08015e80 	.word	0x08015e80
          goto aborted;
 800f520:	bf00      	nop
    tcp_input_pcb = NULL;
 800f522:	4b27      	ldr	r3, [pc, #156]	@ (800f5c0 <tcp_input+0x7f4>)
 800f524:	2200      	movs	r2, #0
 800f526:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f528:	4b26      	ldr	r3, [pc, #152]	@ (800f5c4 <tcp_input+0x7f8>)
 800f52a:	2200      	movs	r2, #0
 800f52c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800f52e:	4b26      	ldr	r3, [pc, #152]	@ (800f5c8 <tcp_input+0x7fc>)
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d03f      	beq.n	800f5b6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800f536:	4b24      	ldr	r3, [pc, #144]	@ (800f5c8 <tcp_input+0x7fc>)
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7fd fd1e 	bl	800cf7c <pbuf_free>
      inseg.p = NULL;
 800f540:	4b21      	ldr	r3, [pc, #132]	@ (800f5c8 <tcp_input+0x7fc>)
 800f542:	2200      	movs	r2, #0
 800f544:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f546:	e036      	b.n	800f5b6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f548:	4b20      	ldr	r3, [pc, #128]	@ (800f5cc <tcp_input+0x800>)
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	899b      	ldrh	r3, [r3, #12]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	4618      	mov	r0, r3
 800f552:	f7f9 fe5f 	bl	8009214 <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	f003 0304 	and.w	r3, r3, #4
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d118      	bne.n	800f594 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f562:	4b1b      	ldr	r3, [pc, #108]	@ (800f5d0 <tcp_input+0x804>)
 800f564:	6819      	ldr	r1, [r3, #0]
 800f566:	4b1b      	ldr	r3, [pc, #108]	@ (800f5d4 <tcp_input+0x808>)
 800f568:	881b      	ldrh	r3, [r3, #0]
 800f56a:	461a      	mov	r2, r3
 800f56c:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d8 <tcp_input+0x80c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f572:	4b16      	ldr	r3, [pc, #88]	@ (800f5cc <tcp_input+0x800>)
 800f574:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f576:	885b      	ldrh	r3, [r3, #2]
 800f578:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f57a:	4a14      	ldr	r2, [pc, #80]	@ (800f5cc <tcp_input+0x800>)
 800f57c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f57e:	8812      	ldrh	r2, [r2, #0]
 800f580:	b292      	uxth	r2, r2
 800f582:	9202      	str	r2, [sp, #8]
 800f584:	9301      	str	r3, [sp, #4]
 800f586:	4b15      	ldr	r3, [pc, #84]	@ (800f5dc <tcp_input+0x810>)
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	4b15      	ldr	r3, [pc, #84]	@ (800f5e0 <tcp_input+0x814>)
 800f58c:	4602      	mov	r2, r0
 800f58e:	2000      	movs	r0, #0
 800f590:	f003 f816 	bl	80125c0 <tcp_rst>
    pbuf_free(p);
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f7fd fcf1 	bl	800cf7c <pbuf_free>
  return;
 800f59a:	e00c      	b.n	800f5b6 <tcp_input+0x7ea>
    goto dropped;
 800f59c:	bf00      	nop
 800f59e:	e006      	b.n	800f5ae <tcp_input+0x7e2>
    goto dropped;
 800f5a0:	bf00      	nop
 800f5a2:	e004      	b.n	800f5ae <tcp_input+0x7e2>
    goto dropped;
 800f5a4:	bf00      	nop
 800f5a6:	e002      	b.n	800f5ae <tcp_input+0x7e2>
      goto dropped;
 800f5a8:	bf00      	nop
 800f5aa:	e000      	b.n	800f5ae <tcp_input+0x7e2>
      goto dropped;
 800f5ac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7fd fce4 	bl	800cf7c <pbuf_free>
 800f5b4:	e000      	b.n	800f5b8 <tcp_input+0x7ec>
  return;
 800f5b6:	bf00      	nop
}
 800f5b8:	3724      	adds	r7, #36	@ 0x24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd90      	pop	{r4, r7, pc}
 800f5be:	bf00      	nop
 800f5c0:	240084c8 	.word	0x240084c8
 800f5c4:	240084c4 	.word	0x240084c4
 800f5c8:	24008494 	.word	0x24008494
 800f5cc:	240084a4 	.word	0x240084a4
 800f5d0:	240084b8 	.word	0x240084b8
 800f5d4:	240084be 	.word	0x240084be
 800f5d8:	240084b4 	.word	0x240084b4
 800f5dc:	24005378 	.word	0x24005378
 800f5e0:	2400537c 	.word	0x2400537c

0800f5e4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	b082      	sub	sp, #8
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d106      	bne.n	800f600 <tcp_input_delayed_close+0x1c>
 800f5f2:	4b17      	ldr	r3, [pc, #92]	@ (800f650 <tcp_input_delayed_close+0x6c>)
 800f5f4:	f240 225a 	movw	r2, #602	@ 0x25a
 800f5f8:	4916      	ldr	r1, [pc, #88]	@ (800f654 <tcp_input_delayed_close+0x70>)
 800f5fa:	4817      	ldr	r0, [pc, #92]	@ (800f658 <tcp_input_delayed_close+0x74>)
 800f5fc:	f003 ff78 	bl	80134f0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800f600:	4b16      	ldr	r3, [pc, #88]	@ (800f65c <tcp_input_delayed_close+0x78>)
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	f003 0310 	and.w	r3, r3, #16
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01c      	beq.n	800f646 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	8b5b      	ldrh	r3, [r3, #26]
 800f610:	f003 0310 	and.w	r3, r3, #16
 800f614:	2b00      	cmp	r3, #0
 800f616:	d10d      	bne.n	800f634 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d008      	beq.n	800f634 <tcp_input_delayed_close+0x50>
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f628:	687a      	ldr	r2, [r7, #4]
 800f62a:	6912      	ldr	r2, [r2, #16]
 800f62c:	f06f 010e 	mvn.w	r1, #14
 800f630:	4610      	mov	r0, r2
 800f632:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f634:	6879      	ldr	r1, [r7, #4]
 800f636:	480a      	ldr	r0, [pc, #40]	@ (800f660 <tcp_input_delayed_close+0x7c>)
 800f638:	f7ff fa50 	bl	800eadc <tcp_pcb_remove>
    tcp_free(pcb);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7fe f83b 	bl	800d6b8 <tcp_free>
    return 1;
 800f642:	2301      	movs	r3, #1
 800f644:	e000      	b.n	800f648 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800f646:	2300      	movs	r3, #0
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3708      	adds	r7, #8
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bd80      	pop	{r7, pc}
 800f650:	08015e0c 	.word	0x08015e0c
 800f654:	08016004 	.word	0x08016004
 800f658:	08015e80 	.word	0x08015e80
 800f65c:	240084c1 	.word	0x240084c1
 800f660:	24008488 	.word	0x24008488

0800f664 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f664:	b590      	push	{r4, r7, lr}
 800f666:	b08b      	sub	sp, #44	@ 0x2c
 800f668:	af04      	add	r7, sp, #16
 800f66a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f66c:	4b6f      	ldr	r3, [pc, #444]	@ (800f82c <tcp_listen_input+0x1c8>)
 800f66e:	781b      	ldrb	r3, [r3, #0]
 800f670:	f003 0304 	and.w	r3, r3, #4
 800f674:	2b00      	cmp	r3, #0
 800f676:	f040 80d2 	bne.w	800f81e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d106      	bne.n	800f68e <tcp_listen_input+0x2a>
 800f680:	4b6b      	ldr	r3, [pc, #428]	@ (800f830 <tcp_listen_input+0x1cc>)
 800f682:	f240 2281 	movw	r2, #641	@ 0x281
 800f686:	496b      	ldr	r1, [pc, #428]	@ (800f834 <tcp_listen_input+0x1d0>)
 800f688:	486b      	ldr	r0, [pc, #428]	@ (800f838 <tcp_listen_input+0x1d4>)
 800f68a:	f003 ff31 	bl	80134f0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f68e:	4b67      	ldr	r3, [pc, #412]	@ (800f82c <tcp_listen_input+0x1c8>)
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	f003 0310 	and.w	r3, r3, #16
 800f696:	2b00      	cmp	r3, #0
 800f698:	d019      	beq.n	800f6ce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f69a:	4b68      	ldr	r3, [pc, #416]	@ (800f83c <tcp_listen_input+0x1d8>)
 800f69c:	6819      	ldr	r1, [r3, #0]
 800f69e:	4b68      	ldr	r3, [pc, #416]	@ (800f840 <tcp_listen_input+0x1dc>)
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	461a      	mov	r2, r3
 800f6a4:	4b67      	ldr	r3, [pc, #412]	@ (800f844 <tcp_listen_input+0x1e0>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6aa:	4b67      	ldr	r3, [pc, #412]	@ (800f848 <tcp_listen_input+0x1e4>)
 800f6ac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6ae:	885b      	ldrh	r3, [r3, #2]
 800f6b0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f6b2:	4a65      	ldr	r2, [pc, #404]	@ (800f848 <tcp_listen_input+0x1e4>)
 800f6b4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f6b6:	8812      	ldrh	r2, [r2, #0]
 800f6b8:	b292      	uxth	r2, r2
 800f6ba:	9202      	str	r2, [sp, #8]
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	4b63      	ldr	r3, [pc, #396]	@ (800f84c <tcp_listen_input+0x1e8>)
 800f6c0:	9300      	str	r3, [sp, #0]
 800f6c2:	4b63      	ldr	r3, [pc, #396]	@ (800f850 <tcp_listen_input+0x1ec>)
 800f6c4:	4602      	mov	r2, r0
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f002 ff7a 	bl	80125c0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f6cc:	e0a9      	b.n	800f822 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f6ce:	4b57      	ldr	r3, [pc, #348]	@ (800f82c <tcp_listen_input+0x1c8>)
 800f6d0:	781b      	ldrb	r3, [r3, #0]
 800f6d2:	f003 0302 	and.w	r3, r3, #2
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f000 80a3 	beq.w	800f822 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7d5b      	ldrb	r3, [r3, #21]
 800f6e0:	4618      	mov	r0, r3
 800f6e2:	f7ff f927 	bl	800e934 <tcp_alloc>
 800f6e6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d111      	bne.n	800f712 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	699b      	ldr	r3, [r3, #24]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d00a      	beq.n	800f70c <tcp_listen_input+0xa8>
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	6910      	ldr	r0, [r2, #16]
 800f6fe:	f04f 32ff 	mov.w	r2, #4294967295
 800f702:	2100      	movs	r1, #0
 800f704:	4798      	blx	r3
 800f706:	4603      	mov	r3, r0
 800f708:	73bb      	strb	r3, [r7, #14]
      return;
 800f70a:	e08b      	b.n	800f824 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f70c:	23f0      	movs	r3, #240	@ 0xf0
 800f70e:	73bb      	strb	r3, [r7, #14]
      return;
 800f710:	e088      	b.n	800f824 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f712:	4b50      	ldr	r3, [pc, #320]	@ (800f854 <tcp_listen_input+0x1f0>)
 800f714:	695a      	ldr	r2, [r3, #20]
 800f716:	697b      	ldr	r3, [r7, #20]
 800f718:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f71a:	4b4e      	ldr	r3, [pc, #312]	@ (800f854 <tcp_listen_input+0x1f0>)
 800f71c:	691a      	ldr	r2, [r3, #16]
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	8ada      	ldrh	r2, [r3, #22]
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f72a:	4b47      	ldr	r3, [pc, #284]	@ (800f848 <tcp_listen_input+0x1e4>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	b29a      	uxth	r2, r3
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	2203      	movs	r2, #3
 800f73a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f73c:	4b41      	ldr	r3, [pc, #260]	@ (800f844 <tcp_listen_input+0x1e0>)
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	1c5a      	adds	r2, r3, #1
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800f74e:	6978      	ldr	r0, [r7, #20]
 800f750:	f7ff fa58 	bl	800ec04 <tcp_next_iss>
 800f754:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	693a      	ldr	r2, [r7, #16]
 800f75a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	693a      	ldr	r2, [r7, #16]
 800f760:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800f762:	697b      	ldr	r3, [r7, #20]
 800f764:	693a      	ldr	r2, [r7, #16]
 800f766:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	693a      	ldr	r2, [r7, #16]
 800f76c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f76e:	4b35      	ldr	r3, [pc, #212]	@ (800f844 <tcp_listen_input+0x1e0>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	1e5a      	subs	r2, r3, #1
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	691a      	ldr	r2, [r3, #16]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	7a5b      	ldrb	r3, [r3, #9]
 800f78a:	f003 030c 	and.w	r3, r3, #12
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	7a1a      	ldrb	r2, [r3, #8]
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f79c:	4b2e      	ldr	r3, [pc, #184]	@ (800f858 <tcp_listen_input+0x1f4>)
 800f79e:	681a      	ldr	r2, [r3, #0]
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	60da      	str	r2, [r3, #12]
 800f7a4:	4a2c      	ldr	r2, [pc, #176]	@ (800f858 <tcp_listen_input+0x1f4>)
 800f7a6:	697b      	ldr	r3, [r7, #20]
 800f7a8:	6013      	str	r3, [r2, #0]
 800f7aa:	f003 fa6d 	bl	8012c88 <tcp_timer_needed>
 800f7ae:	4b2b      	ldr	r3, [pc, #172]	@ (800f85c <tcp_listen_input+0x1f8>)
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f7b4:	6978      	ldr	r0, [r7, #20]
 800f7b6:	f001 fd8b 	bl	80112d0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f7ba:	4b23      	ldr	r3, [pc, #140]	@ (800f848 <tcp_listen_input+0x1e4>)
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	89db      	ldrh	r3, [r3, #14]
 800f7c0:	b29a      	uxth	r2, r3
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800f7d8:	697b      	ldr	r3, [r7, #20]
 800f7da:	3304      	adds	r3, #4
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7fa ff0f 	bl	800a600 <ip4_route>
 800f7e2:	4601      	mov	r1, r0
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	3304      	adds	r3, #4
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4620      	mov	r0, r4
 800f7ec:	f7ff fa30 	bl	800ec50 <tcp_eff_send_mss_netif>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	697b      	ldr	r3, [r7, #20]
 800f7f6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f7f8:	2112      	movs	r1, #18
 800f7fa:	6978      	ldr	r0, [r7, #20]
 800f7fc:	f002 f83e 	bl	801187c <tcp_enqueue_flags>
 800f800:	4603      	mov	r3, r0
 800f802:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f804:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d004      	beq.n	800f816 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f80c:	2100      	movs	r1, #0
 800f80e:	6978      	ldr	r0, [r7, #20]
 800f810:	f7fe f97c 	bl	800db0c <tcp_abandon>
      return;
 800f814:	e006      	b.n	800f824 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f816:	6978      	ldr	r0, [r7, #20]
 800f818:	f002 f91e 	bl	8011a58 <tcp_output>
  return;
 800f81c:	e001      	b.n	800f822 <tcp_listen_input+0x1be>
    return;
 800f81e:	bf00      	nop
 800f820:	e000      	b.n	800f824 <tcp_listen_input+0x1c0>
  return;
 800f822:	bf00      	nop
}
 800f824:	371c      	adds	r7, #28
 800f826:	46bd      	mov	sp, r7
 800f828:	bd90      	pop	{r4, r7, pc}
 800f82a:	bf00      	nop
 800f82c:	240084c0 	.word	0x240084c0
 800f830:	08015e0c 	.word	0x08015e0c
 800f834:	0801602c 	.word	0x0801602c
 800f838:	08015e80 	.word	0x08015e80
 800f83c:	240084b8 	.word	0x240084b8
 800f840:	240084be 	.word	0x240084be
 800f844:	240084b4 	.word	0x240084b4
 800f848:	240084a4 	.word	0x240084a4
 800f84c:	24005378 	.word	0x24005378
 800f850:	2400537c 	.word	0x2400537c
 800f854:	24005368 	.word	0x24005368
 800f858:	24008488 	.word	0x24008488
 800f85c:	24008490 	.word	0x24008490

0800f860 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b086      	sub	sp, #24
 800f864:	af04      	add	r7, sp, #16
 800f866:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f868:	4b2f      	ldr	r3, [pc, #188]	@ (800f928 <tcp_timewait_input+0xc8>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	f003 0304 	and.w	r3, r3, #4
 800f870:	2b00      	cmp	r3, #0
 800f872:	d153      	bne.n	800f91c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d106      	bne.n	800f888 <tcp_timewait_input+0x28>
 800f87a:	4b2c      	ldr	r3, [pc, #176]	@ (800f92c <tcp_timewait_input+0xcc>)
 800f87c:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800f880:	492b      	ldr	r1, [pc, #172]	@ (800f930 <tcp_timewait_input+0xd0>)
 800f882:	482c      	ldr	r0, [pc, #176]	@ (800f934 <tcp_timewait_input+0xd4>)
 800f884:	f003 fe34 	bl	80134f0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f888:	4b27      	ldr	r3, [pc, #156]	@ (800f928 <tcp_timewait_input+0xc8>)
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	f003 0302 	and.w	r3, r3, #2
 800f890:	2b00      	cmp	r3, #0
 800f892:	d02a      	beq.n	800f8ea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f894:	4b28      	ldr	r3, [pc, #160]	@ (800f938 <tcp_timewait_input+0xd8>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f89c:	1ad3      	subs	r3, r2, r3
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	db2d      	blt.n	800f8fe <tcp_timewait_input+0x9e>
 800f8a2:	4b25      	ldr	r3, [pc, #148]	@ (800f938 <tcp_timewait_input+0xd8>)
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f8aa:	6879      	ldr	r1, [r7, #4]
 800f8ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f8ae:	440b      	add	r3, r1
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	dc23      	bgt.n	800f8fe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8b6:	4b21      	ldr	r3, [pc, #132]	@ (800f93c <tcp_timewait_input+0xdc>)
 800f8b8:	6819      	ldr	r1, [r3, #0]
 800f8ba:	4b21      	ldr	r3, [pc, #132]	@ (800f940 <tcp_timewait_input+0xe0>)
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	4b1d      	ldr	r3, [pc, #116]	@ (800f938 <tcp_timewait_input+0xd8>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8c6:	4b1f      	ldr	r3, [pc, #124]	@ (800f944 <tcp_timewait_input+0xe4>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ca:	885b      	ldrh	r3, [r3, #2]
 800f8cc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8ce:	4a1d      	ldr	r2, [pc, #116]	@ (800f944 <tcp_timewait_input+0xe4>)
 800f8d0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8d2:	8812      	ldrh	r2, [r2, #0]
 800f8d4:	b292      	uxth	r2, r2
 800f8d6:	9202      	str	r2, [sp, #8]
 800f8d8:	9301      	str	r3, [sp, #4]
 800f8da:	4b1b      	ldr	r3, [pc, #108]	@ (800f948 <tcp_timewait_input+0xe8>)
 800f8dc:	9300      	str	r3, [sp, #0]
 800f8de:	4b1b      	ldr	r3, [pc, #108]	@ (800f94c <tcp_timewait_input+0xec>)
 800f8e0:	4602      	mov	r2, r0
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f002 fe6c 	bl	80125c0 <tcp_rst>
      return;
 800f8e8:	e01b      	b.n	800f922 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f8ea:	4b0f      	ldr	r3, [pc, #60]	@ (800f928 <tcp_timewait_input+0xc8>)
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	f003 0301 	and.w	r3, r3, #1
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d003      	beq.n	800f8fe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f8f6:	4b16      	ldr	r3, [pc, #88]	@ (800f950 <tcp_timewait_input+0xf0>)
 800f8f8:	681a      	ldr	r2, [r3, #0]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f8fe:	4b10      	ldr	r3, [pc, #64]	@ (800f940 <tcp_timewait_input+0xe0>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00c      	beq.n	800f920 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	8b5b      	ldrh	r3, [r3, #26]
 800f90a:	f043 0302 	orr.w	r3, r3, #2
 800f90e:	b29a      	uxth	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f002 f89f 	bl	8011a58 <tcp_output>
  }
  return;
 800f91a:	e001      	b.n	800f920 <tcp_timewait_input+0xc0>
    return;
 800f91c:	bf00      	nop
 800f91e:	e000      	b.n	800f922 <tcp_timewait_input+0xc2>
  return;
 800f920:	bf00      	nop
}
 800f922:	3708      	adds	r7, #8
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	240084c0 	.word	0x240084c0
 800f92c:	08015e0c 	.word	0x08015e0c
 800f930:	0801604c 	.word	0x0801604c
 800f934:	08015e80 	.word	0x08015e80
 800f938:	240084b4 	.word	0x240084b4
 800f93c:	240084b8 	.word	0x240084b8
 800f940:	240084be 	.word	0x240084be
 800f944:	240084a4 	.word	0x240084a4
 800f948:	24005378 	.word	0x24005378
 800f94c:	2400537c 	.word	0x2400537c
 800f950:	2400847c 	.word	0x2400847c

0800f954 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f954:	b590      	push	{r4, r7, lr}
 800f956:	b08d      	sub	sp, #52	@ 0x34
 800f958:	af04      	add	r7, sp, #16
 800f95a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f95c:	2300      	movs	r3, #0
 800f95e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f960:	2300      	movs	r3, #0
 800f962:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d106      	bne.n	800f978 <tcp_process+0x24>
 800f96a:	4b9d      	ldr	r3, [pc, #628]	@ (800fbe0 <tcp_process+0x28c>)
 800f96c:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800f970:	499c      	ldr	r1, [pc, #624]	@ (800fbe4 <tcp_process+0x290>)
 800f972:	489d      	ldr	r0, [pc, #628]	@ (800fbe8 <tcp_process+0x294>)
 800f974:	f003 fdbc 	bl	80134f0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f978:	4b9c      	ldr	r3, [pc, #624]	@ (800fbec <tcp_process+0x298>)
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	f003 0304 	and.w	r3, r3, #4
 800f980:	2b00      	cmp	r3, #0
 800f982:	d04e      	beq.n	800fa22 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	7d1b      	ldrb	r3, [r3, #20]
 800f988:	2b02      	cmp	r3, #2
 800f98a:	d108      	bne.n	800f99e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f990:	4b97      	ldr	r3, [pc, #604]	@ (800fbf0 <tcp_process+0x29c>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	429a      	cmp	r2, r3
 800f996:	d123      	bne.n	800f9e0 <tcp_process+0x8c>
        acceptable = 1;
 800f998:	2301      	movs	r3, #1
 800f99a:	76fb      	strb	r3, [r7, #27]
 800f99c:	e020      	b.n	800f9e0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800f9a2:	4b94      	ldr	r3, [pc, #592]	@ (800fbf4 <tcp_process+0x2a0>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	429a      	cmp	r2, r3
 800f9a8:	d102      	bne.n	800f9b0 <tcp_process+0x5c>
        acceptable = 1;
 800f9aa:	2301      	movs	r3, #1
 800f9ac:	76fb      	strb	r3, [r7, #27]
 800f9ae:	e017      	b.n	800f9e0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f9b0:	4b90      	ldr	r3, [pc, #576]	@ (800fbf4 <tcp_process+0x2a0>)
 800f9b2:	681a      	ldr	r2, [r3, #0]
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	db10      	blt.n	800f9e0 <tcp_process+0x8c>
 800f9be:	4b8d      	ldr	r3, [pc, #564]	@ (800fbf4 <tcp_process+0x2a0>)
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f9c6:	6879      	ldr	r1, [r7, #4]
 800f9c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f9ca:	440b      	add	r3, r1
 800f9cc:	1ad3      	subs	r3, r2, r3
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	dc06      	bgt.n	800f9e0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	8b5b      	ldrh	r3, [r3, #26]
 800f9d6:	f043 0302 	orr.w	r3, r3, #2
 800f9da:	b29a      	uxth	r2, r3
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f9e0:	7efb      	ldrb	r3, [r7, #27]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d01b      	beq.n	800fa1e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	7d1b      	ldrb	r3, [r3, #20]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d106      	bne.n	800f9fc <tcp_process+0xa8>
 800f9ee:	4b7c      	ldr	r3, [pc, #496]	@ (800fbe0 <tcp_process+0x28c>)
 800f9f0:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800f9f4:	4980      	ldr	r1, [pc, #512]	@ (800fbf8 <tcp_process+0x2a4>)
 800f9f6:	487c      	ldr	r0, [pc, #496]	@ (800fbe8 <tcp_process+0x294>)
 800f9f8:	f003 fd7a 	bl	80134f0 <iprintf>
      recv_flags |= TF_RESET;
 800f9fc:	4b7f      	ldr	r3, [pc, #508]	@ (800fbfc <tcp_process+0x2a8>)
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	f043 0308 	orr.w	r3, r3, #8
 800fa04:	b2da      	uxtb	r2, r3
 800fa06:	4b7d      	ldr	r3, [pc, #500]	@ (800fbfc <tcp_process+0x2a8>)
 800fa08:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	8b5b      	ldrh	r3, [r3, #26]
 800fa0e:	f023 0301 	bic.w	r3, r3, #1
 800fa12:	b29a      	uxth	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800fa18:	f06f 030d 	mvn.w	r3, #13
 800fa1c:	e37a      	b.n	8010114 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fa1e:	2300      	movs	r3, #0
 800fa20:	e378      	b.n	8010114 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fa22:	4b72      	ldr	r3, [pc, #456]	@ (800fbec <tcp_process+0x298>)
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	f003 0302 	and.w	r3, r3, #2
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d010      	beq.n	800fa50 <tcp_process+0xfc>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	7d1b      	ldrb	r3, [r3, #20]
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d00c      	beq.n	800fa50 <tcp_process+0xfc>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	7d1b      	ldrb	r3, [r3, #20]
 800fa3a:	2b03      	cmp	r3, #3
 800fa3c:	d008      	beq.n	800fa50 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	8b5b      	ldrh	r3, [r3, #26]
 800fa42:	f043 0302 	orr.w	r3, r3, #2
 800fa46:	b29a      	uxth	r2, r3
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	e361      	b.n	8010114 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	8b5b      	ldrh	r3, [r3, #26]
 800fa54:	f003 0310 	and.w	r3, r3, #16
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d103      	bne.n	800fa64 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fa5c:	4b68      	ldr	r3, [pc, #416]	@ (800fc00 <tcp_process+0x2ac>)
 800fa5e:	681a      	ldr	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2200      	movs	r2, #0
 800fa68:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2200      	movs	r2, #0
 800fa70:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f001 fc2b 	bl	80112d0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	7d1b      	ldrb	r3, [r3, #20]
 800fa7e:	3b02      	subs	r3, #2
 800fa80:	2b07      	cmp	r3, #7
 800fa82:	f200 8337 	bhi.w	80100f4 <tcp_process+0x7a0>
 800fa86:	a201      	add	r2, pc, #4	@ (adr r2, 800fa8c <tcp_process+0x138>)
 800fa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa8c:	0800faad 	.word	0x0800faad
 800fa90:	0800fcdd 	.word	0x0800fcdd
 800fa94:	0800fe55 	.word	0x0800fe55
 800fa98:	0800fe7f 	.word	0x0800fe7f
 800fa9c:	0800ffa3 	.word	0x0800ffa3
 800faa0:	0800fe55 	.word	0x0800fe55
 800faa4:	0801002f 	.word	0x0801002f
 800faa8:	080100bf 	.word	0x080100bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800faac:	4b4f      	ldr	r3, [pc, #316]	@ (800fbec <tcp_process+0x298>)
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	f003 0310 	and.w	r3, r3, #16
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	f000 80e4 	beq.w	800fc82 <tcp_process+0x32e>
 800faba:	4b4c      	ldr	r3, [pc, #304]	@ (800fbec <tcp_process+0x298>)
 800fabc:	781b      	ldrb	r3, [r3, #0]
 800fabe:	f003 0302 	and.w	r3, r3, #2
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	f000 80dd 	beq.w	800fc82 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800facc:	1c5a      	adds	r2, r3, #1
 800face:	4b48      	ldr	r3, [pc, #288]	@ (800fbf0 <tcp_process+0x29c>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	429a      	cmp	r2, r3
 800fad4:	f040 80d5 	bne.w	800fc82 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800fad8:	4b46      	ldr	r3, [pc, #280]	@ (800fbf4 <tcp_process+0x2a0>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	1c5a      	adds	r2, r3, #1
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800faea:	4b41      	ldr	r3, [pc, #260]	@ (800fbf0 <tcp_process+0x29c>)
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800faf2:	4b44      	ldr	r3, [pc, #272]	@ (800fc04 <tcp_process+0x2b0>)
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	89db      	ldrh	r3, [r3, #14]
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fb0c:	4b39      	ldr	r3, [pc, #228]	@ (800fbf4 <tcp_process+0x2a0>)
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	1e5a      	subs	r2, r3, #1
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2204      	movs	r2, #4
 800fb1a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	3304      	adds	r3, #4
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fa fd6b 	bl	800a600 <ip4_route>
 800fb2a:	4601      	mov	r1, r0
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	3304      	adds	r3, #4
 800fb30:	461a      	mov	r2, r3
 800fb32:	4620      	mov	r0, r4
 800fb34:	f7ff f88c 	bl	800ec50 <tcp_eff_send_mss_netif>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb44:	009a      	lsls	r2, r3, #2
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fb50:	428b      	cmp	r3, r1
 800fb52:	bf38      	it	cc
 800fb54:	460b      	movcc	r3, r1
 800fb56:	429a      	cmp	r2, r3
 800fb58:	d204      	bcs.n	800fb64 <tcp_process+0x210>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb5e:	009b      	lsls	r3, r3, #2
 800fb60:	b29b      	uxth	r3, r3
 800fb62:	e00d      	b.n	800fb80 <tcp_process+0x22c>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb68:	005b      	lsls	r3, r3, #1
 800fb6a:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d904      	bls.n	800fb7c <tcp_process+0x228>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	b29b      	uxth	r3, r3
 800fb7a:	e001      	b.n	800fb80 <tcp_process+0x22c>
 800fb7c:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d106      	bne.n	800fb9e <tcp_process+0x24a>
 800fb90:	4b13      	ldr	r3, [pc, #76]	@ (800fbe0 <tcp_process+0x28c>)
 800fb92:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800fb96:	491c      	ldr	r1, [pc, #112]	@ (800fc08 <tcp_process+0x2b4>)
 800fb98:	4813      	ldr	r0, [pc, #76]	@ (800fbe8 <tcp_process+0x294>)
 800fb9a:	f003 fca9 	bl	80134f0 <iprintf>
        --pcb->snd_queuelen;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fba4:	3b01      	subs	r3, #1
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbb2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d12a      	bne.n	800fc10 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fbbe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d106      	bne.n	800fbd4 <tcp_process+0x280>
 800fbc6:	4b06      	ldr	r3, [pc, #24]	@ (800fbe0 <tcp_process+0x28c>)
 800fbc8:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800fbcc:	490f      	ldr	r1, [pc, #60]	@ (800fc0c <tcp_process+0x2b8>)
 800fbce:	4806      	ldr	r0, [pc, #24]	@ (800fbe8 <tcp_process+0x294>)
 800fbd0:	f003 fc8e 	bl	80134f0 <iprintf>
          pcb->unsent = rseg->next;
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	681a      	ldr	r2, [r3, #0]
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fbdc:	e01c      	b.n	800fc18 <tcp_process+0x2c4>
 800fbde:	bf00      	nop
 800fbe0:	08015e0c 	.word	0x08015e0c
 800fbe4:	0801606c 	.word	0x0801606c
 800fbe8:	08015e80 	.word	0x08015e80
 800fbec:	240084c0 	.word	0x240084c0
 800fbf0:	240084b8 	.word	0x240084b8
 800fbf4:	240084b4 	.word	0x240084b4
 800fbf8:	08016088 	.word	0x08016088
 800fbfc:	240084c1 	.word	0x240084c1
 800fc00:	2400847c 	.word	0x2400847c
 800fc04:	240084a4 	.word	0x240084a4
 800fc08:	080160a8 	.word	0x080160a8
 800fc0c:	080160c0 	.word	0x080160c0
        } else {
          pcb->unacked = rseg->next;
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	681a      	ldr	r2, [r3, #0]
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800fc18:	69f8      	ldr	r0, [r7, #28]
 800fc1a:	f7fe fd22 	bl	800e662 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d104      	bne.n	800fc30 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fc2c:	861a      	strh	r2, [r3, #48]	@ 0x30
 800fc2e:	e006      	b.n	800fc3e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d00a      	beq.n	800fc5e <tcp_process+0x30a>
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	6910      	ldr	r0, [r2, #16]
 800fc52:	2200      	movs	r2, #0
 800fc54:	6879      	ldr	r1, [r7, #4]
 800fc56:	4798      	blx	r3
 800fc58:	4603      	mov	r3, r0
 800fc5a:	76bb      	strb	r3, [r7, #26]
 800fc5c:	e001      	b.n	800fc62 <tcp_process+0x30e>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800fc62:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fc66:	f113 0f0d 	cmn.w	r3, #13
 800fc6a:	d102      	bne.n	800fc72 <tcp_process+0x31e>
          return ERR_ABRT;
 800fc6c:	f06f 030c 	mvn.w	r3, #12
 800fc70:	e250      	b.n	8010114 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8b5b      	ldrh	r3, [r3, #26]
 800fc76:	f043 0302 	orr.w	r3, r3, #2
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800fc80:	e23a      	b.n	80100f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800fc82:	4b98      	ldr	r3, [pc, #608]	@ (800fee4 <tcp_process+0x590>)
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	f003 0310 	and.w	r3, r3, #16
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f000 8234 	beq.w	80100f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc90:	4b95      	ldr	r3, [pc, #596]	@ (800fee8 <tcp_process+0x594>)
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	4b95      	ldr	r3, [pc, #596]	@ (800feec <tcp_process+0x598>)
 800fc96:	881b      	ldrh	r3, [r3, #0]
 800fc98:	461a      	mov	r2, r3
 800fc9a:	4b95      	ldr	r3, [pc, #596]	@ (800fef0 <tcp_process+0x59c>)
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fca0:	4b94      	ldr	r3, [pc, #592]	@ (800fef4 <tcp_process+0x5a0>)
 800fca2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fca4:	885b      	ldrh	r3, [r3, #2]
 800fca6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fca8:	4a92      	ldr	r2, [pc, #584]	@ (800fef4 <tcp_process+0x5a0>)
 800fcaa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcac:	8812      	ldrh	r2, [r2, #0]
 800fcae:	b292      	uxth	r2, r2
 800fcb0:	9202      	str	r2, [sp, #8]
 800fcb2:	9301      	str	r3, [sp, #4]
 800fcb4:	4b90      	ldr	r3, [pc, #576]	@ (800fef8 <tcp_process+0x5a4>)
 800fcb6:	9300      	str	r3, [sp, #0]
 800fcb8:	4b90      	ldr	r3, [pc, #576]	@ (800fefc <tcp_process+0x5a8>)
 800fcba:	4602      	mov	r2, r0
 800fcbc:	6878      	ldr	r0, [r7, #4]
 800fcbe:	f002 fc7f 	bl	80125c0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fcc8:	2b05      	cmp	r3, #5
 800fcca:	f200 8215 	bhi.w	80100f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f002 fa4b 	bl	8012170 <tcp_rexmit_rto>
      break;
 800fcda:	e20d      	b.n	80100f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800fcdc:	4b81      	ldr	r3, [pc, #516]	@ (800fee4 <tcp_process+0x590>)
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	f003 0310 	and.w	r3, r3, #16
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	f000 80a1 	beq.w	800fe2c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fcea:	4b7f      	ldr	r3, [pc, #508]	@ (800fee8 <tcp_process+0x594>)
 800fcec:	681a      	ldr	r2, [r3, #0]
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	3b01      	subs	r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	db7e      	blt.n	800fdf8 <tcp_process+0x4a4>
 800fcfa:	4b7b      	ldr	r3, [pc, #492]	@ (800fee8 <tcp_process+0x594>)
 800fcfc:	681a      	ldr	r2, [r3, #0]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd02:	1ad3      	subs	r3, r2, r3
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	dc77      	bgt.n	800fdf8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2204      	movs	r2, #4
 800fd0c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d102      	bne.n	800fd1c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800fd16:	23fa      	movs	r3, #250	@ 0xfa
 800fd18:	76bb      	strb	r3, [r7, #26]
 800fd1a:	e01d      	b.n	800fd58 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd20:	699b      	ldr	r3, [r3, #24]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d106      	bne.n	800fd34 <tcp_process+0x3e0>
 800fd26:	4b76      	ldr	r3, [pc, #472]	@ (800ff00 <tcp_process+0x5ac>)
 800fd28:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800fd2c:	4975      	ldr	r1, [pc, #468]	@ (800ff04 <tcp_process+0x5b0>)
 800fd2e:	4876      	ldr	r0, [pc, #472]	@ (800ff08 <tcp_process+0x5b4>)
 800fd30:	f003 fbde 	bl	80134f0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd38:	699b      	ldr	r3, [r3, #24]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d00a      	beq.n	800fd54 <tcp_process+0x400>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd42:	699b      	ldr	r3, [r3, #24]
 800fd44:	687a      	ldr	r2, [r7, #4]
 800fd46:	6910      	ldr	r0, [r2, #16]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	6879      	ldr	r1, [r7, #4]
 800fd4c:	4798      	blx	r3
 800fd4e:	4603      	mov	r3, r0
 800fd50:	76bb      	strb	r3, [r7, #26]
 800fd52:	e001      	b.n	800fd58 <tcp_process+0x404>
 800fd54:	23f0      	movs	r3, #240	@ 0xf0
 800fd56:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800fd58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d00a      	beq.n	800fd76 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800fd60:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd64:	f113 0f0d 	cmn.w	r3, #13
 800fd68:	d002      	beq.n	800fd70 <tcp_process+0x41c>
              tcp_abort(pcb);
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f7fd ff8c 	bl	800dc88 <tcp_abort>
            }
            return ERR_ABRT;
 800fd70:	f06f 030c 	mvn.w	r3, #12
 800fd74:	e1ce      	b.n	8010114 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f000 fae0 	bl	801033c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800fd7c:	4b63      	ldr	r3, [pc, #396]	@ (800ff0c <tcp_process+0x5b8>)
 800fd7e:	881b      	ldrh	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d005      	beq.n	800fd90 <tcp_process+0x43c>
            recv_acked--;
 800fd84:	4b61      	ldr	r3, [pc, #388]	@ (800ff0c <tcp_process+0x5b8>)
 800fd86:	881b      	ldrh	r3, [r3, #0]
 800fd88:	3b01      	subs	r3, #1
 800fd8a:	b29a      	uxth	r2, r3
 800fd8c:	4b5f      	ldr	r3, [pc, #380]	@ (800ff0c <tcp_process+0x5b8>)
 800fd8e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd94:	009a      	lsls	r2, r3, #2
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fd9a:	005b      	lsls	r3, r3, #1
 800fd9c:	f241 111c 	movw	r1, #4380	@ 0x111c
 800fda0:	428b      	cmp	r3, r1
 800fda2:	bf38      	it	cc
 800fda4:	460b      	movcc	r3, r1
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d204      	bcs.n	800fdb4 <tcp_process+0x460>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	b29b      	uxth	r3, r3
 800fdb2:	e00d      	b.n	800fdd0 <tcp_process+0x47c>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdb8:	005b      	lsls	r3, r3, #1
 800fdba:	f241 121c 	movw	r2, #4380	@ 0x111c
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d904      	bls.n	800fdcc <tcp_process+0x478>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800fdc6:	005b      	lsls	r3, r3, #1
 800fdc8:	b29b      	uxth	r3, r3
 800fdca:	e001      	b.n	800fdd0 <tcp_process+0x47c>
 800fdcc:	f241 131c 	movw	r3, #4380	@ 0x111c
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800fdd6:	4b4e      	ldr	r3, [pc, #312]	@ (800ff10 <tcp_process+0x5bc>)
 800fdd8:	781b      	ldrb	r3, [r3, #0]
 800fdda:	f003 0320 	and.w	r3, r3, #32
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d037      	beq.n	800fe52 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	8b5b      	ldrh	r3, [r3, #26]
 800fde6:	f043 0302 	orr.w	r3, r3, #2
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	2207      	movs	r2, #7
 800fdf4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800fdf6:	e02c      	b.n	800fe52 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdf8:	4b3b      	ldr	r3, [pc, #236]	@ (800fee8 <tcp_process+0x594>)
 800fdfa:	6819      	ldr	r1, [r3, #0]
 800fdfc:	4b3b      	ldr	r3, [pc, #236]	@ (800feec <tcp_process+0x598>)
 800fdfe:	881b      	ldrh	r3, [r3, #0]
 800fe00:	461a      	mov	r2, r3
 800fe02:	4b3b      	ldr	r3, [pc, #236]	@ (800fef0 <tcp_process+0x59c>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe08:	4b3a      	ldr	r3, [pc, #232]	@ (800fef4 <tcp_process+0x5a0>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe0c:	885b      	ldrh	r3, [r3, #2]
 800fe0e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe10:	4a38      	ldr	r2, [pc, #224]	@ (800fef4 <tcp_process+0x5a0>)
 800fe12:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe14:	8812      	ldrh	r2, [r2, #0]
 800fe16:	b292      	uxth	r2, r2
 800fe18:	9202      	str	r2, [sp, #8]
 800fe1a:	9301      	str	r3, [sp, #4]
 800fe1c:	4b36      	ldr	r3, [pc, #216]	@ (800fef8 <tcp_process+0x5a4>)
 800fe1e:	9300      	str	r3, [sp, #0]
 800fe20:	4b36      	ldr	r3, [pc, #216]	@ (800fefc <tcp_process+0x5a8>)
 800fe22:	4602      	mov	r2, r0
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f002 fbcb 	bl	80125c0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800fe2a:	e167      	b.n	80100fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fe2c:	4b2d      	ldr	r3, [pc, #180]	@ (800fee4 <tcp_process+0x590>)
 800fe2e:	781b      	ldrb	r3, [r3, #0]
 800fe30:	f003 0302 	and.w	r3, r3, #2
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f000 8161 	beq.w	80100fc <tcp_process+0x7a8>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe3e:	1e5a      	subs	r2, r3, #1
 800fe40:	4b2b      	ldr	r3, [pc, #172]	@ (800fef0 <tcp_process+0x59c>)
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	429a      	cmp	r2, r3
 800fe46:	f040 8159 	bne.w	80100fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f002 f9b2 	bl	80121b4 <tcp_rexmit>
      break;
 800fe50:	e154      	b.n	80100fc <tcp_process+0x7a8>
 800fe52:	e153      	b.n	80100fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f000 fa71 	bl	801033c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800fe5a:	4b2d      	ldr	r3, [pc, #180]	@ (800ff10 <tcp_process+0x5bc>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	f003 0320 	and.w	r3, r3, #32
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 814c 	beq.w	8010100 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	8b5b      	ldrh	r3, [r3, #26]
 800fe6c:	f043 0302 	orr.w	r3, r3, #2
 800fe70:	b29a      	uxth	r2, r3
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	2207      	movs	r2, #7
 800fe7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800fe7c:	e140      	b.n	8010100 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 fa5c 	bl	801033c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800fe84:	4b22      	ldr	r3, [pc, #136]	@ (800ff10 <tcp_process+0x5bc>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	f003 0320 	and.w	r3, r3, #32
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d071      	beq.n	800ff74 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fe90:	4b14      	ldr	r3, [pc, #80]	@ (800fee4 <tcp_process+0x590>)
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	f003 0310 	and.w	r3, r3, #16
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d060      	beq.n	800ff5e <tcp_process+0x60a>
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fea0:	4b11      	ldr	r3, [pc, #68]	@ (800fee8 <tcp_process+0x594>)
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	429a      	cmp	r2, r3
 800fea6:	d15a      	bne.n	800ff5e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800feac:	2b00      	cmp	r3, #0
 800feae:	d156      	bne.n	800ff5e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	8b5b      	ldrh	r3, [r3, #26]
 800feb4:	f043 0302 	orr.w	r3, r3, #2
 800feb8:	b29a      	uxth	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800febe:	6878      	ldr	r0, [r7, #4]
 800fec0:	f7fe fdbc 	bl	800ea3c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800fec4:	4b13      	ldr	r3, [pc, #76]	@ (800ff14 <tcp_process+0x5c0>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d105      	bne.n	800feda <tcp_process+0x586>
 800fece:	4b11      	ldr	r3, [pc, #68]	@ (800ff14 <tcp_process+0x5c0>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	4a0f      	ldr	r2, [pc, #60]	@ (800ff14 <tcp_process+0x5c0>)
 800fed6:	6013      	str	r3, [r2, #0]
 800fed8:	e02e      	b.n	800ff38 <tcp_process+0x5e4>
 800feda:	4b0e      	ldr	r3, [pc, #56]	@ (800ff14 <tcp_process+0x5c0>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	617b      	str	r3, [r7, #20]
 800fee0:	e027      	b.n	800ff32 <tcp_process+0x5de>
 800fee2:	bf00      	nop
 800fee4:	240084c0 	.word	0x240084c0
 800fee8:	240084b8 	.word	0x240084b8
 800feec:	240084be 	.word	0x240084be
 800fef0:	240084b4 	.word	0x240084b4
 800fef4:	240084a4 	.word	0x240084a4
 800fef8:	24005378 	.word	0x24005378
 800fefc:	2400537c 	.word	0x2400537c
 800ff00:	08015e0c 	.word	0x08015e0c
 800ff04:	080160d4 	.word	0x080160d4
 800ff08:	08015e80 	.word	0x08015e80
 800ff0c:	240084bc 	.word	0x240084bc
 800ff10:	240084c1 	.word	0x240084c1
 800ff14:	24008488 	.word	0x24008488
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	687a      	ldr	r2, [r7, #4]
 800ff1e:	429a      	cmp	r2, r3
 800ff20:	d104      	bne.n	800ff2c <tcp_process+0x5d8>
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	68da      	ldr	r2, [r3, #12]
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	60da      	str	r2, [r3, #12]
 800ff2a:	e005      	b.n	800ff38 <tcp_process+0x5e4>
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	68db      	ldr	r3, [r3, #12]
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1ef      	bne.n	800ff18 <tcp_process+0x5c4>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	60da      	str	r2, [r3, #12]
 800ff3e:	4b77      	ldr	r3, [pc, #476]	@ (801011c <tcp_process+0x7c8>)
 800ff40:	2201      	movs	r2, #1
 800ff42:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	220a      	movs	r2, #10
 800ff48:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800ff4a:	4b75      	ldr	r3, [pc, #468]	@ (8010120 <tcp_process+0x7cc>)
 800ff4c:	681a      	ldr	r2, [r3, #0]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	60da      	str	r2, [r3, #12]
 800ff52:	4a73      	ldr	r2, [pc, #460]	@ (8010120 <tcp_process+0x7cc>)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6013      	str	r3, [r2, #0]
 800ff58:	f002 fe96 	bl	8012c88 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800ff5c:	e0d2      	b.n	8010104 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	8b5b      	ldrh	r3, [r3, #26]
 800ff62:	f043 0302 	orr.w	r3, r3, #2
 800ff66:	b29a      	uxth	r2, r3
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2208      	movs	r2, #8
 800ff70:	751a      	strb	r2, [r3, #20]
      break;
 800ff72:	e0c7      	b.n	8010104 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff74:	4b6b      	ldr	r3, [pc, #428]	@ (8010124 <tcp_process+0x7d0>)
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	f003 0310 	and.w	r3, r3, #16
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	f000 80c1 	beq.w	8010104 <tcp_process+0x7b0>
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ff86:	4b68      	ldr	r3, [pc, #416]	@ (8010128 <tcp_process+0x7d4>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	f040 80ba 	bne.w	8010104 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f040 80b5 	bne.w	8010104 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	2206      	movs	r2, #6
 800ff9e:	751a      	strb	r2, [r3, #20]
      break;
 800ffa0:	e0b0      	b.n	8010104 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 f9ca 	bl	801033c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ffa8:	4b60      	ldr	r3, [pc, #384]	@ (801012c <tcp_process+0x7d8>)
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	f003 0320 	and.w	r3, r3, #32
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	f000 80a9 	beq.w	8010108 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8b5b      	ldrh	r3, [r3, #26]
 800ffba:	f043 0302 	orr.w	r3, r3, #2
 800ffbe:	b29a      	uxth	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7fe fd39 	bl	800ea3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ffca:	4b59      	ldr	r3, [pc, #356]	@ (8010130 <tcp_process+0x7dc>)
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d105      	bne.n	800ffe0 <tcp_process+0x68c>
 800ffd4:	4b56      	ldr	r3, [pc, #344]	@ (8010130 <tcp_process+0x7dc>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	4a55      	ldr	r2, [pc, #340]	@ (8010130 <tcp_process+0x7dc>)
 800ffdc:	6013      	str	r3, [r2, #0]
 800ffde:	e013      	b.n	8010008 <tcp_process+0x6b4>
 800ffe0:	4b53      	ldr	r3, [pc, #332]	@ (8010130 <tcp_process+0x7dc>)
 800ffe2:	681b      	ldr	r3, [r3, #0]
 800ffe4:	613b      	str	r3, [r7, #16]
 800ffe6:	e00c      	b.n	8010002 <tcp_process+0x6ae>
 800ffe8:	693b      	ldr	r3, [r7, #16]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	429a      	cmp	r2, r3
 800fff0:	d104      	bne.n	800fffc <tcp_process+0x6a8>
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68da      	ldr	r2, [r3, #12]
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	60da      	str	r2, [r3, #12]
 800fffa:	e005      	b.n	8010008 <tcp_process+0x6b4>
 800fffc:	693b      	ldr	r3, [r7, #16]
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	613b      	str	r3, [r7, #16]
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d1ef      	bne.n	800ffe8 <tcp_process+0x694>
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	60da      	str	r2, [r3, #12]
 801000e:	4b43      	ldr	r3, [pc, #268]	@ (801011c <tcp_process+0x7c8>)
 8010010:	2201      	movs	r2, #1
 8010012:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	220a      	movs	r2, #10
 8010018:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801001a:	4b41      	ldr	r3, [pc, #260]	@ (8010120 <tcp_process+0x7cc>)
 801001c:	681a      	ldr	r2, [r3, #0]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	60da      	str	r2, [r3, #12]
 8010022:	4a3f      	ldr	r2, [pc, #252]	@ (8010120 <tcp_process+0x7cc>)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6013      	str	r3, [r2, #0]
 8010028:	f002 fe2e 	bl	8012c88 <tcp_timer_needed>
      }
      break;
 801002c:	e06c      	b.n	8010108 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f000 f984 	bl	801033c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010034:	4b3b      	ldr	r3, [pc, #236]	@ (8010124 <tcp_process+0x7d0>)
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	f003 0310 	and.w	r3, r3, #16
 801003c:	2b00      	cmp	r3, #0
 801003e:	d065      	beq.n	801010c <tcp_process+0x7b8>
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010044:	4b38      	ldr	r3, [pc, #224]	@ (8010128 <tcp_process+0x7d4>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	429a      	cmp	r2, r3
 801004a:	d15f      	bne.n	801010c <tcp_process+0x7b8>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010050:	2b00      	cmp	r3, #0
 8010052:	d15b      	bne.n	801010c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7fe fcf1 	bl	800ea3c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801005a:	4b35      	ldr	r3, [pc, #212]	@ (8010130 <tcp_process+0x7dc>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	687a      	ldr	r2, [r7, #4]
 8010060:	429a      	cmp	r2, r3
 8010062:	d105      	bne.n	8010070 <tcp_process+0x71c>
 8010064:	4b32      	ldr	r3, [pc, #200]	@ (8010130 <tcp_process+0x7dc>)
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	4a31      	ldr	r2, [pc, #196]	@ (8010130 <tcp_process+0x7dc>)
 801006c:	6013      	str	r3, [r2, #0]
 801006e:	e013      	b.n	8010098 <tcp_process+0x744>
 8010070:	4b2f      	ldr	r3, [pc, #188]	@ (8010130 <tcp_process+0x7dc>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	60fb      	str	r3, [r7, #12]
 8010076:	e00c      	b.n	8010092 <tcp_process+0x73e>
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	429a      	cmp	r2, r3
 8010080:	d104      	bne.n	801008c <tcp_process+0x738>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	68da      	ldr	r2, [r3, #12]
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	60da      	str	r2, [r3, #12]
 801008a:	e005      	b.n	8010098 <tcp_process+0x744>
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	60fb      	str	r3, [r7, #12]
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d1ef      	bne.n	8010078 <tcp_process+0x724>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2200      	movs	r2, #0
 801009c:	60da      	str	r2, [r3, #12]
 801009e:	4b1f      	ldr	r3, [pc, #124]	@ (801011c <tcp_process+0x7c8>)
 80100a0:	2201      	movs	r2, #1
 80100a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	220a      	movs	r2, #10
 80100a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80100aa:	4b1d      	ldr	r3, [pc, #116]	@ (8010120 <tcp_process+0x7cc>)
 80100ac:	681a      	ldr	r2, [r3, #0]
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	60da      	str	r2, [r3, #12]
 80100b2:	4a1b      	ldr	r2, [pc, #108]	@ (8010120 <tcp_process+0x7cc>)
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	6013      	str	r3, [r2, #0]
 80100b8:	f002 fde6 	bl	8012c88 <tcp_timer_needed>
      }
      break;
 80100bc:	e026      	b.n	801010c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f93c 	bl	801033c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80100c4:	4b17      	ldr	r3, [pc, #92]	@ (8010124 <tcp_process+0x7d0>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 0310 	and.w	r3, r3, #16
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d01f      	beq.n	8010110 <tcp_process+0x7bc>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80100d4:	4b14      	ldr	r3, [pc, #80]	@ (8010128 <tcp_process+0x7d4>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d119      	bne.n	8010110 <tcp_process+0x7bc>
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d115      	bne.n	8010110 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80100e4:	4b11      	ldr	r3, [pc, #68]	@ (801012c <tcp_process+0x7d8>)
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	f043 0310 	orr.w	r3, r3, #16
 80100ec:	b2da      	uxtb	r2, r3
 80100ee:	4b0f      	ldr	r3, [pc, #60]	@ (801012c <tcp_process+0x7d8>)
 80100f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80100f2:	e00d      	b.n	8010110 <tcp_process+0x7bc>
    default:
      break;
 80100f4:	bf00      	nop
 80100f6:	e00c      	b.n	8010112 <tcp_process+0x7be>
      break;
 80100f8:	bf00      	nop
 80100fa:	e00a      	b.n	8010112 <tcp_process+0x7be>
      break;
 80100fc:	bf00      	nop
 80100fe:	e008      	b.n	8010112 <tcp_process+0x7be>
      break;
 8010100:	bf00      	nop
 8010102:	e006      	b.n	8010112 <tcp_process+0x7be>
      break;
 8010104:	bf00      	nop
 8010106:	e004      	b.n	8010112 <tcp_process+0x7be>
      break;
 8010108:	bf00      	nop
 801010a:	e002      	b.n	8010112 <tcp_process+0x7be>
      break;
 801010c:	bf00      	nop
 801010e:	e000      	b.n	8010112 <tcp_process+0x7be>
      break;
 8010110:	bf00      	nop
  }
  return ERR_OK;
 8010112:	2300      	movs	r3, #0
}
 8010114:	4618      	mov	r0, r3
 8010116:	3724      	adds	r7, #36	@ 0x24
 8010118:	46bd      	mov	sp, r7
 801011a:	bd90      	pop	{r4, r7, pc}
 801011c:	24008490 	.word	0x24008490
 8010120:	2400848c 	.word	0x2400848c
 8010124:	240084c0 	.word	0x240084c0
 8010128:	240084b8 	.word	0x240084b8
 801012c:	240084c1 	.word	0x240084c1
 8010130:	24008488 	.word	0x24008488

08010134 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010134:	b590      	push	{r4, r7, lr}
 8010136:	b085      	sub	sp, #20
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d106      	bne.n	8010152 <tcp_oos_insert_segment+0x1e>
 8010144:	4b3b      	ldr	r3, [pc, #236]	@ (8010234 <tcp_oos_insert_segment+0x100>)
 8010146:	f240 421f 	movw	r2, #1055	@ 0x41f
 801014a:	493b      	ldr	r1, [pc, #236]	@ (8010238 <tcp_oos_insert_segment+0x104>)
 801014c:	483b      	ldr	r0, [pc, #236]	@ (801023c <tcp_oos_insert_segment+0x108>)
 801014e:	f003 f9cf 	bl	80134f0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	899b      	ldrh	r3, [r3, #12]
 8010158:	b29b      	uxth	r3, r3
 801015a:	4618      	mov	r0, r3
 801015c:	f7f9 f85a 	bl	8009214 <lwip_htons>
 8010160:	4603      	mov	r3, r0
 8010162:	b2db      	uxtb	r3, r3
 8010164:	f003 0301 	and.w	r3, r3, #1
 8010168:	2b00      	cmp	r3, #0
 801016a:	d028      	beq.n	80101be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801016c:	6838      	ldr	r0, [r7, #0]
 801016e:	f7fe fa63 	bl	800e638 <tcp_segs_free>
    next = NULL;
 8010172:	2300      	movs	r3, #0
 8010174:	603b      	str	r3, [r7, #0]
 8010176:	e056      	b.n	8010226 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	899b      	ldrh	r3, [r3, #12]
 801017e:	b29b      	uxth	r3, r3
 8010180:	4618      	mov	r0, r3
 8010182:	f7f9 f847 	bl	8009214 <lwip_htons>
 8010186:	4603      	mov	r3, r0
 8010188:	b2db      	uxtb	r3, r3
 801018a:	f003 0301 	and.w	r3, r3, #1
 801018e:	2b00      	cmp	r3, #0
 8010190:	d00d      	beq.n	80101ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	899b      	ldrh	r3, [r3, #12]
 8010198:	b29c      	uxth	r4, r3
 801019a:	2001      	movs	r0, #1
 801019c:	f7f9 f83a 	bl	8009214 <lwip_htons>
 80101a0:	4603      	mov	r3, r0
 80101a2:	461a      	mov	r2, r3
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	68db      	ldr	r3, [r3, #12]
 80101a8:	4322      	orrs	r2, r4
 80101aa:	b292      	uxth	r2, r2
 80101ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80101b2:	683b      	ldr	r3, [r7, #0]
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f7fe fa52 	bl	800e662 <tcp_seg_free>
    while (next &&
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d00e      	beq.n	80101e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	891b      	ldrh	r3, [r3, #8]
 80101c8:	461a      	mov	r2, r3
 80101ca:	4b1d      	ldr	r3, [pc, #116]	@ (8010240 <tcp_oos_insert_segment+0x10c>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	441a      	add	r2, r3
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	6839      	ldr	r1, [r7, #0]
 80101d8:	8909      	ldrh	r1, [r1, #8]
 80101da:	440b      	add	r3, r1
 80101dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80101de:	2b00      	cmp	r3, #0
 80101e0:	daca      	bge.n	8010178 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80101e2:	683b      	ldr	r3, [r7, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d01e      	beq.n	8010226 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	891b      	ldrh	r3, [r3, #8]
 80101ec:	461a      	mov	r2, r3
 80101ee:	4b14      	ldr	r3, [pc, #80]	@ (8010240 <tcp_oos_insert_segment+0x10c>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	441a      	add	r2, r3
 80101f4:	683b      	ldr	r3, [r7, #0]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	685b      	ldr	r3, [r3, #4]
 80101fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd12      	ble.n	8010226 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	685b      	ldr	r3, [r3, #4]
 8010206:	b29a      	uxth	r2, r3
 8010208:	4b0d      	ldr	r3, [pc, #52]	@ (8010240 <tcp_oos_insert_segment+0x10c>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	b29b      	uxth	r3, r3
 801020e:	1ad3      	subs	r3, r2, r3
 8010210:	b29a      	uxth	r2, r3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685a      	ldr	r2, [r3, #4]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	891b      	ldrh	r3, [r3, #8]
 801021e:	4619      	mov	r1, r3
 8010220:	4610      	mov	r0, r2
 8010222:	f7fc fd25 	bl	800cc70 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	601a      	str	r2, [r3, #0]
}
 801022c:	bf00      	nop
 801022e:	3714      	adds	r7, #20
 8010230:	46bd      	mov	sp, r7
 8010232:	bd90      	pop	{r4, r7, pc}
 8010234:	08015e0c 	.word	0x08015e0c
 8010238:	080160f4 	.word	0x080160f4
 801023c:	08015e80 	.word	0x08015e80
 8010240:	240084b4 	.word	0x240084b4

08010244 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010244:	b5b0      	push	{r4, r5, r7, lr}
 8010246:	b086      	sub	sp, #24
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
 8010250:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010252:	e03e      	b.n	80102d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801025e:	697b      	ldr	r3, [r7, #20]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	4618      	mov	r0, r3
 8010264:	f7fc ff18 	bl	800d098 <pbuf_clen>
 8010268:	4603      	mov	r3, r0
 801026a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010272:	8a7a      	ldrh	r2, [r7, #18]
 8010274:	429a      	cmp	r2, r3
 8010276:	d906      	bls.n	8010286 <tcp_free_acked_segments+0x42>
 8010278:	4b2a      	ldr	r3, [pc, #168]	@ (8010324 <tcp_free_acked_segments+0xe0>)
 801027a:	f240 4257 	movw	r2, #1111	@ 0x457
 801027e:	492a      	ldr	r1, [pc, #168]	@ (8010328 <tcp_free_acked_segments+0xe4>)
 8010280:	482a      	ldr	r0, [pc, #168]	@ (801032c <tcp_free_acked_segments+0xe8>)
 8010282:	f003 f935 	bl	80134f0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 801028c:	8a7b      	ldrh	r3, [r7, #18]
 801028e:	1ad3      	subs	r3, r2, r3
 8010290:	b29a      	uxth	r2, r3
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	891a      	ldrh	r2, [r3, #8]
 801029c:	4b24      	ldr	r3, [pc, #144]	@ (8010330 <tcp_free_acked_segments+0xec>)
 801029e:	881b      	ldrh	r3, [r3, #0]
 80102a0:	4413      	add	r3, r2
 80102a2:	b29a      	uxth	r2, r3
 80102a4:	4b22      	ldr	r3, [pc, #136]	@ (8010330 <tcp_free_acked_segments+0xec>)
 80102a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80102a8:	6978      	ldr	r0, [r7, #20]
 80102aa:	f7fe f9da 	bl	800e662 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d00c      	beq.n	80102d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d109      	bne.n	80102d2 <tcp_free_acked_segments+0x8e>
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d106      	bne.n	80102d2 <tcp_free_acked_segments+0x8e>
 80102c4:	4b17      	ldr	r3, [pc, #92]	@ (8010324 <tcp_free_acked_segments+0xe0>)
 80102c6:	f240 4261 	movw	r2, #1121	@ 0x461
 80102ca:	491a      	ldr	r1, [pc, #104]	@ (8010334 <tcp_free_acked_segments+0xf0>)
 80102cc:	4817      	ldr	r0, [pc, #92]	@ (801032c <tcp_free_acked_segments+0xe8>)
 80102ce:	f003 f90f 	bl	80134f0 <iprintf>
  while (seg_list != NULL &&
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d020      	beq.n	801031a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80102d8:	68bb      	ldr	r3, [r7, #8]
 80102da:	68db      	ldr	r3, [r3, #12]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f8 ffad 	bl	800923e <lwip_htonl>
 80102e4:	4604      	mov	r4, r0
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	891b      	ldrh	r3, [r3, #8]
 80102ea:	461d      	mov	r5, r3
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	68db      	ldr	r3, [r3, #12]
 80102f0:	899b      	ldrh	r3, [r3, #12]
 80102f2:	b29b      	uxth	r3, r3
 80102f4:	4618      	mov	r0, r3
 80102f6:	f7f8 ff8d 	bl	8009214 <lwip_htons>
 80102fa:	4603      	mov	r3, r0
 80102fc:	b2db      	uxtb	r3, r3
 80102fe:	f003 0303 	and.w	r3, r3, #3
 8010302:	2b00      	cmp	r3, #0
 8010304:	d001      	beq.n	801030a <tcp_free_acked_segments+0xc6>
 8010306:	2301      	movs	r3, #1
 8010308:	e000      	b.n	801030c <tcp_free_acked_segments+0xc8>
 801030a:	2300      	movs	r3, #0
 801030c:	442b      	add	r3, r5
 801030e:	18e2      	adds	r2, r4, r3
 8010310:	4b09      	ldr	r3, [pc, #36]	@ (8010338 <tcp_free_acked_segments+0xf4>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010316:	2b00      	cmp	r3, #0
 8010318:	dd9c      	ble.n	8010254 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801031a:	68bb      	ldr	r3, [r7, #8]
}
 801031c:	4618      	mov	r0, r3
 801031e:	3718      	adds	r7, #24
 8010320:	46bd      	mov	sp, r7
 8010322:	bdb0      	pop	{r4, r5, r7, pc}
 8010324:	08015e0c 	.word	0x08015e0c
 8010328:	0801611c 	.word	0x0801611c
 801032c:	08015e80 	.word	0x08015e80
 8010330:	240084bc 	.word	0x240084bc
 8010334:	08016144 	.word	0x08016144
 8010338:	240084b8 	.word	0x240084b8

0801033c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801033c:	b5b0      	push	{r4, r5, r7, lr}
 801033e:	b094      	sub	sp, #80	@ 0x50
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010344:	2300      	movs	r3, #0
 8010346:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2b00      	cmp	r3, #0
 801034c:	d106      	bne.n	801035c <tcp_receive+0x20>
 801034e:	4b91      	ldr	r3, [pc, #580]	@ (8010594 <tcp_receive+0x258>)
 8010350:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010354:	4990      	ldr	r1, [pc, #576]	@ (8010598 <tcp_receive+0x25c>)
 8010356:	4891      	ldr	r0, [pc, #580]	@ (801059c <tcp_receive+0x260>)
 8010358:	f003 f8ca 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	7d1b      	ldrb	r3, [r3, #20]
 8010360:	2b03      	cmp	r3, #3
 8010362:	d806      	bhi.n	8010372 <tcp_receive+0x36>
 8010364:	4b8b      	ldr	r3, [pc, #556]	@ (8010594 <tcp_receive+0x258>)
 8010366:	f240 427c 	movw	r2, #1148	@ 0x47c
 801036a:	498d      	ldr	r1, [pc, #564]	@ (80105a0 <tcp_receive+0x264>)
 801036c:	488b      	ldr	r0, [pc, #556]	@ (801059c <tcp_receive+0x260>)
 801036e:	f003 f8bf 	bl	80134f0 <iprintf>

  if (flags & TCP_ACK) {
 8010372:	4b8c      	ldr	r3, [pc, #560]	@ (80105a4 <tcp_receive+0x268>)
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	f003 0310 	and.w	r3, r3, #16
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 8264 	beq.w	8010848 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010386:	461a      	mov	r2, r3
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801038c:	4413      	add	r3, r2
 801038e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010394:	4b84      	ldr	r3, [pc, #528]	@ (80105a8 <tcp_receive+0x26c>)
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	1ad3      	subs	r3, r2, r3
 801039a:	2b00      	cmp	r3, #0
 801039c:	db1b      	blt.n	80103d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80103a2:	4b81      	ldr	r3, [pc, #516]	@ (80105a8 <tcp_receive+0x26c>)
 80103a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d106      	bne.n	80103b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80103ae:	4b7f      	ldr	r3, [pc, #508]	@ (80105ac <tcp_receive+0x270>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	1ad3      	subs	r3, r2, r3
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	db0e      	blt.n	80103d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80103bc:	4b7b      	ldr	r3, [pc, #492]	@ (80105ac <tcp_receive+0x270>)
 80103be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d125      	bne.n	8010410 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103c4:	4b7a      	ldr	r3, [pc, #488]	@ (80105b0 <tcp_receive+0x274>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	89db      	ldrh	r3, [r3, #14]
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d91c      	bls.n	8010410 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80103d6:	4b76      	ldr	r3, [pc, #472]	@ (80105b0 <tcp_receive+0x274>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	89db      	ldrh	r3, [r3, #14]
 80103dc:	b29a      	uxth	r2, r3
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80103f0:	429a      	cmp	r2, r3
 80103f2:	d205      	bcs.n	8010400 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010400:	4b69      	ldr	r3, [pc, #420]	@ (80105a8 <tcp_receive+0x26c>)
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010408:	4b68      	ldr	r3, [pc, #416]	@ (80105ac <tcp_receive+0x270>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010410:	4b66      	ldr	r3, [pc, #408]	@ (80105ac <tcp_receive+0x270>)
 8010412:	681a      	ldr	r2, [r3, #0]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010418:	1ad3      	subs	r3, r2, r3
 801041a:	2b00      	cmp	r3, #0
 801041c:	dc58      	bgt.n	80104d0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801041e:	4b65      	ldr	r3, [pc, #404]	@ (80105b4 <tcp_receive+0x278>)
 8010420:	881b      	ldrh	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d14b      	bne.n	80104be <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010430:	4413      	add	r3, r2
 8010432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010434:	429a      	cmp	r2, r3
 8010436:	d142      	bne.n	80104be <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801043e:	2b00      	cmp	r3, #0
 8010440:	db3d      	blt.n	80104be <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010446:	4b59      	ldr	r3, [pc, #356]	@ (80105ac <tcp_receive+0x270>)
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	429a      	cmp	r2, r3
 801044c:	d137      	bne.n	80104be <tcp_receive+0x182>
              found_dupack = 1;
 801044e:	2301      	movs	r3, #1
 8010450:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010458:	2bff      	cmp	r3, #255	@ 0xff
 801045a:	d007      	beq.n	801046c <tcp_receive+0x130>
                ++pcb->dupacks;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010462:	3301      	adds	r3, #1
 8010464:	b2da      	uxtb	r2, r3
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010472:	2b03      	cmp	r3, #3
 8010474:	d91b      	bls.n	80104ae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010480:	4413      	add	r3, r2
 8010482:	b29a      	uxth	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801048a:	429a      	cmp	r2, r3
 801048c:	d30a      	bcc.n	80104a4 <tcp_receive+0x168>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010498:	4413      	add	r3, r2
 801049a:	b29a      	uxth	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80104a2:	e004      	b.n	80104ae <tcp_receive+0x172>
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80104aa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80104b4:	2b02      	cmp	r3, #2
 80104b6:	d902      	bls.n	80104be <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	f001 fee7 	bl	801228c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80104be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	f040 8161 	bne.w	8010788 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80104ce:	e15b      	b.n	8010788 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80104d0:	4b36      	ldr	r3, [pc, #216]	@ (80105ac <tcp_receive+0x270>)
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80104d8:	1ad3      	subs	r3, r2, r3
 80104da:	3b01      	subs	r3, #1
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f2c0 814e 	blt.w	801077e <tcp_receive+0x442>
 80104e2:	4b32      	ldr	r3, [pc, #200]	@ (80105ac <tcp_receive+0x270>)
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80104ea:	1ad3      	subs	r3, r2, r3
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f300 8146 	bgt.w	801077e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	8b5b      	ldrh	r3, [r3, #26]
 80104f6:	f003 0304 	and.w	r3, r3, #4
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d010      	beq.n	8010520 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	8b5b      	ldrh	r3, [r3, #26]
 8010502:	f023 0304 	bic.w	r3, r3, #4
 8010506:	b29a      	uxth	r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2200      	movs	r2, #0
 8010524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801052e:	10db      	asrs	r3, r3, #3
 8010530:	b21b      	sxth	r3, r3
 8010532:	b29a      	uxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801053a:	b29b      	uxth	r3, r3
 801053c:	4413      	add	r3, r2
 801053e:	b29b      	uxth	r3, r3
 8010540:	b21a      	sxth	r2, r3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010548:	4b18      	ldr	r3, [pc, #96]	@ (80105ac <tcp_receive+0x270>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	b29a      	uxth	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010552:	b29b      	uxth	r3, r3
 8010554:	1ad3      	subs	r3, r2, r3
 8010556:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	2200      	movs	r2, #0
 801055c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8010560:	4b12      	ldr	r3, [pc, #72]	@ (80105ac <tcp_receive+0x270>)
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	7d1b      	ldrb	r3, [r3, #20]
 801056c:	2b03      	cmp	r3, #3
 801056e:	f240 8097 	bls.w	80106a0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801057e:	429a      	cmp	r2, r3
 8010580:	d245      	bcs.n	801060e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	8b5b      	ldrh	r3, [r3, #26]
 8010586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801058a:	2b00      	cmp	r3, #0
 801058c:	d014      	beq.n	80105b8 <tcp_receive+0x27c>
 801058e:	2301      	movs	r3, #1
 8010590:	e013      	b.n	80105ba <tcp_receive+0x27e>
 8010592:	bf00      	nop
 8010594:	08015e0c 	.word	0x08015e0c
 8010598:	08016164 	.word	0x08016164
 801059c:	08015e80 	.word	0x08015e80
 80105a0:	08016180 	.word	0x08016180
 80105a4:	240084c0 	.word	0x240084c0
 80105a8:	240084b4 	.word	0x240084b4
 80105ac:	240084b8 	.word	0x240084b8
 80105b0:	240084a4 	.word	0x240084a4
 80105b4:	240084be 	.word	0x240084be
 80105b8:	2302      	movs	r3, #2
 80105ba:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80105be:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80105c8:	fb12 f303 	smulbb	r3, r2, r3
 80105cc:	b29b      	uxth	r3, r3
 80105ce:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80105d0:	4293      	cmp	r3, r2
 80105d2:	bf28      	it	cs
 80105d4:	4613      	movcs	r3, r2
 80105d6:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105de:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80105e0:	4413      	add	r3, r2
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80105ea:	429a      	cmp	r2, r3
 80105ec:	d309      	bcc.n	8010602 <tcp_receive+0x2c6>
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80105f4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80105f6:	4413      	add	r3, r2
 80105f8:	b29a      	uxth	r2, r3
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010600:	e04e      	b.n	80106a0 <tcp_receive+0x364>
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010608:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801060c:	e048      	b.n	80106a0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010614:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8010616:	4413      	add	r3, r2
 8010618:	b29a      	uxth	r2, r3
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8010620:	429a      	cmp	r2, r3
 8010622:	d309      	bcc.n	8010638 <tcp_receive+0x2fc>
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801062a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801062c:	4413      	add	r3, r2
 801062e:	b29a      	uxth	r2, r3
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8010636:	e004      	b.n	8010642 <tcp_receive+0x306>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801063e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801064e:	429a      	cmp	r2, r3
 8010650:	d326      	bcc.n	80106a0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801065e:	1ad3      	subs	r3, r2, r3
 8010660:	b29a      	uxth	r2, r3
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010672:	4413      	add	r3, r2
 8010674:	b29a      	uxth	r2, r3
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801067c:	429a      	cmp	r2, r3
 801067e:	d30a      	bcc.n	8010696 <tcp_receive+0x35a>
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801068a:	4413      	add	r3, r2
 801068c:	b29a      	uxth	r2, r3
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010694:	e004      	b.n	80106a0 <tcp_receive+0x364>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801069c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106a8:	4a98      	ldr	r2, [pc, #608]	@ (801090c <tcp_receive+0x5d0>)
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f7ff fdca 	bl	8010244 <tcp_free_acked_segments>
 80106b0:	4602      	mov	r2, r0
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106be:	4a94      	ldr	r2, [pc, #592]	@ (8010910 <tcp_receive+0x5d4>)
 80106c0:	6878      	ldr	r0, [r7, #4]
 80106c2:	f7ff fdbf 	bl	8010244 <tcp_free_acked_segments>
 80106c6:	4602      	mov	r2, r0
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d104      	bne.n	80106de <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106da:	861a      	strh	r2, [r3, #48]	@ 0x30
 80106dc:	e002      	b.n	80106e4 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2200      	movs	r2, #0
 80106e2:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d103      	bne.n	80106fa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8010700:	4b84      	ldr	r3, [pc, #528]	@ (8010914 <tcp_receive+0x5d8>)
 8010702:	881b      	ldrh	r3, [r3, #0]
 8010704:	4413      	add	r3, r2
 8010706:	b29a      	uxth	r2, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	8b5b      	ldrh	r3, [r3, #26]
 8010712:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010716:	2b00      	cmp	r3, #0
 8010718:	d035      	beq.n	8010786 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801071e:	2b00      	cmp	r3, #0
 8010720:	d118      	bne.n	8010754 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010726:	2b00      	cmp	r3, #0
 8010728:	d00c      	beq.n	8010744 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	4618      	mov	r0, r3
 8010738:	f7f8 fd81 	bl	800923e <lwip_htonl>
 801073c:	4603      	mov	r3, r0
 801073e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010740:	2b00      	cmp	r3, #0
 8010742:	dc20      	bgt.n	8010786 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	8b5b      	ldrh	r3, [r3, #26]
 8010748:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801074c:	b29a      	uxth	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010752:	e018      	b.n	8010786 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801075c:	68db      	ldr	r3, [r3, #12]
 801075e:	685b      	ldr	r3, [r3, #4]
 8010760:	4618      	mov	r0, r3
 8010762:	f7f8 fd6c 	bl	800923e <lwip_htonl>
 8010766:	4603      	mov	r3, r0
 8010768:	1ae3      	subs	r3, r4, r3
 801076a:	2b00      	cmp	r3, #0
 801076c:	dc0b      	bgt.n	8010786 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	8b5b      	ldrh	r3, [r3, #26]
 8010772:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8010776:	b29a      	uxth	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801077c:	e003      	b.n	8010786 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f001 ff70 	bl	8012664 <tcp_send_empty_ack>
 8010784:	e000      	b.n	8010788 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010786:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801078c:	2b00      	cmp	r3, #0
 801078e:	d05b      	beq.n	8010848 <tcp_receive+0x50c>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010794:	4b60      	ldr	r3, [pc, #384]	@ (8010918 <tcp_receive+0x5dc>)
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	1ad3      	subs	r3, r2, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	da54      	bge.n	8010848 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801079e:	4b5f      	ldr	r3, [pc, #380]	@ (801091c <tcp_receive+0x5e0>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	b29a      	uxth	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107a8:	b29b      	uxth	r3, r3
 80107aa:	1ad3      	subs	r3, r2, r3
 80107ac:	b29b      	uxth	r3, r3
 80107ae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80107b2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80107bc:	10db      	asrs	r3, r3, #3
 80107be:	b21b      	sxth	r3, r3
 80107c0:	b29b      	uxth	r3, r3
 80107c2:	1ad3      	subs	r3, r2, r3
 80107c4:	b29b      	uxth	r3, r3
 80107c6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80107d6:	4413      	add	r3, r2
 80107d8:	b29b      	uxth	r3, r3
 80107da:	b21a      	sxth	r2, r3
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 80107e0:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	da05      	bge.n	80107f4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80107e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80107ec:	425b      	negs	r3, r3
 80107ee:	b29b      	uxth	r3, r3
 80107f0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80107f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80107fe:	109b      	asrs	r3, r3, #2
 8010800:	b21b      	sxth	r3, r3
 8010802:	b29b      	uxth	r3, r3
 8010804:	1ad3      	subs	r3, r2, r3
 8010806:	b29b      	uxth	r3, r3
 8010808:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010812:	b29a      	uxth	r2, r3
 8010814:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8010818:	4413      	add	r3, r2
 801081a:	b29b      	uxth	r3, r3
 801081c:	b21a      	sxth	r2, r3
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8010828:	10db      	asrs	r3, r3, #3
 801082a:	b21b      	sxth	r3, r3
 801082c:	b29a      	uxth	r2, r3
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8010834:	b29b      	uxth	r3, r3
 8010836:	4413      	add	r3, r2
 8010838:	b29b      	uxth	r3, r3
 801083a:	b21a      	sxth	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	2200      	movs	r2, #0
 8010846:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010848:	4b35      	ldr	r3, [pc, #212]	@ (8010920 <tcp_receive+0x5e4>)
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	2b00      	cmp	r3, #0
 801084e:	f000 84df 	beq.w	8011210 <tcp_receive+0xed4>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7d1b      	ldrb	r3, [r3, #20]
 8010856:	2b06      	cmp	r3, #6
 8010858:	f200 84da 	bhi.w	8011210 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010860:	4b30      	ldr	r3, [pc, #192]	@ (8010924 <tcp_receive+0x5e8>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	1ad3      	subs	r3, r2, r3
 8010866:	3b01      	subs	r3, #1
 8010868:	2b00      	cmp	r3, #0
 801086a:	f2c0 808f 	blt.w	801098c <tcp_receive+0x650>
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010872:	4b2b      	ldr	r3, [pc, #172]	@ (8010920 <tcp_receive+0x5e4>)
 8010874:	881b      	ldrh	r3, [r3, #0]
 8010876:	4619      	mov	r1, r3
 8010878:	4b2a      	ldr	r3, [pc, #168]	@ (8010924 <tcp_receive+0x5e8>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	440b      	add	r3, r1
 801087e:	1ad3      	subs	r3, r2, r3
 8010880:	3301      	adds	r3, #1
 8010882:	2b00      	cmp	r3, #0
 8010884:	f300 8082 	bgt.w	801098c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010888:	4b27      	ldr	r3, [pc, #156]	@ (8010928 <tcp_receive+0x5ec>)
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010892:	4b24      	ldr	r3, [pc, #144]	@ (8010924 <tcp_receive+0x5e8>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	1ad3      	subs	r3, r2, r3
 8010898:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801089a:	4b23      	ldr	r3, [pc, #140]	@ (8010928 <tcp_receive+0x5ec>)
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d106      	bne.n	80108b0 <tcp_receive+0x574>
 80108a2:	4b22      	ldr	r3, [pc, #136]	@ (801092c <tcp_receive+0x5f0>)
 80108a4:	f240 5294 	movw	r2, #1428	@ 0x594
 80108a8:	4921      	ldr	r1, [pc, #132]	@ (8010930 <tcp_receive+0x5f4>)
 80108aa:	4822      	ldr	r0, [pc, #136]	@ (8010934 <tcp_receive+0x5f8>)
 80108ac:	f002 fe20 	bl	80134f0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80108b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d906      	bls.n	80108c8 <tcp_receive+0x58c>
 80108ba:	4b1c      	ldr	r3, [pc, #112]	@ (801092c <tcp_receive+0x5f0>)
 80108bc:	f240 5295 	movw	r2, #1429	@ 0x595
 80108c0:	491d      	ldr	r1, [pc, #116]	@ (8010938 <tcp_receive+0x5fc>)
 80108c2:	481c      	ldr	r0, [pc, #112]	@ (8010934 <tcp_receive+0x5f8>)
 80108c4:	f002 fe14 	bl	80134f0 <iprintf>
      off = (u16_t)off32;
 80108c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80108ce:	4b16      	ldr	r3, [pc, #88]	@ (8010928 <tcp_receive+0x5ec>)
 80108d0:	685b      	ldr	r3, [r3, #4]
 80108d2:	891b      	ldrh	r3, [r3, #8]
 80108d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80108d8:	429a      	cmp	r2, r3
 80108da:	d906      	bls.n	80108ea <tcp_receive+0x5ae>
 80108dc:	4b13      	ldr	r3, [pc, #76]	@ (801092c <tcp_receive+0x5f0>)
 80108de:	f240 5297 	movw	r2, #1431	@ 0x597
 80108e2:	4916      	ldr	r1, [pc, #88]	@ (801093c <tcp_receive+0x600>)
 80108e4:	4813      	ldr	r0, [pc, #76]	@ (8010934 <tcp_receive+0x5f8>)
 80108e6:	f002 fe03 	bl	80134f0 <iprintf>
      inseg.len -= off;
 80108ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010928 <tcp_receive+0x5ec>)
 80108ec:	891a      	ldrh	r2, [r3, #8]
 80108ee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80108f2:	1ad3      	subs	r3, r2, r3
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	4b0c      	ldr	r3, [pc, #48]	@ (8010928 <tcp_receive+0x5ec>)
 80108f8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80108fa:	4b0b      	ldr	r3, [pc, #44]	@ (8010928 <tcp_receive+0x5ec>)
 80108fc:	685b      	ldr	r3, [r3, #4]
 80108fe:	891a      	ldrh	r2, [r3, #8]
 8010900:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8010908:	e02a      	b.n	8010960 <tcp_receive+0x624>
 801090a:	bf00      	nop
 801090c:	0801619c 	.word	0x0801619c
 8010910:	080161a4 	.word	0x080161a4
 8010914:	240084bc 	.word	0x240084bc
 8010918:	240084b8 	.word	0x240084b8
 801091c:	2400847c 	.word	0x2400847c
 8010920:	240084be 	.word	0x240084be
 8010924:	240084b4 	.word	0x240084b4
 8010928:	24008494 	.word	0x24008494
 801092c:	08015e0c 	.word	0x08015e0c
 8010930:	080161ac 	.word	0x080161ac
 8010934:	08015e80 	.word	0x08015e80
 8010938:	080161bc 	.word	0x080161bc
 801093c:	080161cc 	.word	0x080161cc
        off -= p->len;
 8010940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010942:	895b      	ldrh	r3, [r3, #10]
 8010944:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010948:	1ad3      	subs	r3, r2, r3
 801094a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801094e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010950:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010952:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010956:	2200      	movs	r2, #0
 8010958:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801095a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8010960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010962:	895b      	ldrh	r3, [r3, #10]
 8010964:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8010968:	429a      	cmp	r2, r3
 801096a:	d8e9      	bhi.n	8010940 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801096c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8010970:	4619      	mov	r1, r3
 8010972:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8010974:	f7fc fa7c 	bl	800ce70 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801097c:	4a90      	ldr	r2, [pc, #576]	@ (8010bc0 <tcp_receive+0x884>)
 801097e:	6013      	str	r3, [r2, #0]
 8010980:	4b90      	ldr	r3, [pc, #576]	@ (8010bc4 <tcp_receive+0x888>)
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	4a8e      	ldr	r2, [pc, #568]	@ (8010bc0 <tcp_receive+0x884>)
 8010986:	6812      	ldr	r2, [r2, #0]
 8010988:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801098a:	e00d      	b.n	80109a8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801098c:	4b8c      	ldr	r3, [pc, #560]	@ (8010bc0 <tcp_receive+0x884>)
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010994:	1ad3      	subs	r3, r2, r3
 8010996:	2b00      	cmp	r3, #0
 8010998:	da06      	bge.n	80109a8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	8b5b      	ldrh	r3, [r3, #26]
 801099e:	f043 0302 	orr.w	r3, r3, #2
 80109a2:	b29a      	uxth	r2, r3
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80109a8:	4b85      	ldr	r3, [pc, #532]	@ (8010bc0 <tcp_receive+0x884>)
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f2c0 8427 	blt.w	8011206 <tcp_receive+0xeca>
 80109b8:	4b81      	ldr	r3, [pc, #516]	@ (8010bc0 <tcp_receive+0x884>)
 80109ba:	681a      	ldr	r2, [r3, #0]
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109c0:	6879      	ldr	r1, [r7, #4]
 80109c2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80109c4:	440b      	add	r3, r1
 80109c6:	1ad3      	subs	r3, r2, r3
 80109c8:	3301      	adds	r3, #1
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	f300 841b 	bgt.w	8011206 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80109d4:	4b7a      	ldr	r3, [pc, #488]	@ (8010bc0 <tcp_receive+0x884>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	429a      	cmp	r2, r3
 80109da:	f040 8298 	bne.w	8010f0e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80109de:	4b79      	ldr	r3, [pc, #484]	@ (8010bc4 <tcp_receive+0x888>)
 80109e0:	891c      	ldrh	r4, [r3, #8]
 80109e2:	4b78      	ldr	r3, [pc, #480]	@ (8010bc4 <tcp_receive+0x888>)
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	899b      	ldrh	r3, [r3, #12]
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7f8 fc12 	bl	8009214 <lwip_htons>
 80109f0:	4603      	mov	r3, r0
 80109f2:	b2db      	uxtb	r3, r3
 80109f4:	f003 0303 	and.w	r3, r3, #3
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <tcp_receive+0x6c4>
 80109fc:	2301      	movs	r3, #1
 80109fe:	e000      	b.n	8010a02 <tcp_receive+0x6c6>
 8010a00:	2300      	movs	r3, #0
 8010a02:	4423      	add	r3, r4
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	4b70      	ldr	r3, [pc, #448]	@ (8010bc8 <tcp_receive+0x88c>)
 8010a08:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010a0e:	4b6e      	ldr	r3, [pc, #440]	@ (8010bc8 <tcp_receive+0x88c>)
 8010a10:	881b      	ldrh	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d274      	bcs.n	8010b00 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010a16:	4b6b      	ldr	r3, [pc, #428]	@ (8010bc4 <tcp_receive+0x888>)
 8010a18:	68db      	ldr	r3, [r3, #12]
 8010a1a:	899b      	ldrh	r3, [r3, #12]
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f7f8 fbf8 	bl	8009214 <lwip_htons>
 8010a24:	4603      	mov	r3, r0
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	f003 0301 	and.w	r3, r3, #1
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d01e      	beq.n	8010a6e <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010a30:	4b64      	ldr	r3, [pc, #400]	@ (8010bc4 <tcp_receive+0x888>)
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	899b      	ldrh	r3, [r3, #12]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	b21b      	sxth	r3, r3
 8010a3a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010a3e:	b21c      	sxth	r4, r3
 8010a40:	4b60      	ldr	r3, [pc, #384]	@ (8010bc4 <tcp_receive+0x888>)
 8010a42:	68db      	ldr	r3, [r3, #12]
 8010a44:	899b      	ldrh	r3, [r3, #12]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7f8 fbe3 	bl	8009214 <lwip_htons>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	b2db      	uxtb	r3, r3
 8010a52:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8010a56:	b29b      	uxth	r3, r3
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7f8 fbdb 	bl	8009214 <lwip_htons>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	b21b      	sxth	r3, r3
 8010a62:	4323      	orrs	r3, r4
 8010a64:	b21a      	sxth	r2, r3
 8010a66:	4b57      	ldr	r3, [pc, #348]	@ (8010bc4 <tcp_receive+0x888>)
 8010a68:	68db      	ldr	r3, [r3, #12]
 8010a6a:	b292      	uxth	r2, r2
 8010a6c:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010a72:	4b54      	ldr	r3, [pc, #336]	@ (8010bc4 <tcp_receive+0x888>)
 8010a74:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010a76:	4b53      	ldr	r3, [pc, #332]	@ (8010bc4 <tcp_receive+0x888>)
 8010a78:	68db      	ldr	r3, [r3, #12]
 8010a7a:	899b      	ldrh	r3, [r3, #12]
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7f8 fbc8 	bl	8009214 <lwip_htons>
 8010a84:	4603      	mov	r3, r0
 8010a86:	b2db      	uxtb	r3, r3
 8010a88:	f003 0302 	and.w	r3, r3, #2
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d005      	beq.n	8010a9c <tcp_receive+0x760>
            inseg.len -= 1;
 8010a90:	4b4c      	ldr	r3, [pc, #304]	@ (8010bc4 <tcp_receive+0x888>)
 8010a92:	891b      	ldrh	r3, [r3, #8]
 8010a94:	3b01      	subs	r3, #1
 8010a96:	b29a      	uxth	r2, r3
 8010a98:	4b4a      	ldr	r3, [pc, #296]	@ (8010bc4 <tcp_receive+0x888>)
 8010a9a:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010a9c:	4b49      	ldr	r3, [pc, #292]	@ (8010bc4 <tcp_receive+0x888>)
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	4a48      	ldr	r2, [pc, #288]	@ (8010bc4 <tcp_receive+0x888>)
 8010aa2:	8912      	ldrh	r2, [r2, #8]
 8010aa4:	4611      	mov	r1, r2
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fc f8e2 	bl	800cc70 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010aac:	4b45      	ldr	r3, [pc, #276]	@ (8010bc4 <tcp_receive+0x888>)
 8010aae:	891c      	ldrh	r4, [r3, #8]
 8010ab0:	4b44      	ldr	r3, [pc, #272]	@ (8010bc4 <tcp_receive+0x888>)
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	899b      	ldrh	r3, [r3, #12]
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7f8 fbab 	bl	8009214 <lwip_htons>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	b2db      	uxtb	r3, r3
 8010ac2:	f003 0303 	and.w	r3, r3, #3
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d001      	beq.n	8010ace <tcp_receive+0x792>
 8010aca:	2301      	movs	r3, #1
 8010acc:	e000      	b.n	8010ad0 <tcp_receive+0x794>
 8010ace:	2300      	movs	r3, #0
 8010ad0:	4423      	add	r3, r4
 8010ad2:	b29a      	uxth	r2, r3
 8010ad4:	4b3c      	ldr	r3, [pc, #240]	@ (8010bc8 <tcp_receive+0x88c>)
 8010ad6:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8010bc8 <tcp_receive+0x88c>)
 8010ada:	881b      	ldrh	r3, [r3, #0]
 8010adc:	461a      	mov	r2, r3
 8010ade:	4b38      	ldr	r3, [pc, #224]	@ (8010bc0 <tcp_receive+0x884>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	441a      	add	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ae8:	6879      	ldr	r1, [r7, #4]
 8010aea:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010aec:	440b      	add	r3, r1
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d006      	beq.n	8010b00 <tcp_receive+0x7c4>
 8010af2:	4b36      	ldr	r3, [pc, #216]	@ (8010bcc <tcp_receive+0x890>)
 8010af4:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8010af8:	4935      	ldr	r1, [pc, #212]	@ (8010bd0 <tcp_receive+0x894>)
 8010afa:	4836      	ldr	r0, [pc, #216]	@ (8010bd4 <tcp_receive+0x898>)
 8010afc:	f002 fcf8 	bl	80134f0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	f000 80e6 	beq.w	8010cd6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8010bc4 <tcp_receive+0x888>)
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	899b      	ldrh	r3, [r3, #12]
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	4618      	mov	r0, r3
 8010b14:	f7f8 fb7e 	bl	8009214 <lwip_htons>
 8010b18:	4603      	mov	r3, r0
 8010b1a:	b2db      	uxtb	r3, r3
 8010b1c:	f003 0301 	and.w	r3, r3, #1
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d010      	beq.n	8010b46 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010b24:	e00a      	b.n	8010b3c <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b2a:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b30:	681a      	ldr	r2, [r3, #0]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8010b36:	68f8      	ldr	r0, [r7, #12]
 8010b38:	f7fd fd93 	bl	800e662 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1f0      	bne.n	8010b26 <tcp_receive+0x7ea>
 8010b44:	e0c7      	b.n	8010cd6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010b4c:	e051      	b.n	8010bf2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010b50:	68db      	ldr	r3, [r3, #12]
 8010b52:	899b      	ldrh	r3, [r3, #12]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	4618      	mov	r0, r3
 8010b58:	f7f8 fb5c 	bl	8009214 <lwip_htons>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	b2db      	uxtb	r3, r3
 8010b60:	f003 0301 	and.w	r3, r3, #1
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d03c      	beq.n	8010be2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010b68:	4b16      	ldr	r3, [pc, #88]	@ (8010bc4 <tcp_receive+0x888>)
 8010b6a:	68db      	ldr	r3, [r3, #12]
 8010b6c:	899b      	ldrh	r3, [r3, #12]
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7f8 fb4f 	bl	8009214 <lwip_htons>
 8010b76:	4603      	mov	r3, r0
 8010b78:	b2db      	uxtb	r3, r3
 8010b7a:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d12f      	bne.n	8010be2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010b82:	4b10      	ldr	r3, [pc, #64]	@ (8010bc4 <tcp_receive+0x888>)
 8010b84:	68db      	ldr	r3, [r3, #12]
 8010b86:	899b      	ldrh	r3, [r3, #12]
 8010b88:	b29c      	uxth	r4, r3
 8010b8a:	2001      	movs	r0, #1
 8010b8c:	f7f8 fb42 	bl	8009214 <lwip_htons>
 8010b90:	4603      	mov	r3, r0
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b0b      	ldr	r3, [pc, #44]	@ (8010bc4 <tcp_receive+0x888>)
 8010b96:	68db      	ldr	r3, [r3, #12]
 8010b98:	4322      	orrs	r2, r4
 8010b9a:	b292      	uxth	r2, r2
 8010b9c:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010b9e:	4b09      	ldr	r3, [pc, #36]	@ (8010bc4 <tcp_receive+0x888>)
 8010ba0:	891c      	ldrh	r4, [r3, #8]
 8010ba2:	4b08      	ldr	r3, [pc, #32]	@ (8010bc4 <tcp_receive+0x888>)
 8010ba4:	68db      	ldr	r3, [r3, #12]
 8010ba6:	899b      	ldrh	r3, [r3, #12]
 8010ba8:	b29b      	uxth	r3, r3
 8010baa:	4618      	mov	r0, r3
 8010bac:	f7f8 fb32 	bl	8009214 <lwip_htons>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	f003 0303 	and.w	r3, r3, #3
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d00d      	beq.n	8010bd8 <tcp_receive+0x89c>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	e00c      	b.n	8010bda <tcp_receive+0x89e>
 8010bc0:	240084b4 	.word	0x240084b4
 8010bc4:	24008494 	.word	0x24008494
 8010bc8:	240084be 	.word	0x240084be
 8010bcc:	08015e0c 	.word	0x08015e0c
 8010bd0:	080161dc 	.word	0x080161dc
 8010bd4:	08015e80 	.word	0x08015e80
 8010bd8:	2300      	movs	r3, #0
 8010bda:	4423      	add	r3, r4
 8010bdc:	b29a      	uxth	r2, r3
 8010bde:	4b98      	ldr	r3, [pc, #608]	@ (8010e40 <tcp_receive+0xb04>)
 8010be0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010be4:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8010bec:	6938      	ldr	r0, [r7, #16]
 8010bee:	f7fd fd38 	bl	800e662 <tcp_seg_free>
            while (next &&
 8010bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00e      	beq.n	8010c16 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010bf8:	4b91      	ldr	r3, [pc, #580]	@ (8010e40 <tcp_receive+0xb04>)
 8010bfa:	881b      	ldrh	r3, [r3, #0]
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	4b91      	ldr	r3, [pc, #580]	@ (8010e44 <tcp_receive+0xb08>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	441a      	add	r2, r3
 8010c04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c06:	68db      	ldr	r3, [r3, #12]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010c0c:	8909      	ldrh	r1, [r1, #8]
 8010c0e:	440b      	add	r3, r1
 8010c10:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	da9b      	bge.n	8010b4e <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d059      	beq.n	8010cd0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8010c1c:	4b88      	ldr	r3, [pc, #544]	@ (8010e40 <tcp_receive+0xb04>)
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	461a      	mov	r2, r3
 8010c22:	4b88      	ldr	r3, [pc, #544]	@ (8010e44 <tcp_receive+0xb08>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	441a      	add	r2, r3
 8010c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c2a:	68db      	ldr	r3, [r3, #12]
 8010c2c:	685b      	ldr	r3, [r3, #4]
 8010c2e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	dd4d      	ble.n	8010cd0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	b29a      	uxth	r2, r3
 8010c3c:	4b81      	ldr	r3, [pc, #516]	@ (8010e44 <tcp_receive+0xb08>)
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	b29b      	uxth	r3, r3
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	b29a      	uxth	r2, r3
 8010c46:	4b80      	ldr	r3, [pc, #512]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c48:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c4c:	68db      	ldr	r3, [r3, #12]
 8010c4e:	899b      	ldrh	r3, [r3, #12]
 8010c50:	b29b      	uxth	r3, r3
 8010c52:	4618      	mov	r0, r3
 8010c54:	f7f8 fade 	bl	8009214 <lwip_htons>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	b2db      	uxtb	r3, r3
 8010c5c:	f003 0302 	and.w	r3, r3, #2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d005      	beq.n	8010c70 <tcp_receive+0x934>
                inseg.len -= 1;
 8010c64:	4b78      	ldr	r3, [pc, #480]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c66:	891b      	ldrh	r3, [r3, #8]
 8010c68:	3b01      	subs	r3, #1
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	4b76      	ldr	r3, [pc, #472]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c6e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010c70:	4b75      	ldr	r3, [pc, #468]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	4a74      	ldr	r2, [pc, #464]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c76:	8912      	ldrh	r2, [r2, #8]
 8010c78:	4611      	mov	r1, r2
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	f7fb fff8 	bl	800cc70 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010c80:	4b71      	ldr	r3, [pc, #452]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c82:	891c      	ldrh	r4, [r3, #8]
 8010c84:	4b70      	ldr	r3, [pc, #448]	@ (8010e48 <tcp_receive+0xb0c>)
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	899b      	ldrh	r3, [r3, #12]
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f8 fac1 	bl	8009214 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	f003 0303 	and.w	r3, r3, #3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d001      	beq.n	8010ca2 <tcp_receive+0x966>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	e000      	b.n	8010ca4 <tcp_receive+0x968>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	4423      	add	r3, r4
 8010ca6:	b29a      	uxth	r2, r3
 8010ca8:	4b65      	ldr	r3, [pc, #404]	@ (8010e40 <tcp_receive+0xb04>)
 8010caa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010cac:	4b64      	ldr	r3, [pc, #400]	@ (8010e40 <tcp_receive+0xb04>)
 8010cae:	881b      	ldrh	r3, [r3, #0]
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	4b64      	ldr	r3, [pc, #400]	@ (8010e44 <tcp_receive+0xb08>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	441a      	add	r2, r3
 8010cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cba:	68db      	ldr	r3, [r3, #12]
 8010cbc:	685b      	ldr	r3, [r3, #4]
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d006      	beq.n	8010cd0 <tcp_receive+0x994>
 8010cc2:	4b62      	ldr	r3, [pc, #392]	@ (8010e4c <tcp_receive+0xb10>)
 8010cc4:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8010cc8:	4961      	ldr	r1, [pc, #388]	@ (8010e50 <tcp_receive+0xb14>)
 8010cca:	4862      	ldr	r0, [pc, #392]	@ (8010e54 <tcp_receive+0xb18>)
 8010ccc:	f002 fc10 	bl	80134f0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010cd4:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010cd6:	4b5a      	ldr	r3, [pc, #360]	@ (8010e40 <tcp_receive+0xb04>)
 8010cd8:	881b      	ldrh	r3, [r3, #0]
 8010cda:	461a      	mov	r2, r3
 8010cdc:	4b59      	ldr	r3, [pc, #356]	@ (8010e44 <tcp_receive+0xb08>)
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	441a      	add	r2, r3
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010cea:	4b55      	ldr	r3, [pc, #340]	@ (8010e40 <tcp_receive+0xb04>)
 8010cec:	881b      	ldrh	r3, [r3, #0]
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	d206      	bcs.n	8010d00 <tcp_receive+0x9c4>
 8010cf2:	4b56      	ldr	r3, [pc, #344]	@ (8010e4c <tcp_receive+0xb10>)
 8010cf4:	f240 6207 	movw	r2, #1543	@ 0x607
 8010cf8:	4957      	ldr	r1, [pc, #348]	@ (8010e58 <tcp_receive+0xb1c>)
 8010cfa:	4856      	ldr	r0, [pc, #344]	@ (8010e54 <tcp_receive+0xb18>)
 8010cfc:	f002 fbf8 	bl	80134f0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010d04:	4b4e      	ldr	r3, [pc, #312]	@ (8010e40 <tcp_receive+0xb04>)
 8010d06:	881b      	ldrh	r3, [r3, #0]
 8010d08:	1ad3      	subs	r3, r2, r3
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7fc ffc5 	bl	800dca0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010d16:	4b4c      	ldr	r3, [pc, #304]	@ (8010e48 <tcp_receive+0xb0c>)
 8010d18:	685b      	ldr	r3, [r3, #4]
 8010d1a:	891b      	ldrh	r3, [r3, #8]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d006      	beq.n	8010d2e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8010d20:	4b49      	ldr	r3, [pc, #292]	@ (8010e48 <tcp_receive+0xb0c>)
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	4a4d      	ldr	r2, [pc, #308]	@ (8010e5c <tcp_receive+0xb20>)
 8010d26:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010d28:	4b47      	ldr	r3, [pc, #284]	@ (8010e48 <tcp_receive+0xb0c>)
 8010d2a:	2200      	movs	r2, #0
 8010d2c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010d2e:	4b46      	ldr	r3, [pc, #280]	@ (8010e48 <tcp_receive+0xb0c>)
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	899b      	ldrh	r3, [r3, #12]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	4618      	mov	r0, r3
 8010d38:	f7f8 fa6c 	bl	8009214 <lwip_htons>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	b2db      	uxtb	r3, r3
 8010d40:	f003 0301 	and.w	r3, r3, #1
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	f000 80b8 	beq.w	8010eba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010d4a:	4b45      	ldr	r3, [pc, #276]	@ (8010e60 <tcp_receive+0xb24>)
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	f043 0320 	orr.w	r3, r3, #32
 8010d52:	b2da      	uxtb	r2, r3
 8010d54:	4b42      	ldr	r3, [pc, #264]	@ (8010e60 <tcp_receive+0xb24>)
 8010d56:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010d58:	e0af      	b.n	8010eba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d5e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d64:	68db      	ldr	r3, [r3, #12]
 8010d66:	685b      	ldr	r3, [r3, #4]
 8010d68:	4a36      	ldr	r2, [pc, #216]	@ (8010e44 <tcp_receive+0xb08>)
 8010d6a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	891b      	ldrh	r3, [r3, #8]
 8010d70:	461c      	mov	r4, r3
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	68db      	ldr	r3, [r3, #12]
 8010d76:	899b      	ldrh	r3, [r3, #12]
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7f8 fa4a 	bl	8009214 <lwip_htons>
 8010d80:	4603      	mov	r3, r0
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 0303 	and.w	r3, r3, #3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d001      	beq.n	8010d90 <tcp_receive+0xa54>
 8010d8c:	2301      	movs	r3, #1
 8010d8e:	e000      	b.n	8010d92 <tcp_receive+0xa56>
 8010d90:	2300      	movs	r3, #0
 8010d92:	191a      	adds	r2, r3, r4
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d98:	441a      	add	r2, r3
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8010da2:	461c      	mov	r4, r3
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	891b      	ldrh	r3, [r3, #8]
 8010da8:	461d      	mov	r5, r3
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	68db      	ldr	r3, [r3, #12]
 8010dae:	899b      	ldrh	r3, [r3, #12]
 8010db0:	b29b      	uxth	r3, r3
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7f8 fa2e 	bl	8009214 <lwip_htons>
 8010db8:	4603      	mov	r3, r0
 8010dba:	b2db      	uxtb	r3, r3
 8010dbc:	f003 0303 	and.w	r3, r3, #3
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <tcp_receive+0xa8c>
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	e000      	b.n	8010dca <tcp_receive+0xa8e>
 8010dc8:	2300      	movs	r3, #0
 8010dca:	442b      	add	r3, r5
 8010dcc:	429c      	cmp	r4, r3
 8010dce:	d206      	bcs.n	8010dde <tcp_receive+0xaa2>
 8010dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8010e4c <tcp_receive+0xb10>)
 8010dd2:	f240 622b 	movw	r2, #1579	@ 0x62b
 8010dd6:	4923      	ldr	r1, [pc, #140]	@ (8010e64 <tcp_receive+0xb28>)
 8010dd8:	481e      	ldr	r0, [pc, #120]	@ (8010e54 <tcp_receive+0xb18>)
 8010dda:	f002 fb89 	bl	80134f0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	891b      	ldrh	r3, [r3, #8]
 8010de2:	461c      	mov	r4, r3
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	899b      	ldrh	r3, [r3, #12]
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f8 fa11 	bl	8009214 <lwip_htons>
 8010df2:	4603      	mov	r3, r0
 8010df4:	b2db      	uxtb	r3, r3
 8010df6:	f003 0303 	and.w	r3, r3, #3
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d001      	beq.n	8010e02 <tcp_receive+0xac6>
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e000      	b.n	8010e04 <tcp_receive+0xac8>
 8010e02:	2300      	movs	r3, #0
 8010e04:	1919      	adds	r1, r3, r4
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8010e0a:	b28b      	uxth	r3, r1
 8010e0c:	1ad3      	subs	r3, r2, r3
 8010e0e:	b29a      	uxth	r2, r3
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7fc ff43 	bl	800dca0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	685b      	ldr	r3, [r3, #4]
 8010e1e:	891b      	ldrh	r3, [r3, #8]
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d028      	beq.n	8010e76 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010e24:	4b0d      	ldr	r3, [pc, #52]	@ (8010e5c <tcp_receive+0xb20>)
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d01d      	beq.n	8010e68 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8010e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8010e5c <tcp_receive+0xb20>)
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	4619      	mov	r1, r3
 8010e36:	4610      	mov	r0, r2
 8010e38:	f7fc f96e 	bl	800d118 <pbuf_cat>
 8010e3c:	e018      	b.n	8010e70 <tcp_receive+0xb34>
 8010e3e:	bf00      	nop
 8010e40:	240084be 	.word	0x240084be
 8010e44:	240084b4 	.word	0x240084b4
 8010e48:	24008494 	.word	0x24008494
 8010e4c:	08015e0c 	.word	0x08015e0c
 8010e50:	08016214 	.word	0x08016214
 8010e54:	08015e80 	.word	0x08015e80
 8010e58:	08016250 	.word	0x08016250
 8010e5c:	240084c4 	.word	0x240084c4
 8010e60:	240084c1 	.word	0x240084c1
 8010e64:	08016270 	.word	0x08016270
            } else {
              recv_data = cseg->p;
 8010e68:	68bb      	ldr	r3, [r7, #8]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	4a70      	ldr	r2, [pc, #448]	@ (8011030 <tcp_receive+0xcf4>)
 8010e6e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2200      	movs	r2, #0
 8010e74:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010e76:	68bb      	ldr	r3, [r7, #8]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	899b      	ldrh	r3, [r3, #12]
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7f8 f9c8 	bl	8009214 <lwip_htons>
 8010e84:	4603      	mov	r3, r0
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	f003 0301 	and.w	r3, r3, #1
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00d      	beq.n	8010eac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010e90:	4b68      	ldr	r3, [pc, #416]	@ (8011034 <tcp_receive+0xcf8>)
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	f043 0320 	orr.w	r3, r3, #32
 8010e98:	b2da      	uxtb	r2, r3
 8010e9a:	4b66      	ldr	r3, [pc, #408]	@ (8011034 <tcp_receive+0xcf8>)
 8010e9c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	7d1b      	ldrb	r3, [r3, #20]
 8010ea2:	2b04      	cmp	r3, #4
 8010ea4:	d102      	bne.n	8010eac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	2207      	movs	r2, #7
 8010eaa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	681a      	ldr	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8010eb4:	68b8      	ldr	r0, [r7, #8]
 8010eb6:	f7fd fbd4 	bl	800e662 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d008      	beq.n	8010ed4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	685a      	ldr	r2, [r3, #4]
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	f43f af43 	beq.w	8010d5a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	8b5b      	ldrh	r3, [r3, #26]
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d00e      	beq.n	8010efe <tcp_receive+0xbc2>
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	8b5b      	ldrh	r3, [r3, #26]
 8010ee4:	f023 0301 	bic.w	r3, r3, #1
 8010ee8:	b29a      	uxth	r2, r3
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	835a      	strh	r2, [r3, #26]
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	8b5b      	ldrh	r3, [r3, #26]
 8010ef2:	f043 0302 	orr.w	r3, r3, #2
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010efc:	e187      	b.n	801120e <tcp_receive+0xed2>
        tcp_ack(pcb);
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	8b5b      	ldrh	r3, [r3, #26]
 8010f02:	f043 0301 	orr.w	r3, r3, #1
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f0c:	e17f      	b.n	801120e <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d106      	bne.n	8010f24 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010f16:	4848      	ldr	r0, [pc, #288]	@ (8011038 <tcp_receive+0xcfc>)
 8010f18:	f7fd fbbc 	bl	800e694 <tcp_seg_copy>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	675a      	str	r2, [r3, #116]	@ 0x74
 8010f22:	e16c      	b.n	80111fe <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010f24:	2300      	movs	r3, #0
 8010f26:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010f2e:	e156      	b.n	80111de <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8010f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f32:	68db      	ldr	r3, [r3, #12]
 8010f34:	685a      	ldr	r2, [r3, #4]
 8010f36:	4b41      	ldr	r3, [pc, #260]	@ (801103c <tcp_receive+0xd00>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	d11d      	bne.n	8010f7a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8011038 <tcp_receive+0xcfc>)
 8010f40:	891a      	ldrh	r2, [r3, #8]
 8010f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f44:	891b      	ldrh	r3, [r3, #8]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	f240 814e 	bls.w	80111e8 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010f4c:	483a      	ldr	r0, [pc, #232]	@ (8011038 <tcp_receive+0xcfc>)
 8010f4e:	f7fd fba1 	bl	800e694 <tcp_seg_copy>
 8010f52:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010f54:	697b      	ldr	r3, [r7, #20]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	f000 8148 	beq.w	80111ec <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8010f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d003      	beq.n	8010f6a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8010f62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f64:	697a      	ldr	r2, [r7, #20]
 8010f66:	601a      	str	r2, [r3, #0]
 8010f68:	e002      	b.n	8010f70 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	697a      	ldr	r2, [r7, #20]
 8010f6e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010f70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010f72:	6978      	ldr	r0, [r7, #20]
 8010f74:	f7ff f8de 	bl	8010134 <tcp_oos_insert_segment>
                }
                break;
 8010f78:	e138      	b.n	80111ec <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8010f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d117      	bne.n	8010fb0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010f80:	4b2e      	ldr	r3, [pc, #184]	@ (801103c <tcp_receive+0xd00>)
 8010f82:	681a      	ldr	r2, [r3, #0]
 8010f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	1ad3      	subs	r3, r2, r3
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	da57      	bge.n	8011040 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010f90:	4829      	ldr	r0, [pc, #164]	@ (8011038 <tcp_receive+0xcfc>)
 8010f92:	f7fd fb7f 	bl	800e694 <tcp_seg_copy>
 8010f96:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010f98:	69bb      	ldr	r3, [r7, #24]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	f000 8128 	beq.w	80111f0 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	69ba      	ldr	r2, [r7, #24]
 8010fa4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010fa6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010fa8:	69b8      	ldr	r0, [r7, #24]
 8010faa:	f7ff f8c3 	bl	8010134 <tcp_oos_insert_segment>
                  }
                  break;
 8010fae:	e11f      	b.n	80111f0 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010fb0:	4b22      	ldr	r3, [pc, #136]	@ (801103c <tcp_receive+0xd00>)
 8010fb2:	681a      	ldr	r2, [r3, #0]
 8010fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fb6:	68db      	ldr	r3, [r3, #12]
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	1ad3      	subs	r3, r2, r3
 8010fbc:	3b01      	subs	r3, #1
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	db3e      	blt.n	8011040 <tcp_receive+0xd04>
 8010fc2:	4b1e      	ldr	r3, [pc, #120]	@ (801103c <tcp_receive+0xd00>)
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	685b      	ldr	r3, [r3, #4]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	3301      	adds	r3, #1
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	dc35      	bgt.n	8011040 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010fd4:	4818      	ldr	r0, [pc, #96]	@ (8011038 <tcp_receive+0xcfc>)
 8010fd6:	f7fd fb5d 	bl	800e694 <tcp_seg_copy>
 8010fda:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	f000 8108 	beq.w	80111f4 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fe6:	68db      	ldr	r3, [r3, #12]
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010fec:	8912      	ldrh	r2, [r2, #8]
 8010fee:	441a      	add	r2, r3
 8010ff0:	4b12      	ldr	r3, [pc, #72]	@ (801103c <tcp_receive+0xd00>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	1ad3      	subs	r3, r2, r3
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	dd12      	ble.n	8011020 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010ffa:	4b10      	ldr	r3, [pc, #64]	@ (801103c <tcp_receive+0xd00>)
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	b29a      	uxth	r2, r3
 8011000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011002:	68db      	ldr	r3, [r3, #12]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	b29b      	uxth	r3, r3
 8011008:	1ad3      	subs	r3, r2, r3
 801100a:	b29a      	uxth	r2, r3
 801100c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801100e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011012:	685a      	ldr	r2, [r3, #4]
 8011014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011016:	891b      	ldrh	r3, [r3, #8]
 8011018:	4619      	mov	r1, r3
 801101a:	4610      	mov	r0, r2
 801101c:	f7fb fe28 	bl	800cc70 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011022:	69fa      	ldr	r2, [r7, #28]
 8011024:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011026:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011028:	69f8      	ldr	r0, [r7, #28]
 801102a:	f7ff f883 	bl	8010134 <tcp_oos_insert_segment>
                  }
                  break;
 801102e:	e0e1      	b.n	80111f4 <tcp_receive+0xeb8>
 8011030:	240084c4 	.word	0x240084c4
 8011034:	240084c1 	.word	0x240084c1
 8011038:	24008494 	.word	0x24008494
 801103c:	240084b4 	.word	0x240084b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011042:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	f040 80c5 	bne.w	80111d8 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801104e:	4b7f      	ldr	r3, [pc, #508]	@ (801124c <tcp_receive+0xf10>)
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801105a:	2b00      	cmp	r3, #0
 801105c:	f340 80bc 	ble.w	80111d8 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	899b      	ldrh	r3, [r3, #12]
 8011066:	b29b      	uxth	r3, r3
 8011068:	4618      	mov	r0, r3
 801106a:	f7f8 f8d3 	bl	8009214 <lwip_htons>
 801106e:	4603      	mov	r3, r0
 8011070:	b2db      	uxtb	r3, r3
 8011072:	f003 0301 	and.w	r3, r3, #1
 8011076:	2b00      	cmp	r3, #0
 8011078:	f040 80be 	bne.w	80111f8 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801107c:	4874      	ldr	r0, [pc, #464]	@ (8011250 <tcp_receive+0xf14>)
 801107e:	f7fd fb09 	bl	800e694 <tcp_seg_copy>
 8011082:	4602      	mov	r2, r0
 8011084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011086:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	2b00      	cmp	r3, #0
 801108e:	f000 80b5 	beq.w	80111fc <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	685b      	ldr	r3, [r3, #4]
 8011098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801109a:	8912      	ldrh	r2, [r2, #8]
 801109c:	441a      	add	r2, r3
 801109e:	4b6b      	ldr	r3, [pc, #428]	@ (801124c <tcp_receive+0xf10>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	1ad3      	subs	r3, r2, r3
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	dd12      	ble.n	80110ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80110a8:	4b68      	ldr	r3, [pc, #416]	@ (801124c <tcp_receive+0xf10>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	1ad3      	subs	r3, r2, r3
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80110be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c0:	685a      	ldr	r2, [r3, #4]
 80110c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110c4:	891b      	ldrh	r3, [r3, #8]
 80110c6:	4619      	mov	r1, r3
 80110c8:	4610      	mov	r0, r2
 80110ca:	f7fb fdd1 	bl	800cc70 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80110ce:	4b61      	ldr	r3, [pc, #388]	@ (8011254 <tcp_receive+0xf18>)
 80110d0:	881b      	ldrh	r3, [r3, #0]
 80110d2:	461a      	mov	r2, r3
 80110d4:	4b5d      	ldr	r3, [pc, #372]	@ (801124c <tcp_receive+0xf10>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	441a      	add	r2, r3
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110de:	6879      	ldr	r1, [r7, #4]
 80110e0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80110e2:	440b      	add	r3, r1
 80110e4:	1ad3      	subs	r3, r2, r3
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	f340 8088 	ble.w	80111fc <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80110ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	899b      	ldrh	r3, [r3, #12]
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7f8 f88c 	bl	8009214 <lwip_htons>
 80110fc:	4603      	mov	r3, r0
 80110fe:	b2db      	uxtb	r3, r3
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	d021      	beq.n	801114c <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	68db      	ldr	r3, [r3, #12]
 801110e:	899b      	ldrh	r3, [r3, #12]
 8011110:	b29b      	uxth	r3, r3
 8011112:	b21b      	sxth	r3, r3
 8011114:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011118:	b21c      	sxth	r4, r3
 801111a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	68db      	ldr	r3, [r3, #12]
 8011120:	899b      	ldrh	r3, [r3, #12]
 8011122:	b29b      	uxth	r3, r3
 8011124:	4618      	mov	r0, r3
 8011126:	f7f8 f875 	bl	8009214 <lwip_htons>
 801112a:	4603      	mov	r3, r0
 801112c:	b2db      	uxtb	r3, r3
 801112e:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011132:	b29b      	uxth	r3, r3
 8011134:	4618      	mov	r0, r3
 8011136:	f7f8 f86d 	bl	8009214 <lwip_htons>
 801113a:	4603      	mov	r3, r0
 801113c:	b21b      	sxth	r3, r3
 801113e:	4323      	orrs	r3, r4
 8011140:	b21a      	sxth	r2, r3
 8011142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68db      	ldr	r3, [r3, #12]
 8011148:	b292      	uxth	r2, r2
 801114a:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011150:	b29a      	uxth	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011156:	4413      	add	r3, r2
 8011158:	b299      	uxth	r1, r3
 801115a:	4b3c      	ldr	r3, [pc, #240]	@ (801124c <tcp_receive+0xf10>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	b29a      	uxth	r2, r3
 8011160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	1a8a      	subs	r2, r1, r2
 8011166:	b292      	uxth	r2, r2
 8011168:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801116a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	685a      	ldr	r2, [r3, #4]
 8011170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	891b      	ldrh	r3, [r3, #8]
 8011176:	4619      	mov	r1, r3
 8011178:	4610      	mov	r0, r2
 801117a:	f7fb fd79 	bl	800cc70 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801117e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	891c      	ldrh	r4, [r3, #8]
 8011184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	899b      	ldrh	r3, [r3, #12]
 801118c:	b29b      	uxth	r3, r3
 801118e:	4618      	mov	r0, r3
 8011190:	f7f8 f840 	bl	8009214 <lwip_htons>
 8011194:	4603      	mov	r3, r0
 8011196:	b2db      	uxtb	r3, r3
 8011198:	f003 0303 	and.w	r3, r3, #3
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <tcp_receive+0xe68>
 80111a0:	2301      	movs	r3, #1
 80111a2:	e000      	b.n	80111a6 <tcp_receive+0xe6a>
 80111a4:	2300      	movs	r3, #0
 80111a6:	4423      	add	r3, r4
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	4b2a      	ldr	r3, [pc, #168]	@ (8011254 <tcp_receive+0xf18>)
 80111ac:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80111ae:	4b29      	ldr	r3, [pc, #164]	@ (8011254 <tcp_receive+0xf18>)
 80111b0:	881b      	ldrh	r3, [r3, #0]
 80111b2:	461a      	mov	r2, r3
 80111b4:	4b25      	ldr	r3, [pc, #148]	@ (801124c <tcp_receive+0xf10>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	441a      	add	r2, r3
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111be:	6879      	ldr	r1, [r7, #4]
 80111c0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80111c2:	440b      	add	r3, r1
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d019      	beq.n	80111fc <tcp_receive+0xec0>
 80111c8:	4b23      	ldr	r3, [pc, #140]	@ (8011258 <tcp_receive+0xf1c>)
 80111ca:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80111ce:	4923      	ldr	r1, [pc, #140]	@ (801125c <tcp_receive+0xf20>)
 80111d0:	4823      	ldr	r0, [pc, #140]	@ (8011260 <tcp_receive+0xf24>)
 80111d2:	f002 f98d 	bl	80134f0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80111d6:	e011      	b.n	80111fc <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80111d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80111de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f47f aea5 	bne.w	8010f30 <tcp_receive+0xbf4>
 80111e6:	e00a      	b.n	80111fe <tcp_receive+0xec2>
                break;
 80111e8:	bf00      	nop
 80111ea:	e008      	b.n	80111fe <tcp_receive+0xec2>
                break;
 80111ec:	bf00      	nop
 80111ee:	e006      	b.n	80111fe <tcp_receive+0xec2>
                  break;
 80111f0:	bf00      	nop
 80111f2:	e004      	b.n	80111fe <tcp_receive+0xec2>
                  break;
 80111f4:	bf00      	nop
 80111f6:	e002      	b.n	80111fe <tcp_receive+0xec2>
                  break;
 80111f8:	bf00      	nop
 80111fa:	e000      	b.n	80111fe <tcp_receive+0xec2>
                break;
 80111fc:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f001 fa30 	bl	8012664 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011204:	e003      	b.n	801120e <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f001 fa2c 	bl	8012664 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801120c:	e01a      	b.n	8011244 <tcp_receive+0xf08>
 801120e:	e019      	b.n	8011244 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011210:	4b0e      	ldr	r3, [pc, #56]	@ (801124c <tcp_receive+0xf10>)
 8011212:	681a      	ldr	r2, [r3, #0]
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011218:	1ad3      	subs	r3, r2, r3
 801121a:	2b00      	cmp	r3, #0
 801121c:	db0a      	blt.n	8011234 <tcp_receive+0xef8>
 801121e:	4b0b      	ldr	r3, [pc, #44]	@ (801124c <tcp_receive+0xf10>)
 8011220:	681a      	ldr	r2, [r3, #0]
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011226:	6879      	ldr	r1, [r7, #4]
 8011228:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801122a:	440b      	add	r3, r1
 801122c:	1ad3      	subs	r3, r2, r3
 801122e:	3301      	adds	r3, #1
 8011230:	2b00      	cmp	r3, #0
 8011232:	dd07      	ble.n	8011244 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	8b5b      	ldrh	r3, [r3, #26]
 8011238:	f043 0302 	orr.w	r3, r3, #2
 801123c:	b29a      	uxth	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011242:	e7ff      	b.n	8011244 <tcp_receive+0xf08>
 8011244:	bf00      	nop
 8011246:	3750      	adds	r7, #80	@ 0x50
 8011248:	46bd      	mov	sp, r7
 801124a:	bdb0      	pop	{r4, r5, r7, pc}
 801124c:	240084b4 	.word	0x240084b4
 8011250:	24008494 	.word	0x24008494
 8011254:	240084be 	.word	0x240084be
 8011258:	08015e0c 	.word	0x08015e0c
 801125c:	080161dc 	.word	0x080161dc
 8011260:	08015e80 	.word	0x08015e80

08011264 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011264:	b480      	push	{r7}
 8011266:	b083      	sub	sp, #12
 8011268:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801126a:	4b15      	ldr	r3, [pc, #84]	@ (80112c0 <tcp_get_next_optbyte+0x5c>)
 801126c:	881b      	ldrh	r3, [r3, #0]
 801126e:	1c5a      	adds	r2, r3, #1
 8011270:	b291      	uxth	r1, r2
 8011272:	4a13      	ldr	r2, [pc, #76]	@ (80112c0 <tcp_get_next_optbyte+0x5c>)
 8011274:	8011      	strh	r1, [r2, #0]
 8011276:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011278:	4b12      	ldr	r3, [pc, #72]	@ (80112c4 <tcp_get_next_optbyte+0x60>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d004      	beq.n	801128a <tcp_get_next_optbyte+0x26>
 8011280:	4b11      	ldr	r3, [pc, #68]	@ (80112c8 <tcp_get_next_optbyte+0x64>)
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	88fa      	ldrh	r2, [r7, #6]
 8011286:	429a      	cmp	r2, r3
 8011288:	d208      	bcs.n	801129c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801128a:	4b10      	ldr	r3, [pc, #64]	@ (80112cc <tcp_get_next_optbyte+0x68>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	3314      	adds	r3, #20
 8011290:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011292:	88fb      	ldrh	r3, [r7, #6]
 8011294:	683a      	ldr	r2, [r7, #0]
 8011296:	4413      	add	r3, r2
 8011298:	781b      	ldrb	r3, [r3, #0]
 801129a:	e00b      	b.n	80112b4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801129c:	88fb      	ldrh	r3, [r7, #6]
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	4b09      	ldr	r3, [pc, #36]	@ (80112c8 <tcp_get_next_optbyte+0x64>)
 80112a2:	881b      	ldrh	r3, [r3, #0]
 80112a4:	b2db      	uxtb	r3, r3
 80112a6:	1ad3      	subs	r3, r2, r3
 80112a8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80112aa:	4b06      	ldr	r3, [pc, #24]	@ (80112c4 <tcp_get_next_optbyte+0x60>)
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	797b      	ldrb	r3, [r7, #5]
 80112b0:	4413      	add	r3, r2
 80112b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	370c      	adds	r7, #12
 80112b8:	46bd      	mov	sp, r7
 80112ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112be:	4770      	bx	lr
 80112c0:	240084b0 	.word	0x240084b0
 80112c4:	240084ac 	.word	0x240084ac
 80112c8:	240084aa 	.word	0x240084aa
 80112cc:	240084a4 	.word	0x240084a4

080112d0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <tcp_parseopt+0x1c>
 80112de:	4b32      	ldr	r3, [pc, #200]	@ (80113a8 <tcp_parseopt+0xd8>)
 80112e0:	f240 727d 	movw	r2, #1917	@ 0x77d
 80112e4:	4931      	ldr	r1, [pc, #196]	@ (80113ac <tcp_parseopt+0xdc>)
 80112e6:	4832      	ldr	r0, [pc, #200]	@ (80113b0 <tcp_parseopt+0xe0>)
 80112e8:	f002 f902 	bl	80134f0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80112ec:	4b31      	ldr	r3, [pc, #196]	@ (80113b4 <tcp_parseopt+0xe4>)
 80112ee:	881b      	ldrh	r3, [r3, #0]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d056      	beq.n	80113a2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80112f4:	4b30      	ldr	r3, [pc, #192]	@ (80113b8 <tcp_parseopt+0xe8>)
 80112f6:	2200      	movs	r2, #0
 80112f8:	801a      	strh	r2, [r3, #0]
 80112fa:	e046      	b.n	801138a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80112fc:	f7ff ffb2 	bl	8011264 <tcp_get_next_optbyte>
 8011300:	4603      	mov	r3, r0
 8011302:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011304:	7bfb      	ldrb	r3, [r7, #15]
 8011306:	2b02      	cmp	r3, #2
 8011308:	d006      	beq.n	8011318 <tcp_parseopt+0x48>
 801130a:	2b02      	cmp	r3, #2
 801130c:	dc2a      	bgt.n	8011364 <tcp_parseopt+0x94>
 801130e:	2b00      	cmp	r3, #0
 8011310:	d042      	beq.n	8011398 <tcp_parseopt+0xc8>
 8011312:	2b01      	cmp	r3, #1
 8011314:	d038      	beq.n	8011388 <tcp_parseopt+0xb8>
 8011316:	e025      	b.n	8011364 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011318:	f7ff ffa4 	bl	8011264 <tcp_get_next_optbyte>
 801131c:	4603      	mov	r3, r0
 801131e:	2b04      	cmp	r3, #4
 8011320:	d13c      	bne.n	801139c <tcp_parseopt+0xcc>
 8011322:	4b25      	ldr	r3, [pc, #148]	@ (80113b8 <tcp_parseopt+0xe8>)
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	3301      	adds	r3, #1
 8011328:	4a22      	ldr	r2, [pc, #136]	@ (80113b4 <tcp_parseopt+0xe4>)
 801132a:	8812      	ldrh	r2, [r2, #0]
 801132c:	4293      	cmp	r3, r2
 801132e:	da35      	bge.n	801139c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011330:	f7ff ff98 	bl	8011264 <tcp_get_next_optbyte>
 8011334:	4603      	mov	r3, r0
 8011336:	021b      	lsls	r3, r3, #8
 8011338:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801133a:	f7ff ff93 	bl	8011264 <tcp_get_next_optbyte>
 801133e:	4603      	mov	r3, r0
 8011340:	461a      	mov	r2, r3
 8011342:	89bb      	ldrh	r3, [r7, #12]
 8011344:	4313      	orrs	r3, r2
 8011346:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011348:	89bb      	ldrh	r3, [r7, #12]
 801134a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 801134e:	d804      	bhi.n	801135a <tcp_parseopt+0x8a>
 8011350:	89bb      	ldrh	r3, [r7, #12]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <tcp_parseopt+0x8a>
 8011356:	89ba      	ldrh	r2, [r7, #12]
 8011358:	e001      	b.n	801135e <tcp_parseopt+0x8e>
 801135a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8011362:	e012      	b.n	801138a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011364:	f7ff ff7e 	bl	8011264 <tcp_get_next_optbyte>
 8011368:	4603      	mov	r3, r0
 801136a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801136c:	7afb      	ldrb	r3, [r7, #11]
 801136e:	2b01      	cmp	r3, #1
 8011370:	d916      	bls.n	80113a0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011372:	7afb      	ldrb	r3, [r7, #11]
 8011374:	b29a      	uxth	r2, r3
 8011376:	4b10      	ldr	r3, [pc, #64]	@ (80113b8 <tcp_parseopt+0xe8>)
 8011378:	881b      	ldrh	r3, [r3, #0]
 801137a:	4413      	add	r3, r2
 801137c:	b29b      	uxth	r3, r3
 801137e:	3b02      	subs	r3, #2
 8011380:	b29a      	uxth	r2, r3
 8011382:	4b0d      	ldr	r3, [pc, #52]	@ (80113b8 <tcp_parseopt+0xe8>)
 8011384:	801a      	strh	r2, [r3, #0]
 8011386:	e000      	b.n	801138a <tcp_parseopt+0xba>
          break;
 8011388:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801138a:	4b0b      	ldr	r3, [pc, #44]	@ (80113b8 <tcp_parseopt+0xe8>)
 801138c:	881a      	ldrh	r2, [r3, #0]
 801138e:	4b09      	ldr	r3, [pc, #36]	@ (80113b4 <tcp_parseopt+0xe4>)
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	429a      	cmp	r2, r3
 8011394:	d3b2      	bcc.n	80112fc <tcp_parseopt+0x2c>
 8011396:	e004      	b.n	80113a2 <tcp_parseopt+0xd2>
          return;
 8011398:	bf00      	nop
 801139a:	e002      	b.n	80113a2 <tcp_parseopt+0xd2>
            return;
 801139c:	bf00      	nop
 801139e:	e000      	b.n	80113a2 <tcp_parseopt+0xd2>
            return;
 80113a0:	bf00      	nop
      }
    }
  }
}
 80113a2:	3710      	adds	r7, #16
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	08015e0c 	.word	0x08015e0c
 80113ac:	08016298 	.word	0x08016298
 80113b0:	08015e80 	.word	0x08015e80
 80113b4:	240084a8 	.word	0x240084a8
 80113b8:	240084b0 	.word	0x240084b0

080113bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80113bc:	b480      	push	{r7}
 80113be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80113c0:	4b05      	ldr	r3, [pc, #20]	@ (80113d8 <tcp_trigger_input_pcb_close+0x1c>)
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	f043 0310 	orr.w	r3, r3, #16
 80113c8:	b2da      	uxtb	r2, r3
 80113ca:	4b03      	ldr	r3, [pc, #12]	@ (80113d8 <tcp_trigger_input_pcb_close+0x1c>)
 80113cc:	701a      	strb	r2, [r3, #0]
}
 80113ce:	bf00      	nop
 80113d0:	46bd      	mov	sp, r7
 80113d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113d6:	4770      	bx	lr
 80113d8:	240084c1 	.word	0x240084c1

080113dc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b084      	sub	sp, #16
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	60f8      	str	r0, [r7, #12]
 80113e4:	60b9      	str	r1, [r7, #8]
 80113e6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00a      	beq.n	8011404 <tcp_route+0x28>
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	7a1b      	ldrb	r3, [r3, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d006      	beq.n	8011404 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	7a1b      	ldrb	r3, [r3, #8]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f7fb fa30 	bl	800c860 <netif_get_by_index>
 8011400:	4603      	mov	r3, r0
 8011402:	e003      	b.n	801140c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f7f9 f8fb 	bl	800a600 <ip4_route>
 801140a:	4603      	mov	r3, r0
  }
}
 801140c:	4618      	mov	r0, r3
 801140e:	3710      	adds	r7, #16
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011414:	b590      	push	{r4, r7, lr}
 8011416:	b087      	sub	sp, #28
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	603b      	str	r3, [r7, #0]
 8011420:	4613      	mov	r3, r2
 8011422:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d105      	bne.n	8011436 <tcp_create_segment+0x22>
 801142a:	4b43      	ldr	r3, [pc, #268]	@ (8011538 <tcp_create_segment+0x124>)
 801142c:	22a3      	movs	r2, #163	@ 0xa3
 801142e:	4943      	ldr	r1, [pc, #268]	@ (801153c <tcp_create_segment+0x128>)
 8011430:	4843      	ldr	r0, [pc, #268]	@ (8011540 <tcp_create_segment+0x12c>)
 8011432:	f002 f85d 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d105      	bne.n	8011448 <tcp_create_segment+0x34>
 801143c:	4b3e      	ldr	r3, [pc, #248]	@ (8011538 <tcp_create_segment+0x124>)
 801143e:	22a4      	movs	r2, #164	@ 0xa4
 8011440:	4940      	ldr	r1, [pc, #256]	@ (8011544 <tcp_create_segment+0x130>)
 8011442:	483f      	ldr	r0, [pc, #252]	@ (8011540 <tcp_create_segment+0x12c>)
 8011444:	f002 f854 	bl	80134f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011448:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	b2db      	uxtb	r3, r3
 8011450:	f003 0304 	and.w	r3, r3, #4
 8011454:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011456:	2003      	movs	r0, #3
 8011458:	f7fa fe76 	bl	800c148 <memp_malloc>
 801145c:	6138      	str	r0, [r7, #16]
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	2b00      	cmp	r3, #0
 8011462:	d104      	bne.n	801146e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011464:	68b8      	ldr	r0, [r7, #8]
 8011466:	f7fb fd89 	bl	800cf7c <pbuf_free>
    return NULL;
 801146a:	2300      	movs	r3, #0
 801146c:	e060      	b.n	8011530 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 801146e:	693b      	ldr	r3, [r7, #16]
 8011470:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8011474:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	2200      	movs	r2, #0
 801147a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	68ba      	ldr	r2, [r7, #8]
 8011480:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011482:	68bb      	ldr	r3, [r7, #8]
 8011484:	891a      	ldrh	r2, [r3, #8]
 8011486:	7dfb      	ldrb	r3, [r7, #23]
 8011488:	b29b      	uxth	r3, r3
 801148a:	429a      	cmp	r2, r3
 801148c:	d205      	bcs.n	801149a <tcp_create_segment+0x86>
 801148e:	4b2a      	ldr	r3, [pc, #168]	@ (8011538 <tcp_create_segment+0x124>)
 8011490:	22b0      	movs	r2, #176	@ 0xb0
 8011492:	492d      	ldr	r1, [pc, #180]	@ (8011548 <tcp_create_segment+0x134>)
 8011494:	482a      	ldr	r0, [pc, #168]	@ (8011540 <tcp_create_segment+0x12c>)
 8011496:	f002 f82b 	bl	80134f0 <iprintf>
  seg->len = p->tot_len - optlen;
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	891a      	ldrh	r2, [r3, #8]
 801149e:	7dfb      	ldrb	r3, [r7, #23]
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	1ad3      	subs	r3, r2, r3
 80114a4:	b29a      	uxth	r2, r3
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80114aa:	2114      	movs	r1, #20
 80114ac:	68b8      	ldr	r0, [r7, #8]
 80114ae:	f7fb fccf 	bl	800ce50 <pbuf_add_header>
 80114b2:	4603      	mov	r3, r0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d004      	beq.n	80114c2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80114b8:	6938      	ldr	r0, [r7, #16]
 80114ba:	f7fd f8d2 	bl	800e662 <tcp_seg_free>
    return NULL;
 80114be:	2300      	movs	r3, #0
 80114c0:	e036      	b.n	8011530 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	685a      	ldr	r2, [r3, #4]
 80114c8:	693b      	ldr	r3, [r7, #16]
 80114ca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	8ada      	ldrh	r2, [r3, #22]
 80114d0:	693b      	ldr	r3, [r7, #16]
 80114d2:	68dc      	ldr	r4, [r3, #12]
 80114d4:	4610      	mov	r0, r2
 80114d6:	f7f7 fe9d 	bl	8009214 <lwip_htons>
 80114da:	4603      	mov	r3, r0
 80114dc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	8b1a      	ldrh	r2, [r3, #24]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	68dc      	ldr	r4, [r3, #12]
 80114e6:	4610      	mov	r0, r2
 80114e8:	f7f7 fe94 	bl	8009214 <lwip_htons>
 80114ec:	4603      	mov	r3, r0
 80114ee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	68dc      	ldr	r4, [r3, #12]
 80114f4:	6838      	ldr	r0, [r7, #0]
 80114f6:	f7f7 fea2 	bl	800923e <lwip_htonl>
 80114fa:	4603      	mov	r3, r0
 80114fc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80114fe:	7dfb      	ldrb	r3, [r7, #23]
 8011500:	089b      	lsrs	r3, r3, #2
 8011502:	b2db      	uxtb	r3, r3
 8011504:	3305      	adds	r3, #5
 8011506:	b29b      	uxth	r3, r3
 8011508:	031b      	lsls	r3, r3, #12
 801150a:	b29a      	uxth	r2, r3
 801150c:	79fb      	ldrb	r3, [r7, #7]
 801150e:	b29b      	uxth	r3, r3
 8011510:	4313      	orrs	r3, r2
 8011512:	b29a      	uxth	r2, r3
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	68dc      	ldr	r4, [r3, #12]
 8011518:	4610      	mov	r0, r2
 801151a:	f7f7 fe7b 	bl	8009214 <lwip_htons>
 801151e:	4603      	mov	r3, r0
 8011520:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	2200      	movs	r2, #0
 8011528:	749a      	strb	r2, [r3, #18]
 801152a:	2200      	movs	r2, #0
 801152c:	74da      	strb	r2, [r3, #19]
  return seg;
 801152e:	693b      	ldr	r3, [r7, #16]
}
 8011530:	4618      	mov	r0, r3
 8011532:	371c      	adds	r7, #28
 8011534:	46bd      	mov	sp, r7
 8011536:	bd90      	pop	{r4, r7, pc}
 8011538:	080162b4 	.word	0x080162b4
 801153c:	08016314 	.word	0x08016314
 8011540:	08016334 	.word	0x08016334
 8011544:	0801635c 	.word	0x0801635c
 8011548:	08016380 	.word	0x08016380

0801154c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801154c:	b590      	push	{r4, r7, lr}
 801154e:	b08b      	sub	sp, #44	@ 0x2c
 8011550:	af02      	add	r7, sp, #8
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	460b      	mov	r3, r1
 8011556:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011558:	2300      	movs	r3, #0
 801155a:	61fb      	str	r3, [r7, #28]
 801155c:	2300      	movs	r3, #0
 801155e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011560:	2300      	movs	r3, #0
 8011562:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d106      	bne.n	8011578 <tcp_split_unsent_seg+0x2c>
 801156a:	4b95      	ldr	r3, [pc, #596]	@ (80117c0 <tcp_split_unsent_seg+0x274>)
 801156c:	f240 324b 	movw	r2, #843	@ 0x34b
 8011570:	4994      	ldr	r1, [pc, #592]	@ (80117c4 <tcp_split_unsent_seg+0x278>)
 8011572:	4895      	ldr	r0, [pc, #596]	@ (80117c8 <tcp_split_unsent_seg+0x27c>)
 8011574:	f001 ffbc 	bl	80134f0 <iprintf>

  useg = pcb->unsent;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801157c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801157e:	697b      	ldr	r3, [r7, #20]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d102      	bne.n	801158a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011584:	f04f 33ff 	mov.w	r3, #4294967295
 8011588:	e116      	b.n	80117b8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801158a:	887b      	ldrh	r3, [r7, #2]
 801158c:	2b00      	cmp	r3, #0
 801158e:	d109      	bne.n	80115a4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011590:	4b8b      	ldr	r3, [pc, #556]	@ (80117c0 <tcp_split_unsent_seg+0x274>)
 8011592:	f240 3253 	movw	r2, #851	@ 0x353
 8011596:	498d      	ldr	r1, [pc, #564]	@ (80117cc <tcp_split_unsent_seg+0x280>)
 8011598:	488b      	ldr	r0, [pc, #556]	@ (80117c8 <tcp_split_unsent_seg+0x27c>)
 801159a:	f001 ffa9 	bl	80134f0 <iprintf>
    return ERR_VAL;
 801159e:	f06f 0305 	mvn.w	r3, #5
 80115a2:	e109      	b.n	80117b8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80115a4:	697b      	ldr	r3, [r7, #20]
 80115a6:	891b      	ldrh	r3, [r3, #8]
 80115a8:	887a      	ldrh	r2, [r7, #2]
 80115aa:	429a      	cmp	r2, r3
 80115ac:	d301      	bcc.n	80115b2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80115ae:	2300      	movs	r3, #0
 80115b0:	e102      	b.n	80117b8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80115b6:	887a      	ldrh	r2, [r7, #2]
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d906      	bls.n	80115ca <tcp_split_unsent_seg+0x7e>
 80115bc:	4b80      	ldr	r3, [pc, #512]	@ (80117c0 <tcp_split_unsent_seg+0x274>)
 80115be:	f240 325b 	movw	r2, #859	@ 0x35b
 80115c2:	4983      	ldr	r1, [pc, #524]	@ (80117d0 <tcp_split_unsent_seg+0x284>)
 80115c4:	4880      	ldr	r0, [pc, #512]	@ (80117c8 <tcp_split_unsent_seg+0x27c>)
 80115c6:	f001 ff93 	bl	80134f0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	891b      	ldrh	r3, [r3, #8]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d106      	bne.n	80115e0 <tcp_split_unsent_seg+0x94>
 80115d2:	4b7b      	ldr	r3, [pc, #492]	@ (80117c0 <tcp_split_unsent_seg+0x274>)
 80115d4:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80115d8:	497e      	ldr	r1, [pc, #504]	@ (80117d4 <tcp_split_unsent_seg+0x288>)
 80115da:	487b      	ldr	r0, [pc, #492]	@ (80117c8 <tcp_split_unsent_seg+0x27c>)
 80115dc:	f001 ff88 	bl	80134f0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80115e0:	697b      	ldr	r3, [r7, #20]
 80115e2:	7a9b      	ldrb	r3, [r3, #10]
 80115e4:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80115e6:	7bfb      	ldrb	r3, [r7, #15]
 80115e8:	009b      	lsls	r3, r3, #2
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	f003 0304 	and.w	r3, r3, #4
 80115f0:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	891a      	ldrh	r2, [r3, #8]
 80115f6:	887b      	ldrh	r3, [r7, #2]
 80115f8:	1ad3      	subs	r3, r2, r3
 80115fa:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80115fc:	7bbb      	ldrb	r3, [r7, #14]
 80115fe:	b29a      	uxth	r2, r3
 8011600:	89bb      	ldrh	r3, [r7, #12]
 8011602:	4413      	add	r3, r2
 8011604:	b29b      	uxth	r3, r3
 8011606:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801160a:	4619      	mov	r1, r3
 801160c:	2036      	movs	r0, #54	@ 0x36
 801160e:	f7fb f9d1 	bl	800c9b4 <pbuf_alloc>
 8011612:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	2b00      	cmp	r3, #0
 8011618:	f000 80b7 	beq.w	801178a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	685b      	ldr	r3, [r3, #4]
 8011620:	891a      	ldrh	r2, [r3, #8]
 8011622:	697b      	ldr	r3, [r7, #20]
 8011624:	891b      	ldrh	r3, [r3, #8]
 8011626:	1ad3      	subs	r3, r2, r3
 8011628:	b29a      	uxth	r2, r3
 801162a:	887b      	ldrh	r3, [r7, #2]
 801162c:	4413      	add	r3, r2
 801162e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	6858      	ldr	r0, [r3, #4]
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	685a      	ldr	r2, [r3, #4]
 8011638:	7bbb      	ldrb	r3, [r7, #14]
 801163a:	18d1      	adds	r1, r2, r3
 801163c:	897b      	ldrh	r3, [r7, #10]
 801163e:	89ba      	ldrh	r2, [r7, #12]
 8011640:	f7fb fe92 	bl	800d368 <pbuf_copy_partial>
 8011644:	4603      	mov	r3, r0
 8011646:	461a      	mov	r2, r3
 8011648:	89bb      	ldrh	r3, [r7, #12]
 801164a:	4293      	cmp	r3, r2
 801164c:	f040 809f 	bne.w	801178e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	b29b      	uxth	r3, r3
 8011658:	4618      	mov	r0, r3
 801165a:	f7f7 fddb 	bl	8009214 <lwip_htons>
 801165e:	4603      	mov	r3, r0
 8011660:	b2db      	uxtb	r3, r3
 8011662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8011666:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011668:	2300      	movs	r3, #0
 801166a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801166c:	7efb      	ldrb	r3, [r7, #27]
 801166e:	f003 0308 	and.w	r3, r3, #8
 8011672:	2b00      	cmp	r3, #0
 8011674:	d007      	beq.n	8011686 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011676:	7efb      	ldrb	r3, [r7, #27]
 8011678:	f023 0308 	bic.w	r3, r3, #8
 801167c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801167e:	7ebb      	ldrb	r3, [r7, #26]
 8011680:	f043 0308 	orr.w	r3, r3, #8
 8011684:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011686:	7efb      	ldrb	r3, [r7, #27]
 8011688:	f003 0301 	and.w	r3, r3, #1
 801168c:	2b00      	cmp	r3, #0
 801168e:	d007      	beq.n	80116a0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011690:	7efb      	ldrb	r3, [r7, #27]
 8011692:	f023 0301 	bic.w	r3, r3, #1
 8011696:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011698:	7ebb      	ldrb	r3, [r7, #26]
 801169a:	f043 0301 	orr.w	r3, r3, #1
 801169e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80116a0:	697b      	ldr	r3, [r7, #20]
 80116a2:	68db      	ldr	r3, [r3, #12]
 80116a4:	685b      	ldr	r3, [r3, #4]
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7f7 fdc9 	bl	800923e <lwip_htonl>
 80116ac:	4602      	mov	r2, r0
 80116ae:	887b      	ldrh	r3, [r7, #2]
 80116b0:	18d1      	adds	r1, r2, r3
 80116b2:	7eba      	ldrb	r2, [r7, #26]
 80116b4:	7bfb      	ldrb	r3, [r7, #15]
 80116b6:	9300      	str	r3, [sp, #0]
 80116b8:	460b      	mov	r3, r1
 80116ba:	6939      	ldr	r1, [r7, #16]
 80116bc:	6878      	ldr	r0, [r7, #4]
 80116be:	f7ff fea9 	bl	8011414 <tcp_create_segment>
 80116c2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d063      	beq.n	8011792 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	685b      	ldr	r3, [r3, #4]
 80116ce:	4618      	mov	r0, r3
 80116d0:	f7fb fce2 	bl	800d098 <pbuf_clen>
 80116d4:	4603      	mov	r3, r0
 80116d6:	461a      	mov	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80116de:	1a9b      	subs	r3, r3, r2
 80116e0:	b29a      	uxth	r2, r3
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	6858      	ldr	r0, [r3, #4]
 80116ec:	697b      	ldr	r3, [r7, #20]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	891a      	ldrh	r2, [r3, #8]
 80116f2:	89bb      	ldrh	r3, [r7, #12]
 80116f4:	1ad3      	subs	r3, r2, r3
 80116f6:	b29b      	uxth	r3, r3
 80116f8:	4619      	mov	r1, r3
 80116fa:	f7fb fab9 	bl	800cc70 <pbuf_realloc>
  useg->len -= remainder;
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	891a      	ldrh	r2, [r3, #8]
 8011702:	89bb      	ldrh	r3, [r7, #12]
 8011704:	1ad3      	subs	r3, r2, r3
 8011706:	b29a      	uxth	r2, r3
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801170c:	697b      	ldr	r3, [r7, #20]
 801170e:	68db      	ldr	r3, [r3, #12]
 8011710:	899b      	ldrh	r3, [r3, #12]
 8011712:	b29c      	uxth	r4, r3
 8011714:	7efb      	ldrb	r3, [r7, #27]
 8011716:	b29b      	uxth	r3, r3
 8011718:	4618      	mov	r0, r3
 801171a:	f7f7 fd7b 	bl	8009214 <lwip_htons>
 801171e:	4603      	mov	r3, r0
 8011720:	461a      	mov	r2, r3
 8011722:	697b      	ldr	r3, [r7, #20]
 8011724:	68db      	ldr	r3, [r3, #12]
 8011726:	4322      	orrs	r2, r4
 8011728:	b292      	uxth	r2, r2
 801172a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	4618      	mov	r0, r3
 8011732:	f7fb fcb1 	bl	800d098 <pbuf_clen>
 8011736:	4603      	mov	r3, r0
 8011738:	461a      	mov	r2, r3
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011740:	4413      	add	r3, r2
 8011742:	b29a      	uxth	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801174a:	69fb      	ldr	r3, [r7, #28]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	4618      	mov	r0, r3
 8011750:	f7fb fca2 	bl	800d098 <pbuf_clen>
 8011754:	4603      	mov	r3, r0
 8011756:	461a      	mov	r2, r3
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801175e:	4413      	add	r3, r2
 8011760:	b29a      	uxth	r2, r3
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011770:	697b      	ldr	r3, [r7, #20]
 8011772:	69fa      	ldr	r2, [r7, #28]
 8011774:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011776:	69fb      	ldr	r3, [r7, #28]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d103      	bne.n	8011786 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011786:	2300      	movs	r3, #0
 8011788:	e016      	b.n	80117b8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801178a:	bf00      	nop
 801178c:	e002      	b.n	8011794 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801178e:	bf00      	nop
 8011790:	e000      	b.n	8011794 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011792:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011794:	69fb      	ldr	r3, [r7, #28]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d006      	beq.n	80117a8 <tcp_split_unsent_seg+0x25c>
 801179a:	4b09      	ldr	r3, [pc, #36]	@ (80117c0 <tcp_split_unsent_seg+0x274>)
 801179c:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80117a0:	490d      	ldr	r1, [pc, #52]	@ (80117d8 <tcp_split_unsent_seg+0x28c>)
 80117a2:	4809      	ldr	r0, [pc, #36]	@ (80117c8 <tcp_split_unsent_seg+0x27c>)
 80117a4:	f001 fea4 	bl	80134f0 <iprintf>
  if (p != NULL) {
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d002      	beq.n	80117b4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80117ae:	6938      	ldr	r0, [r7, #16]
 80117b0:	f7fb fbe4 	bl	800cf7c <pbuf_free>
  }

  return ERR_MEM;
 80117b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3724      	adds	r7, #36	@ 0x24
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd90      	pop	{r4, r7, pc}
 80117c0:	080162b4 	.word	0x080162b4
 80117c4:	08016674 	.word	0x08016674
 80117c8:	08016334 	.word	0x08016334
 80117cc:	08016698 	.word	0x08016698
 80117d0:	080166bc 	.word	0x080166bc
 80117d4:	080166cc 	.word	0x080166cc
 80117d8:	080166dc 	.word	0x080166dc

080117dc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80117dc:	b590      	push	{r4, r7, lr}
 80117de:	b085      	sub	sp, #20
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d106      	bne.n	80117f8 <tcp_send_fin+0x1c>
 80117ea:	4b21      	ldr	r3, [pc, #132]	@ (8011870 <tcp_send_fin+0x94>)
 80117ec:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80117f0:	4920      	ldr	r1, [pc, #128]	@ (8011874 <tcp_send_fin+0x98>)
 80117f2:	4821      	ldr	r0, [pc, #132]	@ (8011878 <tcp_send_fin+0x9c>)
 80117f4:	f001 fe7c 	bl	80134f0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d02e      	beq.n	801185e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	e002      	b.n	801180e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011808:	68fb      	ldr	r3, [r7, #12]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d1f8      	bne.n	8011808 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	68db      	ldr	r3, [r3, #12]
 801181a:	899b      	ldrh	r3, [r3, #12]
 801181c:	b29b      	uxth	r3, r3
 801181e:	4618      	mov	r0, r3
 8011820:	f7f7 fcf8 	bl	8009214 <lwip_htons>
 8011824:	4603      	mov	r3, r0
 8011826:	b2db      	uxtb	r3, r3
 8011828:	f003 0307 	and.w	r3, r3, #7
 801182c:	2b00      	cmp	r3, #0
 801182e:	d116      	bne.n	801185e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	68db      	ldr	r3, [r3, #12]
 8011834:	899b      	ldrh	r3, [r3, #12]
 8011836:	b29c      	uxth	r4, r3
 8011838:	2001      	movs	r0, #1
 801183a:	f7f7 fceb 	bl	8009214 <lwip_htons>
 801183e:	4603      	mov	r3, r0
 8011840:	461a      	mov	r2, r3
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	68db      	ldr	r3, [r3, #12]
 8011846:	4322      	orrs	r2, r4
 8011848:	b292      	uxth	r2, r2
 801184a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8b5b      	ldrh	r3, [r3, #26]
 8011850:	f043 0320 	orr.w	r3, r3, #32
 8011854:	b29a      	uxth	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801185a:	2300      	movs	r3, #0
 801185c:	e004      	b.n	8011868 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801185e:	2101      	movs	r1, #1
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f000 f80b 	bl	801187c <tcp_enqueue_flags>
 8011866:	4603      	mov	r3, r0
}
 8011868:	4618      	mov	r0, r3
 801186a:	3714      	adds	r7, #20
 801186c:	46bd      	mov	sp, r7
 801186e:	bd90      	pop	{r4, r7, pc}
 8011870:	080162b4 	.word	0x080162b4
 8011874:	080166e8 	.word	0x080166e8
 8011878:	08016334 	.word	0x08016334

0801187c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b08a      	sub	sp, #40	@ 0x28
 8011880:	af02      	add	r7, sp, #8
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	460b      	mov	r3, r1
 8011886:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011888:	2300      	movs	r3, #0
 801188a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801188c:	2300      	movs	r3, #0
 801188e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011890:	78fb      	ldrb	r3, [r7, #3]
 8011892:	f003 0303 	and.w	r3, r3, #3
 8011896:	2b00      	cmp	r3, #0
 8011898:	d106      	bne.n	80118a8 <tcp_enqueue_flags+0x2c>
 801189a:	4b67      	ldr	r3, [pc, #412]	@ (8011a38 <tcp_enqueue_flags+0x1bc>)
 801189c:	f240 4211 	movw	r2, #1041	@ 0x411
 80118a0:	4966      	ldr	r1, [pc, #408]	@ (8011a3c <tcp_enqueue_flags+0x1c0>)
 80118a2:	4867      	ldr	r0, [pc, #412]	@ (8011a40 <tcp_enqueue_flags+0x1c4>)
 80118a4:	f001 fe24 	bl	80134f0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d106      	bne.n	80118bc <tcp_enqueue_flags+0x40>
 80118ae:	4b62      	ldr	r3, [pc, #392]	@ (8011a38 <tcp_enqueue_flags+0x1bc>)
 80118b0:	f240 4213 	movw	r2, #1043	@ 0x413
 80118b4:	4963      	ldr	r1, [pc, #396]	@ (8011a44 <tcp_enqueue_flags+0x1c8>)
 80118b6:	4862      	ldr	r0, [pc, #392]	@ (8011a40 <tcp_enqueue_flags+0x1c4>)
 80118b8:	f001 fe1a 	bl	80134f0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80118bc:	78fb      	ldrb	r3, [r7, #3]
 80118be:	f003 0302 	and.w	r3, r3, #2
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d001      	beq.n	80118ca <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80118c6:	2301      	movs	r3, #1
 80118c8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118ca:	7ffb      	ldrb	r3, [r7, #31]
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	b2db      	uxtb	r3, r3
 80118d0:	f003 0304 	and.w	r3, r3, #4
 80118d4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	b29b      	uxth	r3, r3
 80118da:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80118de:	4619      	mov	r1, r3
 80118e0:	2036      	movs	r0, #54	@ 0x36
 80118e2:	f7fb f867 	bl	800c9b4 <pbuf_alloc>
 80118e6:	6138      	str	r0, [r7, #16]
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d109      	bne.n	8011902 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	8b5b      	ldrh	r3, [r3, #26]
 80118f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80118f6:	b29a      	uxth	r2, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80118fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011900:	e095      	b.n	8011a2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	895a      	ldrh	r2, [r3, #10]
 8011906:	7dfb      	ldrb	r3, [r7, #23]
 8011908:	b29b      	uxth	r3, r3
 801190a:	429a      	cmp	r2, r3
 801190c:	d206      	bcs.n	801191c <tcp_enqueue_flags+0xa0>
 801190e:	4b4a      	ldr	r3, [pc, #296]	@ (8011a38 <tcp_enqueue_flags+0x1bc>)
 8011910:	f240 4239 	movw	r2, #1081	@ 0x439
 8011914:	494c      	ldr	r1, [pc, #304]	@ (8011a48 <tcp_enqueue_flags+0x1cc>)
 8011916:	484a      	ldr	r0, [pc, #296]	@ (8011a40 <tcp_enqueue_flags+0x1c4>)
 8011918:	f001 fdea 	bl	80134f0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8011920:	78fa      	ldrb	r2, [r7, #3]
 8011922:	7ffb      	ldrb	r3, [r7, #31]
 8011924:	9300      	str	r3, [sp, #0]
 8011926:	460b      	mov	r3, r1
 8011928:	6939      	ldr	r1, [r7, #16]
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7ff fd72 	bl	8011414 <tcp_create_segment>
 8011930:	60f8      	str	r0, [r7, #12]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d109      	bne.n	801194c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	8b5b      	ldrh	r3, [r3, #26]
 801193c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011940:	b29a      	uxth	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011946:	f04f 33ff 	mov.w	r3, #4294967295
 801194a:	e070      	b.n	8011a2e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	68db      	ldr	r3, [r3, #12]
 8011950:	f003 0303 	and.w	r3, r3, #3
 8011954:	2b00      	cmp	r3, #0
 8011956:	d006      	beq.n	8011966 <tcp_enqueue_flags+0xea>
 8011958:	4b37      	ldr	r3, [pc, #220]	@ (8011a38 <tcp_enqueue_flags+0x1bc>)
 801195a:	f240 4242 	movw	r2, #1090	@ 0x442
 801195e:	493b      	ldr	r1, [pc, #236]	@ (8011a4c <tcp_enqueue_flags+0x1d0>)
 8011960:	4837      	ldr	r0, [pc, #220]	@ (8011a40 <tcp_enqueue_flags+0x1c4>)
 8011962:	f001 fdc5 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	891b      	ldrh	r3, [r3, #8]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d006      	beq.n	801197c <tcp_enqueue_flags+0x100>
 801196e:	4b32      	ldr	r3, [pc, #200]	@ (8011a38 <tcp_enqueue_flags+0x1bc>)
 8011970:	f240 4243 	movw	r2, #1091	@ 0x443
 8011974:	4936      	ldr	r1, [pc, #216]	@ (8011a50 <tcp_enqueue_flags+0x1d4>)
 8011976:	4832      	ldr	r0, [pc, #200]	@ (8011a40 <tcp_enqueue_flags+0x1c4>)
 8011978:	f001 fdba 	bl	80134f0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011980:	2b00      	cmp	r3, #0
 8011982:	d103      	bne.n	801198c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	68fa      	ldr	r2, [r7, #12]
 8011988:	66da      	str	r2, [r3, #108]	@ 0x6c
 801198a:	e00d      	b.n	80119a8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011990:	61bb      	str	r3, [r7, #24]
 8011992:	e002      	b.n	801199a <tcp_enqueue_flags+0x11e>
 8011994:	69bb      	ldr	r3, [r7, #24]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	61bb      	str	r3, [r7, #24]
 801199a:	69bb      	ldr	r3, [r7, #24]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d1f8      	bne.n	8011994 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80119a2:	69bb      	ldr	r3, [r7, #24]
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80119b0:	78fb      	ldrb	r3, [r7, #3]
 80119b2:	f003 0302 	and.w	r3, r3, #2
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d104      	bne.n	80119c4 <tcp_enqueue_flags+0x148>
 80119ba:	78fb      	ldrb	r3, [r7, #3]
 80119bc:	f003 0301 	and.w	r3, r3, #1
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d004      	beq.n	80119ce <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80119c8:	1c5a      	adds	r2, r3, #1
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80119ce:	78fb      	ldrb	r3, [r7, #3]
 80119d0:	f003 0301 	and.w	r3, r3, #1
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d006      	beq.n	80119e6 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	8b5b      	ldrh	r3, [r3, #26]
 80119dc:	f043 0320 	orr.w	r3, r3, #32
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fb fb54 	bl	800d098 <pbuf_clen>
 80119f0:	4603      	mov	r3, r0
 80119f2:	461a      	mov	r2, r3
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80119fa:	4413      	add	r3, r2
 80119fc:	b29a      	uxth	r2, r3
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d00e      	beq.n	8011a2c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d10a      	bne.n	8011a2c <tcp_enqueue_flags+0x1b0>
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d106      	bne.n	8011a2c <tcp_enqueue_flags+0x1b0>
 8011a1e:	4b06      	ldr	r3, [pc, #24]	@ (8011a38 <tcp_enqueue_flags+0x1bc>)
 8011a20:	f240 4265 	movw	r2, #1125	@ 0x465
 8011a24:	490b      	ldr	r1, [pc, #44]	@ (8011a54 <tcp_enqueue_flags+0x1d8>)
 8011a26:	4806      	ldr	r0, [pc, #24]	@ (8011a40 <tcp_enqueue_flags+0x1c4>)
 8011a28:	f001 fd62 	bl	80134f0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011a2c:	2300      	movs	r3, #0
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3720      	adds	r7, #32
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	080162b4 	.word	0x080162b4
 8011a3c:	08016704 	.word	0x08016704
 8011a40:	08016334 	.word	0x08016334
 8011a44:	0801675c 	.word	0x0801675c
 8011a48:	0801677c 	.word	0x0801677c
 8011a4c:	080167b8 	.word	0x080167b8
 8011a50:	080167d0 	.word	0x080167d0
 8011a54:	080167fc 	.word	0x080167fc

08011a58 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011a58:	b5b0      	push	{r4, r5, r7, lr}
 8011a5a:	b08a      	sub	sp, #40	@ 0x28
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d106      	bne.n	8011a74 <tcp_output+0x1c>
 8011a66:	4b8a      	ldr	r3, [pc, #552]	@ (8011c90 <tcp_output+0x238>)
 8011a68:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8011a6c:	4989      	ldr	r1, [pc, #548]	@ (8011c94 <tcp_output+0x23c>)
 8011a6e:	488a      	ldr	r0, [pc, #552]	@ (8011c98 <tcp_output+0x240>)
 8011a70:	f001 fd3e 	bl	80134f0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	7d1b      	ldrb	r3, [r3, #20]
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	d106      	bne.n	8011a8a <tcp_output+0x32>
 8011a7c:	4b84      	ldr	r3, [pc, #528]	@ (8011c90 <tcp_output+0x238>)
 8011a7e:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8011a82:	4986      	ldr	r1, [pc, #536]	@ (8011c9c <tcp_output+0x244>)
 8011a84:	4884      	ldr	r0, [pc, #528]	@ (8011c98 <tcp_output+0x240>)
 8011a86:	f001 fd33 	bl	80134f0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011a8a:	4b85      	ldr	r3, [pc, #532]	@ (8011ca0 <tcp_output+0x248>)
 8011a8c:	681b      	ldr	r3, [r3, #0]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	429a      	cmp	r2, r3
 8011a92:	d101      	bne.n	8011a98 <tcp_output+0x40>
    return ERR_OK;
 8011a94:	2300      	movs	r3, #0
 8011a96:	e1ce      	b.n	8011e36 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	bf28      	it	cs
 8011aa8:	4613      	movcs	r3, r2
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ab2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8011ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d10b      	bne.n	8011ad2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	8b5b      	ldrh	r3, [r3, #26]
 8011abe:	f003 0302 	and.w	r3, r3, #2
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	f000 81aa 	beq.w	8011e1c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fdcb 	bl	8012664 <tcp_send_empty_ack>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	e1b1      	b.n	8011e36 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011ad2:	6879      	ldr	r1, [r7, #4]
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	3304      	adds	r3, #4
 8011ad8:	461a      	mov	r2, r3
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f7ff fc7e 	bl	80113dc <tcp_route>
 8011ae0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d102      	bne.n	8011aee <tcp_output+0x96>
    return ERR_RTE;
 8011ae8:	f06f 0303 	mvn.w	r3, #3
 8011aec:	e1a3      	b.n	8011e36 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d003      	beq.n	8011afc <tcp_output+0xa4>
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d111      	bne.n	8011b20 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011afc:	697b      	ldr	r3, [r7, #20]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d002      	beq.n	8011b08 <tcp_output+0xb0>
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	3304      	adds	r3, #4
 8011b06:	e000      	b.n	8011b0a <tcp_output+0xb2>
 8011b08:	2300      	movs	r3, #0
 8011b0a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d102      	bne.n	8011b18 <tcp_output+0xc0>
      return ERR_RTE;
 8011b12:	f06f 0303 	mvn.w	r3, #3
 8011b16:	e18e      	b.n	8011e36 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	681a      	ldr	r2, [r3, #0]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b22:	68db      	ldr	r3, [r3, #12]
 8011b24:	685b      	ldr	r3, [r3, #4]
 8011b26:	4618      	mov	r0, r3
 8011b28:	f7f7 fb89 	bl	800923e <lwip_htonl>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b36:	8912      	ldrh	r2, [r2, #8]
 8011b38:	4413      	add	r3, r2
 8011b3a:	69ba      	ldr	r2, [r7, #24]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d227      	bcs.n	8011b90 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011b46:	461a      	mov	r2, r3
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	d114      	bne.n	8011b78 <tcp_output+0x120>
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d110      	bne.n	8011b78 <tcp_output+0x120>
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d10b      	bne.n	8011b78 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2200      	movs	r2, #0
 8011b64:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2201      	movs	r2, #1
 8011b6c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	2200      	movs	r2, #0
 8011b74:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	8b5b      	ldrh	r3, [r3, #26]
 8011b7c:	f003 0302 	and.w	r3, r3, #2
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 814d 	beq.w	8011e20 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 fd6c 	bl	8012664 <tcp_send_empty_ack>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	e152      	b.n	8011e36 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	2200      	movs	r2, #0
 8011b94:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011b9c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011b9e:	6a3b      	ldr	r3, [r7, #32]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	f000 811c 	beq.w	8011dde <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011ba6:	e002      	b.n	8011bae <tcp_output+0x156>
 8011ba8:	6a3b      	ldr	r3, [r7, #32]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	623b      	str	r3, [r7, #32]
 8011bae:	6a3b      	ldr	r3, [r7, #32]
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d1f8      	bne.n	8011ba8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011bb6:	e112      	b.n	8011dde <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	899b      	ldrh	r3, [r3, #12]
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f7 fb27 	bl	8009214 <lwip_htons>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	f003 0304 	and.w	r3, r3, #4
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d006      	beq.n	8011be0 <tcp_output+0x188>
 8011bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8011c90 <tcp_output+0x238>)
 8011bd4:	f240 5236 	movw	r2, #1334	@ 0x536
 8011bd8:	4932      	ldr	r1, [pc, #200]	@ (8011ca4 <tcp_output+0x24c>)
 8011bda:	482f      	ldr	r0, [pc, #188]	@ (8011c98 <tcp_output+0x240>)
 8011bdc:	f001 fc88 	bl	80134f0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d01f      	beq.n	8011c28 <tcp_output+0x1d0>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	8b5b      	ldrh	r3, [r3, #26]
 8011bec:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d119      	bne.n	8011c28 <tcp_output+0x1d0>
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00b      	beq.n	8011c14 <tcp_output+0x1bc>
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	d110      	bne.n	8011c28 <tcp_output+0x1d0>
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c0a:	891a      	ldrh	r2, [r3, #8]
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8011c10:	429a      	cmp	r2, r3
 8011c12:	d209      	bcs.n	8011c28 <tcp_output+0x1d0>
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d004      	beq.n	8011c28 <tcp_output+0x1d0>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8011c24:	2b08      	cmp	r3, #8
 8011c26:	d901      	bls.n	8011c2c <tcp_output+0x1d4>
 8011c28:	2301      	movs	r3, #1
 8011c2a:	e000      	b.n	8011c2e <tcp_output+0x1d6>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d106      	bne.n	8011c40 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	8b5b      	ldrh	r3, [r3, #26]
 8011c36:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f000 80e4 	beq.w	8011e08 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	7d1b      	ldrb	r3, [r3, #20]
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d00d      	beq.n	8011c64 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4a:	68db      	ldr	r3, [r3, #12]
 8011c4c:	899b      	ldrh	r3, [r3, #12]
 8011c4e:	b29c      	uxth	r4, r3
 8011c50:	2010      	movs	r0, #16
 8011c52:	f7f7 fadf 	bl	8009214 <lwip_htons>
 8011c56:	4603      	mov	r3, r0
 8011c58:	461a      	mov	r2, r3
 8011c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c5c:	68db      	ldr	r3, [r3, #12]
 8011c5e:	4322      	orrs	r2, r4
 8011c60:	b292      	uxth	r2, r2
 8011c62:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011c64:	697a      	ldr	r2, [r7, #20]
 8011c66:	6879      	ldr	r1, [r7, #4]
 8011c68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c6a:	f000 f909 	bl	8011e80 <tcp_output_segment>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d016      	beq.n	8011ca8 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	8b5b      	ldrh	r3, [r3, #26]
 8011c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c82:	b29a      	uxth	r2, r3
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	835a      	strh	r2, [r3, #26]
      return err;
 8011c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c8c:	e0d3      	b.n	8011e36 <tcp_output+0x3de>
 8011c8e:	bf00      	nop
 8011c90:	080162b4 	.word	0x080162b4
 8011c94:	08016824 	.word	0x08016824
 8011c98:	08016334 	.word	0x08016334
 8011c9c:	0801683c 	.word	0x0801683c
 8011ca0:	240084c8 	.word	0x240084c8
 8011ca4:	08016864 	.word	0x08016864
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011caa:	681a      	ldr	r2, [r3, #0]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	7d1b      	ldrb	r3, [r3, #20]
 8011cb4:	2b02      	cmp	r3, #2
 8011cb6:	d006      	beq.n	8011cc6 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	8b5b      	ldrh	r3, [r3, #26]
 8011cbc:	f023 0303 	bic.w	r3, r3, #3
 8011cc0:	b29a      	uxth	r2, r3
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7f7 fab6 	bl	800923e <lwip_htonl>
 8011cd2:	4604      	mov	r4, r0
 8011cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd6:	891b      	ldrh	r3, [r3, #8]
 8011cd8:	461d      	mov	r5, r3
 8011cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cdc:	68db      	ldr	r3, [r3, #12]
 8011cde:	899b      	ldrh	r3, [r3, #12]
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f7f7 fa96 	bl	8009214 <lwip_htons>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	f003 0303 	and.w	r3, r3, #3
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d001      	beq.n	8011cf8 <tcp_output+0x2a0>
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e000      	b.n	8011cfa <tcp_output+0x2a2>
 8011cf8:	2300      	movs	r3, #0
 8011cfa:	442b      	add	r3, r5
 8011cfc:	4423      	add	r3, r4
 8011cfe:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	1ad3      	subs	r3, r2, r3
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	da02      	bge.n	8011d12 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	68ba      	ldr	r2, [r7, #8]
 8011d10:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d14:	891b      	ldrh	r3, [r3, #8]
 8011d16:	461c      	mov	r4, r3
 8011d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	899b      	ldrh	r3, [r3, #12]
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7f7 fa77 	bl	8009214 <lwip_htons>
 8011d26:	4603      	mov	r3, r0
 8011d28:	b2db      	uxtb	r3, r3
 8011d2a:	f003 0303 	and.w	r3, r3, #3
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d001      	beq.n	8011d36 <tcp_output+0x2de>
 8011d32:	2301      	movs	r3, #1
 8011d34:	e000      	b.n	8011d38 <tcp_output+0x2e0>
 8011d36:	2300      	movs	r3, #0
 8011d38:	4423      	add	r3, r4
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d049      	beq.n	8011dd2 <tcp_output+0x37a>
      seg->next = NULL;
 8011d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d40:	2200      	movs	r2, #0
 8011d42:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d105      	bne.n	8011d58 <tcp_output+0x300>
        pcb->unacked = seg;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d50:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8011d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d54:	623b      	str	r3, [r7, #32]
 8011d56:	e03f      	b.n	8011dd8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7f7 fa6d 	bl	800923e <lwip_htonl>
 8011d64:	4604      	mov	r4, r0
 8011d66:	6a3b      	ldr	r3, [r7, #32]
 8011d68:	68db      	ldr	r3, [r3, #12]
 8011d6a:	685b      	ldr	r3, [r3, #4]
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f7 fa66 	bl	800923e <lwip_htonl>
 8011d72:	4603      	mov	r3, r0
 8011d74:	1ae3      	subs	r3, r4, r3
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	da24      	bge.n	8011dc4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	3370      	adds	r3, #112	@ 0x70
 8011d7e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011d80:	e002      	b.n	8011d88 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d011      	beq.n	8011db4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	68db      	ldr	r3, [r3, #12]
 8011d96:	685b      	ldr	r3, [r3, #4]
 8011d98:	4618      	mov	r0, r3
 8011d9a:	f7f7 fa50 	bl	800923e <lwip_htonl>
 8011d9e:	4604      	mov	r4, r0
 8011da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7f7 fa49 	bl	800923e <lwip_htonl>
 8011dac:	4603      	mov	r3, r0
 8011dae:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	dbe6      	blt.n	8011d82 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011db4:	69fb      	ldr	r3, [r7, #28]
 8011db6:	681a      	ldr	r2, [r3, #0]
 8011db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011dba:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011dbc:	69fb      	ldr	r3, [r7, #28]
 8011dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dc0:	601a      	str	r2, [r3, #0]
 8011dc2:	e009      	b.n	8011dd8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011dc4:	6a3b      	ldr	r3, [r7, #32]
 8011dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dc8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011dca:	6a3b      	ldr	r3, [r7, #32]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	623b      	str	r3, [r7, #32]
 8011dd0:	e002      	b.n	8011dd8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011dd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011dd4:	f7fc fc45 	bl	800e662 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8011dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d012      	beq.n	8011e0a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de6:	68db      	ldr	r3, [r3, #12]
 8011de8:	685b      	ldr	r3, [r3, #4]
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7f7 fa27 	bl	800923e <lwip_htonl>
 8011df0:	4602      	mov	r2, r0
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011df6:	1ad3      	subs	r3, r2, r3
 8011df8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011dfa:	8912      	ldrh	r2, [r2, #8]
 8011dfc:	4413      	add	r3, r2
  while (seg != NULL &&
 8011dfe:	69ba      	ldr	r2, [r7, #24]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	f4bf aed9 	bcs.w	8011bb8 <tcp_output+0x160>
 8011e06:	e000      	b.n	8011e0a <tcp_output+0x3b2>
      break;
 8011e08:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d108      	bne.n	8011e24 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2200      	movs	r2, #0
 8011e16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8011e1a:	e004      	b.n	8011e26 <tcp_output+0x3ce>
    goto output_done;
 8011e1c:	bf00      	nop
 8011e1e:	e002      	b.n	8011e26 <tcp_output+0x3ce>
    goto output_done;
 8011e20:	bf00      	nop
 8011e22:	e000      	b.n	8011e26 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011e24:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	8b5b      	ldrh	r3, [r3, #26]
 8011e2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011e2e:	b29a      	uxth	r2, r3
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011e34:	2300      	movs	r3, #0
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3728      	adds	r7, #40	@ 0x28
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e3e:	bf00      	nop

08011e40 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b082      	sub	sp, #8
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d106      	bne.n	8011e5c <tcp_output_segment_busy+0x1c>
 8011e4e:	4b09      	ldr	r3, [pc, #36]	@ (8011e74 <tcp_output_segment_busy+0x34>)
 8011e50:	f240 529a 	movw	r2, #1434	@ 0x59a
 8011e54:	4908      	ldr	r1, [pc, #32]	@ (8011e78 <tcp_output_segment_busy+0x38>)
 8011e56:	4809      	ldr	r0, [pc, #36]	@ (8011e7c <tcp_output_segment_busy+0x3c>)
 8011e58:	f001 fb4a 	bl	80134f0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	685b      	ldr	r3, [r3, #4]
 8011e60:	7b9b      	ldrb	r3, [r3, #14]
 8011e62:	2b01      	cmp	r3, #1
 8011e64:	d001      	beq.n	8011e6a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011e66:	2301      	movs	r3, #1
 8011e68:	e000      	b.n	8011e6c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011e6a:	2300      	movs	r3, #0
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3708      	adds	r7, #8
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}
 8011e74:	080162b4 	.word	0x080162b4
 8011e78:	0801687c 	.word	0x0801687c
 8011e7c:	08016334 	.word	0x08016334

08011e80 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011e80:	b5b0      	push	{r4, r5, r7, lr}
 8011e82:	b08c      	sub	sp, #48	@ 0x30
 8011e84:	af04      	add	r7, sp, #16
 8011e86:	60f8      	str	r0, [r7, #12]
 8011e88:	60b9      	str	r1, [r7, #8]
 8011e8a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d106      	bne.n	8011ea0 <tcp_output_segment+0x20>
 8011e92:	4b64      	ldr	r3, [pc, #400]	@ (8012024 <tcp_output_segment+0x1a4>)
 8011e94:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8011e98:	4963      	ldr	r1, [pc, #396]	@ (8012028 <tcp_output_segment+0x1a8>)
 8011e9a:	4864      	ldr	r0, [pc, #400]	@ (801202c <tcp_output_segment+0x1ac>)
 8011e9c:	f001 fb28 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d106      	bne.n	8011eb4 <tcp_output_segment+0x34>
 8011ea6:	4b5f      	ldr	r3, [pc, #380]	@ (8012024 <tcp_output_segment+0x1a4>)
 8011ea8:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8011eac:	4960      	ldr	r1, [pc, #384]	@ (8012030 <tcp_output_segment+0x1b0>)
 8011eae:	485f      	ldr	r0, [pc, #380]	@ (801202c <tcp_output_segment+0x1ac>)
 8011eb0:	f001 fb1e 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d106      	bne.n	8011ec8 <tcp_output_segment+0x48>
 8011eba:	4b5a      	ldr	r3, [pc, #360]	@ (8012024 <tcp_output_segment+0x1a4>)
 8011ebc:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8011ec0:	495c      	ldr	r1, [pc, #368]	@ (8012034 <tcp_output_segment+0x1b4>)
 8011ec2:	485a      	ldr	r0, [pc, #360]	@ (801202c <tcp_output_segment+0x1ac>)
 8011ec4:	f001 fb14 	bl	80134f0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011ec8:	68f8      	ldr	r0, [r7, #12]
 8011eca:	f7ff ffb9 	bl	8011e40 <tcp_output_segment_busy>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d001      	beq.n	8011ed8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	e0a1      	b.n	801201c <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	68dc      	ldr	r4, [r3, #12]
 8011ee0:	4610      	mov	r0, r2
 8011ee2:	f7f7 f9ac 	bl	800923e <lwip_htonl>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011eea:	68bb      	ldr	r3, [r7, #8]
 8011eec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	68dc      	ldr	r4, [r3, #12]
 8011ef2:	4610      	mov	r0, r2
 8011ef4:	f7f7 f98e 	bl	8009214 <lwip_htons>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f00:	68ba      	ldr	r2, [r7, #8]
 8011f02:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8011f04:	441a      	add	r2, r3
 8011f06:	68bb      	ldr	r3, [r7, #8]
 8011f08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	3314      	adds	r3, #20
 8011f10:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	7a9b      	ldrb	r3, [r3, #10]
 8011f16:	f003 0301 	and.w	r3, r3, #1
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d015      	beq.n	8011f4a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	3304      	adds	r3, #4
 8011f22:	461a      	mov	r2, r3
 8011f24:	6879      	ldr	r1, [r7, #4]
 8011f26:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8011f2a:	f7fc fe91 	bl	800ec50 <tcp_eff_send_mss_netif>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011f32:	8b7b      	ldrh	r3, [r7, #26]
 8011f34:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f7f7 f980 	bl	800923e <lwip_htonl>
 8011f3e:	4602      	mov	r2, r0
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	3304      	adds	r3, #4
 8011f48:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	da02      	bge.n	8011f5a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	2200      	movs	r2, #0
 8011f58:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d10c      	bne.n	8011f7c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011f62:	4b35      	ldr	r3, [pc, #212]	@ (8012038 <tcp_output_segment+0x1b8>)
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7f7 f964 	bl	800923e <lwip_htonl>
 8011f76:	4602      	mov	r2, r0
 8011f78:	68bb      	ldr	r3, [r7, #8]
 8011f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	68da      	ldr	r2, [r3, #12]
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	1ad3      	subs	r3, r2, r3
 8011f88:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	8959      	ldrh	r1, [r3, #10]
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	685b      	ldr	r3, [r3, #4]
 8011f94:	8b3a      	ldrh	r2, [r7, #24]
 8011f96:	1a8a      	subs	r2, r1, r2
 8011f98:	b292      	uxth	r2, r2
 8011f9a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	685b      	ldr	r3, [r3, #4]
 8011fa0:	8919      	ldrh	r1, [r3, #8]
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	8b3a      	ldrh	r2, [r7, #24]
 8011fa8:	1a8a      	subs	r2, r1, r2
 8011faa:	b292      	uxth	r2, r2
 8011fac:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	68fa      	ldr	r2, [r7, #12]
 8011fb4:	68d2      	ldr	r2, [r2, #12]
 8011fb6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	68db      	ldr	r3, [r3, #12]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	741a      	strb	r2, [r3, #16]
 8011fc0:	2200      	movs	r2, #0
 8011fc2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	68da      	ldr	r2, [r3, #12]
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	7a9b      	ldrb	r3, [r3, #10]
 8011fcc:	f003 0301 	and.w	r3, r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d001      	beq.n	8011fd8 <tcp_output_segment+0x158>
 8011fd4:	2318      	movs	r3, #24
 8011fd6:	e000      	b.n	8011fda <tcp_output_segment+0x15a>
 8011fd8:	2314      	movs	r3, #20
 8011fda:	4413      	add	r3, r2
 8011fdc:	69fa      	ldr	r2, [r7, #28]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d006      	beq.n	8011ff0 <tcp_output_segment+0x170>
 8011fe2:	4b10      	ldr	r3, [pc, #64]	@ (8012024 <tcp_output_segment+0x1a4>)
 8011fe4:	f240 621c 	movw	r2, #1564	@ 0x61c
 8011fe8:	4914      	ldr	r1, [pc, #80]	@ (801203c <tcp_output_segment+0x1bc>)
 8011fea:	4810      	ldr	r0, [pc, #64]	@ (801202c <tcp_output_segment+0x1ac>)
 8011fec:	f001 fa80 	bl	80134f0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	6858      	ldr	r0, [r3, #4]
 8011ff4:	68b9      	ldr	r1, [r7, #8]
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	1d1c      	adds	r4, r3, #4
 8011ffa:	68bb      	ldr	r3, [r7, #8]
 8011ffc:	7add      	ldrb	r5, [r3, #11]
 8011ffe:	68bb      	ldr	r3, [r7, #8]
 8012000:	7a9b      	ldrb	r3, [r3, #10]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	9202      	str	r2, [sp, #8]
 8012006:	2206      	movs	r2, #6
 8012008:	9201      	str	r2, [sp, #4]
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	462b      	mov	r3, r5
 801200e:	4622      	mov	r2, r4
 8012010:	f7f8 fcb4 	bl	800a97c <ip4_output_if>
 8012014:	4603      	mov	r3, r0
 8012016:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012018:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801201c:	4618      	mov	r0, r3
 801201e:	3720      	adds	r7, #32
 8012020:	46bd      	mov	sp, r7
 8012022:	bdb0      	pop	{r4, r5, r7, pc}
 8012024:	080162b4 	.word	0x080162b4
 8012028:	080168a4 	.word	0x080168a4
 801202c:	08016334 	.word	0x08016334
 8012030:	080168c4 	.word	0x080168c4
 8012034:	080168e4 	.word	0x080168e4
 8012038:	2400847c 	.word	0x2400847c
 801203c:	08016908 	.word	0x08016908

08012040 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012040:	b5b0      	push	{r4, r5, r7, lr}
 8012042:	b084      	sub	sp, #16
 8012044:	af00      	add	r7, sp, #0
 8012046:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d106      	bne.n	801205c <tcp_rexmit_rto_prepare+0x1c>
 801204e:	4b31      	ldr	r3, [pc, #196]	@ (8012114 <tcp_rexmit_rto_prepare+0xd4>)
 8012050:	f240 6263 	movw	r2, #1635	@ 0x663
 8012054:	4930      	ldr	r1, [pc, #192]	@ (8012118 <tcp_rexmit_rto_prepare+0xd8>)
 8012056:	4831      	ldr	r0, [pc, #196]	@ (801211c <tcp_rexmit_rto_prepare+0xdc>)
 8012058:	f001 fa4a 	bl	80134f0 <iprintf>

  if (pcb->unacked == NULL) {
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012060:	2b00      	cmp	r3, #0
 8012062:	d102      	bne.n	801206a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012064:	f06f 0305 	mvn.w	r3, #5
 8012068:	e050      	b.n	801210c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801206e:	60fb      	str	r3, [r7, #12]
 8012070:	e00b      	b.n	801208a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012072:	68f8      	ldr	r0, [r7, #12]
 8012074:	f7ff fee4 	bl	8011e40 <tcp_output_segment_busy>
 8012078:	4603      	mov	r3, r0
 801207a:	2b00      	cmp	r3, #0
 801207c:	d002      	beq.n	8012084 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801207e:	f06f 0305 	mvn.w	r3, #5
 8012082:	e043      	b.n	801210c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	60fb      	str	r3, [r7, #12]
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d1ef      	bne.n	8012072 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012092:	68f8      	ldr	r0, [r7, #12]
 8012094:	f7ff fed4 	bl	8011e40 <tcp_output_segment_busy>
 8012098:	4603      	mov	r3, r0
 801209a:	2b00      	cmp	r3, #0
 801209c:	d002      	beq.n	80120a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801209e:	f06f 0305 	mvn.w	r3, #5
 80120a2:	e033      	b.n	801210c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2200      	movs	r2, #0
 80120b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	8b5b      	ldrh	r3, [r3, #26]
 80120be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	68db      	ldr	r3, [r3, #12]
 80120cc:	685b      	ldr	r3, [r3, #4]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7f7 f8b5 	bl	800923e <lwip_htonl>
 80120d4:	4604      	mov	r4, r0
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	891b      	ldrh	r3, [r3, #8]
 80120da:	461d      	mov	r5, r3
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	899b      	ldrh	r3, [r3, #12]
 80120e2:	b29b      	uxth	r3, r3
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7f7 f895 	bl	8009214 <lwip_htons>
 80120ea:	4603      	mov	r3, r0
 80120ec:	b2db      	uxtb	r3, r3
 80120ee:	f003 0303 	and.w	r3, r3, #3
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <tcp_rexmit_rto_prepare+0xba>
 80120f6:	2301      	movs	r3, #1
 80120f8:	e000      	b.n	80120fc <tcp_rexmit_rto_prepare+0xbc>
 80120fa:	2300      	movs	r3, #0
 80120fc:	442b      	add	r3, r5
 80120fe:	18e2      	adds	r2, r4, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2200      	movs	r2, #0
 8012108:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801210a:	2300      	movs	r3, #0
}
 801210c:	4618      	mov	r0, r3
 801210e:	3710      	adds	r7, #16
 8012110:	46bd      	mov	sp, r7
 8012112:	bdb0      	pop	{r4, r5, r7, pc}
 8012114:	080162b4 	.word	0x080162b4
 8012118:	0801691c 	.word	0x0801691c
 801211c:	08016334 	.word	0x08016334

08012120 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d106      	bne.n	801213c <tcp_rexmit_rto_commit+0x1c>
 801212e:	4b0d      	ldr	r3, [pc, #52]	@ (8012164 <tcp_rexmit_rto_commit+0x44>)
 8012130:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012134:	490c      	ldr	r1, [pc, #48]	@ (8012168 <tcp_rexmit_rto_commit+0x48>)
 8012136:	480d      	ldr	r0, [pc, #52]	@ (801216c <tcp_rexmit_rto_commit+0x4c>)
 8012138:	f001 f9da 	bl	80134f0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012142:	2bff      	cmp	r3, #255	@ 0xff
 8012144:	d007      	beq.n	8012156 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801214c:	3301      	adds	r3, #1
 801214e:	b2da      	uxtb	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f7ff fc7e 	bl	8011a58 <tcp_output>
}
 801215c:	bf00      	nop
 801215e:	3708      	adds	r7, #8
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	080162b4 	.word	0x080162b4
 8012168:	08016940 	.word	0x08016940
 801216c:	08016334 	.word	0x08016334

08012170 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012170:	b580      	push	{r7, lr}
 8012172:	b082      	sub	sp, #8
 8012174:	af00      	add	r7, sp, #0
 8012176:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d106      	bne.n	801218c <tcp_rexmit_rto+0x1c>
 801217e:	4b0a      	ldr	r3, [pc, #40]	@ (80121a8 <tcp_rexmit_rto+0x38>)
 8012180:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8012184:	4909      	ldr	r1, [pc, #36]	@ (80121ac <tcp_rexmit_rto+0x3c>)
 8012186:	480a      	ldr	r0, [pc, #40]	@ (80121b0 <tcp_rexmit_rto+0x40>)
 8012188:	f001 f9b2 	bl	80134f0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f7ff ff57 	bl	8012040 <tcp_rexmit_rto_prepare>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d102      	bne.n	801219e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012198:	6878      	ldr	r0, [r7, #4]
 801219a:	f7ff ffc1 	bl	8012120 <tcp_rexmit_rto_commit>
  }
}
 801219e:	bf00      	nop
 80121a0:	3708      	adds	r7, #8
 80121a2:	46bd      	mov	sp, r7
 80121a4:	bd80      	pop	{r7, pc}
 80121a6:	bf00      	nop
 80121a8:	080162b4 	.word	0x080162b4
 80121ac:	08016964 	.word	0x08016964
 80121b0:	08016334 	.word	0x08016334

080121b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80121b4:	b590      	push	{r4, r7, lr}
 80121b6:	b085      	sub	sp, #20
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d106      	bne.n	80121d0 <tcp_rexmit+0x1c>
 80121c2:	4b2f      	ldr	r3, [pc, #188]	@ (8012280 <tcp_rexmit+0xcc>)
 80121c4:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80121c8:	492e      	ldr	r1, [pc, #184]	@ (8012284 <tcp_rexmit+0xd0>)
 80121ca:	482f      	ldr	r0, [pc, #188]	@ (8012288 <tcp_rexmit+0xd4>)
 80121cc:	f001 f990 	bl	80134f0 <iprintf>

  if (pcb->unacked == NULL) {
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d102      	bne.n	80121de <tcp_rexmit+0x2a>
    return ERR_VAL;
 80121d8:	f06f 0305 	mvn.w	r3, #5
 80121dc:	e04c      	b.n	8012278 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80121e4:	68b8      	ldr	r0, [r7, #8]
 80121e6:	f7ff fe2b 	bl	8011e40 <tcp_output_segment_busy>
 80121ea:	4603      	mov	r3, r0
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d002      	beq.n	80121f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80121f0:	f06f 0305 	mvn.w	r3, #5
 80121f4:	e040      	b.n	8012278 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	681a      	ldr	r2, [r3, #0]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	336c      	adds	r3, #108	@ 0x6c
 8012202:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012204:	e002      	b.n	801220c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d011      	beq.n	8012238 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	685b      	ldr	r3, [r3, #4]
 801221c:	4618      	mov	r0, r3
 801221e:	f7f7 f80e 	bl	800923e <lwip_htonl>
 8012222:	4604      	mov	r4, r0
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	4618      	mov	r0, r3
 801222c:	f7f7 f807 	bl	800923e <lwip_htonl>
 8012230:	4603      	mov	r3, r0
 8012232:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012234:	2b00      	cmp	r3, #0
 8012236:	dbe6      	blt.n	8012206 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d103      	bne.n	8012256 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2200      	movs	r2, #0
 8012252:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801225c:	2bff      	cmp	r3, #255	@ 0xff
 801225e:	d007      	beq.n	8012270 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012266:	3301      	adds	r3, #1
 8012268:	b2da      	uxtb	r2, r3
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2200      	movs	r2, #0
 8012274:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012276:	2300      	movs	r3, #0
}
 8012278:	4618      	mov	r0, r3
 801227a:	3714      	adds	r7, #20
 801227c:	46bd      	mov	sp, r7
 801227e:	bd90      	pop	{r4, r7, pc}
 8012280:	080162b4 	.word	0x080162b4
 8012284:	08016980 	.word	0x08016980
 8012288:	08016334 	.word	0x08016334

0801228c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b082      	sub	sp, #8
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d106      	bne.n	80122a8 <tcp_rexmit_fast+0x1c>
 801229a:	4b2a      	ldr	r3, [pc, #168]	@ (8012344 <tcp_rexmit_fast+0xb8>)
 801229c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80122a0:	4929      	ldr	r1, [pc, #164]	@ (8012348 <tcp_rexmit_fast+0xbc>)
 80122a2:	482a      	ldr	r0, [pc, #168]	@ (801234c <tcp_rexmit_fast+0xc0>)
 80122a4:	f001 f924 	bl	80134f0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d045      	beq.n	801233c <tcp_rexmit_fast+0xb0>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	8b5b      	ldrh	r3, [r3, #26]
 80122b4:	f003 0304 	and.w	r3, r3, #4
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d13f      	bne.n	801233c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ff79 	bl	80121b4 <tcp_rexmit>
 80122c2:	4603      	mov	r3, r0
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d139      	bne.n	801233c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80122d4:	4293      	cmp	r3, r2
 80122d6:	bf28      	it	cs
 80122d8:	4613      	movcs	r3, r2
 80122da:	b29b      	uxth	r3, r3
 80122dc:	2b00      	cmp	r3, #0
 80122de:	da00      	bge.n	80122e2 <tcp_rexmit_fast+0x56>
 80122e0:	3301      	adds	r3, #1
 80122e2:	105b      	asrs	r3, r3, #1
 80122e4:	b29a      	uxth	r2, r3
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80122f2:	461a      	mov	r2, r3
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80122f8:	005b      	lsls	r3, r3, #1
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d206      	bcs.n	801230c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	b29a      	uxth	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012316:	4619      	mov	r1, r3
 8012318:	0049      	lsls	r1, r1, #1
 801231a:	440b      	add	r3, r1
 801231c:	b29b      	uxth	r3, r3
 801231e:	4413      	add	r3, r2
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	8b5b      	ldrh	r3, [r3, #26]
 801232c:	f043 0304 	orr.w	r3, r3, #4
 8012330:	b29a      	uxth	r2, r3
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801233c:	bf00      	nop
 801233e:	3708      	adds	r7, #8
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}
 8012344:	080162b4 	.word	0x080162b4
 8012348:	08016998 	.word	0x08016998
 801234c:	08016334 	.word	0x08016334

08012350 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b086      	sub	sp, #24
 8012354:	af00      	add	r7, sp, #0
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	607b      	str	r3, [r7, #4]
 801235a:	460b      	mov	r3, r1
 801235c:	817b      	strh	r3, [r7, #10]
 801235e:	4613      	mov	r3, r2
 8012360:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012362:	897a      	ldrh	r2, [r7, #10]
 8012364:	893b      	ldrh	r3, [r7, #8]
 8012366:	4413      	add	r3, r2
 8012368:	b29b      	uxth	r3, r3
 801236a:	3314      	adds	r3, #20
 801236c:	b29b      	uxth	r3, r3
 801236e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012372:	4619      	mov	r1, r3
 8012374:	2022      	movs	r0, #34	@ 0x22
 8012376:	f7fa fb1d 	bl	800c9b4 <pbuf_alloc>
 801237a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d04d      	beq.n	801241e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012382:	897b      	ldrh	r3, [r7, #10]
 8012384:	3313      	adds	r3, #19
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	8952      	ldrh	r2, [r2, #10]
 801238a:	4293      	cmp	r3, r2
 801238c:	db06      	blt.n	801239c <tcp_output_alloc_header_common+0x4c>
 801238e:	4b26      	ldr	r3, [pc, #152]	@ (8012428 <tcp_output_alloc_header_common+0xd8>)
 8012390:	f240 7223 	movw	r2, #1827	@ 0x723
 8012394:	4925      	ldr	r1, [pc, #148]	@ (801242c <tcp_output_alloc_header_common+0xdc>)
 8012396:	4826      	ldr	r0, [pc, #152]	@ (8012430 <tcp_output_alloc_header_common+0xe0>)
 8012398:	f001 f8aa 	bl	80134f0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80123a2:	8c3b      	ldrh	r3, [r7, #32]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7f6 ff35 	bl	8009214 <lwip_htons>
 80123aa:	4603      	mov	r3, r0
 80123ac:	461a      	mov	r2, r3
 80123ae:	693b      	ldr	r3, [r7, #16]
 80123b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80123b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7f6 ff2d 	bl	8009214 <lwip_htons>
 80123ba:	4603      	mov	r3, r0
 80123bc:	461a      	mov	r2, r3
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80123c2:	693b      	ldr	r3, [r7, #16]
 80123c4:	687a      	ldr	r2, [r7, #4]
 80123c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80123c8:	68f8      	ldr	r0, [r7, #12]
 80123ca:	f7f6 ff38 	bl	800923e <lwip_htonl>
 80123ce:	4602      	mov	r2, r0
 80123d0:	693b      	ldr	r3, [r7, #16]
 80123d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80123d4:	897b      	ldrh	r3, [r7, #10]
 80123d6:	089b      	lsrs	r3, r3, #2
 80123d8:	b29b      	uxth	r3, r3
 80123da:	3305      	adds	r3, #5
 80123dc:	b29b      	uxth	r3, r3
 80123de:	031b      	lsls	r3, r3, #12
 80123e0:	b29a      	uxth	r2, r3
 80123e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	4313      	orrs	r3, r2
 80123ea:	b29b      	uxth	r3, r3
 80123ec:	4618      	mov	r0, r3
 80123ee:	f7f6 ff11 	bl	8009214 <lwip_htons>
 80123f2:	4603      	mov	r3, r0
 80123f4:	461a      	mov	r2, r3
 80123f6:	693b      	ldr	r3, [r7, #16]
 80123f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80123fa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7f6 ff09 	bl	8009214 <lwip_htons>
 8012402:	4603      	mov	r3, r0
 8012404:	461a      	mov	r2, r3
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	2200      	movs	r2, #0
 801240e:	741a      	strb	r2, [r3, #16]
 8012410:	2200      	movs	r2, #0
 8012412:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	2200      	movs	r2, #0
 8012418:	749a      	strb	r2, [r3, #18]
 801241a:	2200      	movs	r2, #0
 801241c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801241e:	697b      	ldr	r3, [r7, #20]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}
 8012428:	080162b4 	.word	0x080162b4
 801242c:	080169b8 	.word	0x080169b8
 8012430:	08016334 	.word	0x08016334

08012434 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012434:	b5b0      	push	{r4, r5, r7, lr}
 8012436:	b08a      	sub	sp, #40	@ 0x28
 8012438:	af04      	add	r7, sp, #16
 801243a:	60f8      	str	r0, [r7, #12]
 801243c:	607b      	str	r3, [r7, #4]
 801243e:	460b      	mov	r3, r1
 8012440:	817b      	strh	r3, [r7, #10]
 8012442:	4613      	mov	r3, r2
 8012444:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d106      	bne.n	801245a <tcp_output_alloc_header+0x26>
 801244c:	4b15      	ldr	r3, [pc, #84]	@ (80124a4 <tcp_output_alloc_header+0x70>)
 801244e:	f240 7242 	movw	r2, #1858	@ 0x742
 8012452:	4915      	ldr	r1, [pc, #84]	@ (80124a8 <tcp_output_alloc_header+0x74>)
 8012454:	4815      	ldr	r0, [pc, #84]	@ (80124ac <tcp_output_alloc_header+0x78>)
 8012456:	f001 f84b 	bl	80134f0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	8adb      	ldrh	r3, [r3, #22]
 8012462:	68fa      	ldr	r2, [r7, #12]
 8012464:	8b12      	ldrh	r2, [r2, #24]
 8012466:	68f9      	ldr	r1, [r7, #12]
 8012468:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801246a:	893d      	ldrh	r5, [r7, #8]
 801246c:	897c      	ldrh	r4, [r7, #10]
 801246e:	9103      	str	r1, [sp, #12]
 8012470:	2110      	movs	r1, #16
 8012472:	9102      	str	r1, [sp, #8]
 8012474:	9201      	str	r2, [sp, #4]
 8012476:	9300      	str	r3, [sp, #0]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	462a      	mov	r2, r5
 801247c:	4621      	mov	r1, r4
 801247e:	f7ff ff67 	bl	8012350 <tcp_output_alloc_header_common>
 8012482:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012484:	697b      	ldr	r3, [r7, #20]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d006      	beq.n	8012498 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801248e:	68fa      	ldr	r2, [r7, #12]
 8012490:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8012492:	441a      	add	r2, r3
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8012498:	697b      	ldr	r3, [r7, #20]
}
 801249a:	4618      	mov	r0, r3
 801249c:	3718      	adds	r7, #24
 801249e:	46bd      	mov	sp, r7
 80124a0:	bdb0      	pop	{r4, r5, r7, pc}
 80124a2:	bf00      	nop
 80124a4:	080162b4 	.word	0x080162b4
 80124a8:	080169e8 	.word	0x080169e8
 80124ac:	08016334 	.word	0x08016334

080124b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b088      	sub	sp, #32
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	4611      	mov	r1, r2
 80124bc:	461a      	mov	r2, r3
 80124be:	460b      	mov	r3, r1
 80124c0:	71fb      	strb	r3, [r7, #7]
 80124c2:	4613      	mov	r3, r2
 80124c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80124c6:	2300      	movs	r3, #0
 80124c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d106      	bne.n	80124de <tcp_output_fill_options+0x2e>
 80124d0:	4b12      	ldr	r3, [pc, #72]	@ (801251c <tcp_output_fill_options+0x6c>)
 80124d2:	f240 7256 	movw	r2, #1878	@ 0x756
 80124d6:	4912      	ldr	r1, [pc, #72]	@ (8012520 <tcp_output_fill_options+0x70>)
 80124d8:	4812      	ldr	r0, [pc, #72]	@ (8012524 <tcp_output_fill_options+0x74>)
 80124da:	f001 f809 	bl	80134f0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80124de:	68bb      	ldr	r3, [r7, #8]
 80124e0:	685b      	ldr	r3, [r3, #4]
 80124e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80124e4:	69bb      	ldr	r3, [r7, #24]
 80124e6:	3314      	adds	r3, #20
 80124e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80124ea:	8bfb      	ldrh	r3, [r7, #30]
 80124ec:	009b      	lsls	r3, r3, #2
 80124ee:	461a      	mov	r2, r3
 80124f0:	79fb      	ldrb	r3, [r7, #7]
 80124f2:	009b      	lsls	r3, r3, #2
 80124f4:	f003 0304 	and.w	r3, r3, #4
 80124f8:	4413      	add	r3, r2
 80124fa:	3314      	adds	r3, #20
 80124fc:	69ba      	ldr	r2, [r7, #24]
 80124fe:	4413      	add	r3, r2
 8012500:	697a      	ldr	r2, [r7, #20]
 8012502:	429a      	cmp	r2, r3
 8012504:	d006      	beq.n	8012514 <tcp_output_fill_options+0x64>
 8012506:	4b05      	ldr	r3, [pc, #20]	@ (801251c <tcp_output_fill_options+0x6c>)
 8012508:	f240 7275 	movw	r2, #1909	@ 0x775
 801250c:	4906      	ldr	r1, [pc, #24]	@ (8012528 <tcp_output_fill_options+0x78>)
 801250e:	4805      	ldr	r0, [pc, #20]	@ (8012524 <tcp_output_fill_options+0x74>)
 8012510:	f000 ffee 	bl	80134f0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012514:	bf00      	nop
 8012516:	3720      	adds	r7, #32
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	080162b4 	.word	0x080162b4
 8012520:	08016a10 	.word	0x08016a10
 8012524:	08016334 	.word	0x08016334
 8012528:	08016908 	.word	0x08016908

0801252c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b08a      	sub	sp, #40	@ 0x28
 8012530:	af04      	add	r7, sp, #16
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
 8012538:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d106      	bne.n	801254e <tcp_output_control_segment+0x22>
 8012540:	4b1c      	ldr	r3, [pc, #112]	@ (80125b4 <tcp_output_control_segment+0x88>)
 8012542:	f240 7287 	movw	r2, #1927	@ 0x787
 8012546:	491c      	ldr	r1, [pc, #112]	@ (80125b8 <tcp_output_control_segment+0x8c>)
 8012548:	481c      	ldr	r0, [pc, #112]	@ (80125bc <tcp_output_control_segment+0x90>)
 801254a:	f000 ffd1 	bl	80134f0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801254e:	683a      	ldr	r2, [r7, #0]
 8012550:	6879      	ldr	r1, [r7, #4]
 8012552:	68f8      	ldr	r0, [r7, #12]
 8012554:	f7fe ff42 	bl	80113dc <tcp_route>
 8012558:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012560:	23fc      	movs	r3, #252	@ 0xfc
 8012562:	75fb      	strb	r3, [r7, #23]
 8012564:	e01c      	b.n	80125a0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d006      	beq.n	801257a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	7adb      	ldrb	r3, [r3, #11]
 8012570:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a9b      	ldrb	r3, [r3, #10]
 8012576:	757b      	strb	r3, [r7, #21]
 8012578:	e003      	b.n	8012582 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801257a:	23ff      	movs	r3, #255	@ 0xff
 801257c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801257e:	2300      	movs	r3, #0
 8012580:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012582:	7dba      	ldrb	r2, [r7, #22]
 8012584:	693b      	ldr	r3, [r7, #16]
 8012586:	9302      	str	r3, [sp, #8]
 8012588:	2306      	movs	r3, #6
 801258a:	9301      	str	r3, [sp, #4]
 801258c:	7d7b      	ldrb	r3, [r7, #21]
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	4613      	mov	r3, r2
 8012592:	683a      	ldr	r2, [r7, #0]
 8012594:	6879      	ldr	r1, [r7, #4]
 8012596:	68b8      	ldr	r0, [r7, #8]
 8012598:	f7f8 f9f0 	bl	800a97c <ip4_output_if>
 801259c:	4603      	mov	r3, r0
 801259e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80125a0:	68b8      	ldr	r0, [r7, #8]
 80125a2:	f7fa fceb 	bl	800cf7c <pbuf_free>
  return err;
 80125a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3718      	adds	r7, #24
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	080162b4 	.word	0x080162b4
 80125b8:	08016a38 	.word	0x08016a38
 80125bc:	08016334 	.word	0x08016334

080125c0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80125c0:	b590      	push	{r4, r7, lr}
 80125c2:	b08b      	sub	sp, #44	@ 0x2c
 80125c4:	af04      	add	r7, sp, #16
 80125c6:	60f8      	str	r0, [r7, #12]
 80125c8:	60b9      	str	r1, [r7, #8]
 80125ca:	607a      	str	r2, [r7, #4]
 80125cc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d106      	bne.n	80125e2 <tcp_rst+0x22>
 80125d4:	4b1f      	ldr	r3, [pc, #124]	@ (8012654 <tcp_rst+0x94>)
 80125d6:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80125da:	491f      	ldr	r1, [pc, #124]	@ (8012658 <tcp_rst+0x98>)
 80125dc:	481f      	ldr	r0, [pc, #124]	@ (801265c <tcp_rst+0x9c>)
 80125de:	f000 ff87 	bl	80134f0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80125e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d106      	bne.n	80125f6 <tcp_rst+0x36>
 80125e8:	4b1a      	ldr	r3, [pc, #104]	@ (8012654 <tcp_rst+0x94>)
 80125ea:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80125ee:	491c      	ldr	r1, [pc, #112]	@ (8012660 <tcp_rst+0xa0>)
 80125f0:	481a      	ldr	r0, [pc, #104]	@ (801265c <tcp_rst+0x9c>)
 80125f2:	f000 ff7d 	bl	80134f0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125f6:	2300      	movs	r3, #0
 80125f8:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80125fa:	f246 0308 	movw	r3, #24584	@ 0x6008
 80125fe:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012600:	7dfb      	ldrb	r3, [r7, #23]
 8012602:	b29c      	uxth	r4, r3
 8012604:	68b8      	ldr	r0, [r7, #8]
 8012606:	f7f6 fe1a 	bl	800923e <lwip_htonl>
 801260a:	4602      	mov	r2, r0
 801260c:	8abb      	ldrh	r3, [r7, #20]
 801260e:	9303      	str	r3, [sp, #12]
 8012610:	2314      	movs	r3, #20
 8012612:	9302      	str	r3, [sp, #8]
 8012614:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8012616:	9301      	str	r3, [sp, #4]
 8012618:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	4613      	mov	r3, r2
 801261e:	2200      	movs	r2, #0
 8012620:	4621      	mov	r1, r4
 8012622:	6878      	ldr	r0, [r7, #4]
 8012624:	f7ff fe94 	bl	8012350 <tcp_output_alloc_header_common>
 8012628:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801262a:	693b      	ldr	r3, [r7, #16]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00c      	beq.n	801264a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012630:	7dfb      	ldrb	r3, [r7, #23]
 8012632:	2200      	movs	r2, #0
 8012634:	6939      	ldr	r1, [r7, #16]
 8012636:	68f8      	ldr	r0, [r7, #12]
 8012638:	f7ff ff3a 	bl	80124b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801263e:	683a      	ldr	r2, [r7, #0]
 8012640:	6939      	ldr	r1, [r7, #16]
 8012642:	68f8      	ldr	r0, [r7, #12]
 8012644:	f7ff ff72 	bl	801252c <tcp_output_control_segment>
 8012648:	e000      	b.n	801264c <tcp_rst+0x8c>
    return;
 801264a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801264c:	371c      	adds	r7, #28
 801264e:	46bd      	mov	sp, r7
 8012650:	bd90      	pop	{r4, r7, pc}
 8012652:	bf00      	nop
 8012654:	080162b4 	.word	0x080162b4
 8012658:	08016a64 	.word	0x08016a64
 801265c:	08016334 	.word	0x08016334
 8012660:	08016a80 	.word	0x08016a80

08012664 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012664:	b590      	push	{r4, r7, lr}
 8012666:	b087      	sub	sp, #28
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801266c:	2300      	movs	r3, #0
 801266e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012670:	2300      	movs	r3, #0
 8012672:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d106      	bne.n	8012688 <tcp_send_empty_ack+0x24>
 801267a:	4b28      	ldr	r3, [pc, #160]	@ (801271c <tcp_send_empty_ack+0xb8>)
 801267c:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8012680:	4927      	ldr	r1, [pc, #156]	@ (8012720 <tcp_send_empty_ack+0xbc>)
 8012682:	4828      	ldr	r0, [pc, #160]	@ (8012724 <tcp_send_empty_ack+0xc0>)
 8012684:	f000 ff34 	bl	80134f0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012688:	7dfb      	ldrb	r3, [r7, #23]
 801268a:	009b      	lsls	r3, r3, #2
 801268c:	b2db      	uxtb	r3, r3
 801268e:	f003 0304 	and.w	r3, r3, #4
 8012692:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012694:	7d7b      	ldrb	r3, [r7, #21]
 8012696:	b29c      	uxth	r4, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801269c:	4618      	mov	r0, r3
 801269e:	f7f6 fdce 	bl	800923e <lwip_htonl>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2200      	movs	r2, #0
 80126a6:	4621      	mov	r1, r4
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f7ff fec3 	bl	8012434 <tcp_output_alloc_header>
 80126ae:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d109      	bne.n	80126ca <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	8b5b      	ldrh	r3, [r3, #26]
 80126ba:	f043 0303 	orr.w	r3, r3, #3
 80126be:	b29a      	uxth	r2, r3
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80126c4:	f06f 0301 	mvn.w	r3, #1
 80126c8:	e023      	b.n	8012712 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80126ca:	7dbb      	ldrb	r3, [r7, #22]
 80126cc:	7dfa      	ldrb	r2, [r7, #23]
 80126ce:	6939      	ldr	r1, [r7, #16]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f7ff feed 	bl	80124b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80126d6:	687a      	ldr	r2, [r7, #4]
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	3304      	adds	r3, #4
 80126dc:	6939      	ldr	r1, [r7, #16]
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ff ff24 	bl	801252c <tcp_output_control_segment>
 80126e4:	4603      	mov	r3, r0
 80126e6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80126e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d007      	beq.n	8012700 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	8b5b      	ldrh	r3, [r3, #26]
 80126f4:	f043 0303 	orr.w	r3, r3, #3
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	835a      	strh	r2, [r3, #26]
 80126fe:	e006      	b.n	801270e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	8b5b      	ldrh	r3, [r3, #26]
 8012704:	f023 0303 	bic.w	r3, r3, #3
 8012708:	b29a      	uxth	r2, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801270e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012712:	4618      	mov	r0, r3
 8012714:	371c      	adds	r7, #28
 8012716:	46bd      	mov	sp, r7
 8012718:	bd90      	pop	{r4, r7, pc}
 801271a:	bf00      	nop
 801271c:	080162b4 	.word	0x080162b4
 8012720:	08016a9c 	.word	0x08016a9c
 8012724:	08016334 	.word	0x08016334

08012728 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012728:	b590      	push	{r4, r7, lr}
 801272a:	b087      	sub	sp, #28
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012730:	2300      	movs	r3, #0
 8012732:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d106      	bne.n	8012748 <tcp_keepalive+0x20>
 801273a:	4b18      	ldr	r3, [pc, #96]	@ (801279c <tcp_keepalive+0x74>)
 801273c:	f640 0224 	movw	r2, #2084	@ 0x824
 8012740:	4917      	ldr	r1, [pc, #92]	@ (80127a0 <tcp_keepalive+0x78>)
 8012742:	4818      	ldr	r0, [pc, #96]	@ (80127a4 <tcp_keepalive+0x7c>)
 8012744:	f000 fed4 	bl	80134f0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012748:	7dfb      	ldrb	r3, [r7, #23]
 801274a:	b29c      	uxth	r4, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012750:	3b01      	subs	r3, #1
 8012752:	4618      	mov	r0, r3
 8012754:	f7f6 fd73 	bl	800923e <lwip_htonl>
 8012758:	4603      	mov	r3, r0
 801275a:	2200      	movs	r2, #0
 801275c:	4621      	mov	r1, r4
 801275e:	6878      	ldr	r0, [r7, #4]
 8012760:	f7ff fe68 	bl	8012434 <tcp_output_alloc_header>
 8012764:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d102      	bne.n	8012772 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801276c:	f04f 33ff 	mov.w	r3, #4294967295
 8012770:	e010      	b.n	8012794 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012772:	7dfb      	ldrb	r3, [r7, #23]
 8012774:	2200      	movs	r2, #0
 8012776:	6939      	ldr	r1, [r7, #16]
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f7ff fe99 	bl	80124b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801277e:	687a      	ldr	r2, [r7, #4]
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	3304      	adds	r3, #4
 8012784:	6939      	ldr	r1, [r7, #16]
 8012786:	6878      	ldr	r0, [r7, #4]
 8012788:	f7ff fed0 	bl	801252c <tcp_output_control_segment>
 801278c:	4603      	mov	r3, r0
 801278e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012794:	4618      	mov	r0, r3
 8012796:	371c      	adds	r7, #28
 8012798:	46bd      	mov	sp, r7
 801279a:	bd90      	pop	{r4, r7, pc}
 801279c:	080162b4 	.word	0x080162b4
 80127a0:	08016abc 	.word	0x08016abc
 80127a4:	08016334 	.word	0x08016334

080127a8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80127a8:	b590      	push	{r4, r7, lr}
 80127aa:	b08b      	sub	sp, #44	@ 0x2c
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80127b0:	2300      	movs	r3, #0
 80127b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d106      	bne.n	80127ca <tcp_zero_window_probe+0x22>
 80127bc:	4b4c      	ldr	r3, [pc, #304]	@ (80128f0 <tcp_zero_window_probe+0x148>)
 80127be:	f640 024f 	movw	r2, #2127	@ 0x84f
 80127c2:	494c      	ldr	r1, [pc, #304]	@ (80128f4 <tcp_zero_window_probe+0x14c>)
 80127c4:	484c      	ldr	r0, [pc, #304]	@ (80128f8 <tcp_zero_window_probe+0x150>)
 80127c6:	f000 fe93 	bl	80134f0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80127ce:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d101      	bne.n	80127da <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80127d6:	2300      	movs	r3, #0
 80127d8:	e086      	b.n	80128e8 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80127e0:	2bff      	cmp	r3, #255	@ 0xff
 80127e2:	d007      	beq.n	80127f4 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80127ea:	3301      	adds	r3, #1
 80127ec:	b2da      	uxtb	r2, r3
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80127f4:	6a3b      	ldr	r3, [r7, #32]
 80127f6:	68db      	ldr	r3, [r3, #12]
 80127f8:	899b      	ldrh	r3, [r3, #12]
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	4618      	mov	r0, r3
 80127fe:	f7f6 fd09 	bl	8009214 <lwip_htons>
 8012802:	4603      	mov	r3, r0
 8012804:	b2db      	uxtb	r3, r3
 8012806:	f003 0301 	and.w	r3, r3, #1
 801280a:	2b00      	cmp	r3, #0
 801280c:	d005      	beq.n	801281a <tcp_zero_window_probe+0x72>
 801280e:	6a3b      	ldr	r3, [r7, #32]
 8012810:	891b      	ldrh	r3, [r3, #8]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d101      	bne.n	801281a <tcp_zero_window_probe+0x72>
 8012816:	2301      	movs	r3, #1
 8012818:	e000      	b.n	801281c <tcp_zero_window_probe+0x74>
 801281a:	2300      	movs	r3, #0
 801281c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801281e:	7ffb      	ldrb	r3, [r7, #31]
 8012820:	2b00      	cmp	r3, #0
 8012822:	bf0c      	ite	eq
 8012824:	2301      	moveq	r3, #1
 8012826:	2300      	movne	r3, #0
 8012828:	b2db      	uxtb	r3, r3
 801282a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801282c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012830:	b299      	uxth	r1, r3
 8012832:	6a3b      	ldr	r3, [r7, #32]
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	685b      	ldr	r3, [r3, #4]
 8012838:	8bba      	ldrh	r2, [r7, #28]
 801283a:	6878      	ldr	r0, [r7, #4]
 801283c:	f7ff fdfa 	bl	8012434 <tcp_output_alloc_header>
 8012840:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012842:	69bb      	ldr	r3, [r7, #24]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d102      	bne.n	801284e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012848:	f04f 33ff 	mov.w	r3, #4294967295
 801284c:	e04c      	b.n	80128e8 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801284e:	69bb      	ldr	r3, [r7, #24]
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012854:	7ffb      	ldrb	r3, [r7, #31]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d011      	beq.n	801287e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801285a:	697b      	ldr	r3, [r7, #20]
 801285c:	899b      	ldrh	r3, [r3, #12]
 801285e:	b29b      	uxth	r3, r3
 8012860:	b21b      	sxth	r3, r3
 8012862:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8012866:	b21c      	sxth	r4, r3
 8012868:	2011      	movs	r0, #17
 801286a:	f7f6 fcd3 	bl	8009214 <lwip_htons>
 801286e:	4603      	mov	r3, r0
 8012870:	b21b      	sxth	r3, r3
 8012872:	4323      	orrs	r3, r4
 8012874:	b21b      	sxth	r3, r3
 8012876:	b29a      	uxth	r2, r3
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	819a      	strh	r2, [r3, #12]
 801287c:	e010      	b.n	80128a0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801287e:	69bb      	ldr	r3, [r7, #24]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	3314      	adds	r3, #20
 8012884:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012886:	6a3b      	ldr	r3, [r7, #32]
 8012888:	6858      	ldr	r0, [r3, #4]
 801288a:	6a3b      	ldr	r3, [r7, #32]
 801288c:	685b      	ldr	r3, [r3, #4]
 801288e:	891a      	ldrh	r2, [r3, #8]
 8012890:	6a3b      	ldr	r3, [r7, #32]
 8012892:	891b      	ldrh	r3, [r3, #8]
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	b29b      	uxth	r3, r3
 8012898:	2201      	movs	r2, #1
 801289a:	6939      	ldr	r1, [r7, #16]
 801289c:	f7fa fd64 	bl	800d368 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80128a0:	6a3b      	ldr	r3, [r7, #32]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	685b      	ldr	r3, [r3, #4]
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7f6 fcc9 	bl	800923e <lwip_htonl>
 80128ac:	4603      	mov	r3, r0
 80128ae:	3301      	adds	r3, #1
 80128b0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	1ad3      	subs	r3, r2, r3
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	da02      	bge.n	80128c4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	68fa      	ldr	r2, [r7, #12]
 80128c2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80128c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128c8:	2200      	movs	r2, #0
 80128ca:	69b9      	ldr	r1, [r7, #24]
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7ff fdef 	bl	80124b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128d2:	687a      	ldr	r2, [r7, #4]
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	3304      	adds	r3, #4
 80128d8:	69b9      	ldr	r1, [r7, #24]
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f7ff fe26 	bl	801252c <tcp_output_control_segment>
 80128e0:	4603      	mov	r3, r0
 80128e2:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80128e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	372c      	adds	r7, #44	@ 0x2c
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd90      	pop	{r4, r7, pc}
 80128f0:	080162b4 	.word	0x080162b4
 80128f4:	08016ad8 	.word	0x08016ad8
 80128f8:	08016334 	.word	0x08016334

080128fc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80128fc:	b580      	push	{r7, lr}
 80128fe:	b084      	sub	sp, #16
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
 8012904:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012906:	f000 fb01 	bl	8012f0c <sys_timeouts_sleeptime>
 801290a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012912:	d10b      	bne.n	801292c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012914:	4813      	ldr	r0, [pc, #76]	@ (8012964 <tcpip_timeouts_mbox_fetch+0x68>)
 8012916:	f7fa fe72 	bl	800d5fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801291a:	2200      	movs	r2, #0
 801291c:	6839      	ldr	r1, [r7, #0]
 801291e:	6878      	ldr	r0, [r7, #4]
 8012920:	f7fa fdfa 	bl	800d518 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012924:	480f      	ldr	r0, [pc, #60]	@ (8012964 <tcpip_timeouts_mbox_fetch+0x68>)
 8012926:	f7fa fe5b 	bl	800d5e0 <sys_mutex_lock>
    return;
 801292a:	e018      	b.n	801295e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d102      	bne.n	8012938 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012932:	f000 fab1 	bl	8012e98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012936:	e7e6      	b.n	8012906 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012938:	480a      	ldr	r0, [pc, #40]	@ (8012964 <tcpip_timeouts_mbox_fetch+0x68>)
 801293a:	f7fa fe60 	bl	800d5fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801293e:	68fa      	ldr	r2, [r7, #12]
 8012940:	6839      	ldr	r1, [r7, #0]
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f7fa fde8 	bl	800d518 <sys_arch_mbox_fetch>
 8012948:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801294a:	4806      	ldr	r0, [pc, #24]	@ (8012964 <tcpip_timeouts_mbox_fetch+0x68>)
 801294c:	f7fa fe48 	bl	800d5e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012950:	68bb      	ldr	r3, [r7, #8]
 8012952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012956:	d102      	bne.n	801295e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012958:	f000 fa9e 	bl	8012e98 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801295c:	e7d3      	b.n	8012906 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	240084d8 	.word	0x240084d8

08012968 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b084      	sub	sp, #16
 801296c:	af00      	add	r7, sp, #0
 801296e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012970:	4810      	ldr	r0, [pc, #64]	@ (80129b4 <tcpip_thread+0x4c>)
 8012972:	f7fa fe35 	bl	800d5e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012976:	4b10      	ldr	r3, [pc, #64]	@ (80129b8 <tcpip_thread+0x50>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d005      	beq.n	801298a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801297e:	4b0e      	ldr	r3, [pc, #56]	@ (80129b8 <tcpip_thread+0x50>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	4a0e      	ldr	r2, [pc, #56]	@ (80129bc <tcpip_thread+0x54>)
 8012984:	6812      	ldr	r2, [r2, #0]
 8012986:	4610      	mov	r0, r2
 8012988:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801298a:	f107 030c 	add.w	r3, r7, #12
 801298e:	4619      	mov	r1, r3
 8012990:	480b      	ldr	r0, [pc, #44]	@ (80129c0 <tcpip_thread+0x58>)
 8012992:	f7ff ffb3 	bl	80128fc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d106      	bne.n	80129aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801299c:	4b09      	ldr	r3, [pc, #36]	@ (80129c4 <tcpip_thread+0x5c>)
 801299e:	2291      	movs	r2, #145	@ 0x91
 80129a0:	4909      	ldr	r1, [pc, #36]	@ (80129c8 <tcpip_thread+0x60>)
 80129a2:	480a      	ldr	r0, [pc, #40]	@ (80129cc <tcpip_thread+0x64>)
 80129a4:	f000 fda4 	bl	80134f0 <iprintf>
      continue;
 80129a8:	e003      	b.n	80129b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	4618      	mov	r0, r3
 80129ae:	f000 f80f 	bl	80129d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80129b2:	e7ea      	b.n	801298a <tcpip_thread+0x22>
 80129b4:	240084d8 	.word	0x240084d8
 80129b8:	240084cc 	.word	0x240084cc
 80129bc:	240084d0 	.word	0x240084d0
 80129c0:	240084d4 	.word	0x240084d4
 80129c4:	08016afc 	.word	0x08016afc
 80129c8:	08016b58 	.word	0x08016b58
 80129cc:	08016b78 	.word	0x08016b78

080129d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80129d0:	b580      	push	{r7, lr}
 80129d2:	b082      	sub	sp, #8
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	781b      	ldrb	r3, [r3, #0]
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d026      	beq.n	8012a2e <tcpip_thread_handle_msg+0x5e>
 80129e0:	2b02      	cmp	r3, #2
 80129e2:	dc2b      	bgt.n	8012a3c <tcpip_thread_handle_msg+0x6c>
 80129e4:	2b00      	cmp	r3, #0
 80129e6:	d002      	beq.n	80129ee <tcpip_thread_handle_msg+0x1e>
 80129e8:	2b01      	cmp	r3, #1
 80129ea:	d015      	beq.n	8012a18 <tcpip_thread_handle_msg+0x48>
 80129ec:	e026      	b.n	8012a3c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	68db      	ldr	r3, [r3, #12]
 80129f2:	687a      	ldr	r2, [r7, #4]
 80129f4:	6850      	ldr	r0, [r2, #4]
 80129f6:	687a      	ldr	r2, [r7, #4]
 80129f8:	6892      	ldr	r2, [r2, #8]
 80129fa:	4611      	mov	r1, r2
 80129fc:	4798      	blx	r3
 80129fe:	4603      	mov	r3, r0
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d004      	beq.n	8012a0e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	685b      	ldr	r3, [r3, #4]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7fa fab7 	bl	800cf7c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012a0e:	6879      	ldr	r1, [r7, #4]
 8012a10:	2009      	movs	r0, #9
 8012a12:	f7f9 fc0f 	bl	800c234 <memp_free>
      break;
 8012a16:	e018      	b.n	8012a4a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	685b      	ldr	r3, [r3, #4]
 8012a1c:	687a      	ldr	r2, [r7, #4]
 8012a1e:	6892      	ldr	r2, [r2, #8]
 8012a20:	4610      	mov	r0, r2
 8012a22:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012a24:	6879      	ldr	r1, [r7, #4]
 8012a26:	2008      	movs	r0, #8
 8012a28:	f7f9 fc04 	bl	800c234 <memp_free>
      break;
 8012a2c:	e00d      	b.n	8012a4a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	685b      	ldr	r3, [r3, #4]
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	6892      	ldr	r2, [r2, #8]
 8012a36:	4610      	mov	r0, r2
 8012a38:	4798      	blx	r3
      break;
 8012a3a:	e006      	b.n	8012a4a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012a3c:	4b05      	ldr	r3, [pc, #20]	@ (8012a54 <tcpip_thread_handle_msg+0x84>)
 8012a3e:	22cf      	movs	r2, #207	@ 0xcf
 8012a40:	4905      	ldr	r1, [pc, #20]	@ (8012a58 <tcpip_thread_handle_msg+0x88>)
 8012a42:	4806      	ldr	r0, [pc, #24]	@ (8012a5c <tcpip_thread_handle_msg+0x8c>)
 8012a44:	f000 fd54 	bl	80134f0 <iprintf>
      break;
 8012a48:	bf00      	nop
  }
}
 8012a4a:	bf00      	nop
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	08016afc 	.word	0x08016afc
 8012a58:	08016b58 	.word	0x08016b58
 8012a5c:	08016b78 	.word	0x08016b78

08012a60 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b086      	sub	sp, #24
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	60b9      	str	r1, [r7, #8]
 8012a6a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012a6c:	481a      	ldr	r0, [pc, #104]	@ (8012ad8 <tcpip_inpkt+0x78>)
 8012a6e:	f7fa fd84 	bl	800d57a <sys_mbox_valid>
 8012a72:	4603      	mov	r3, r0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d105      	bne.n	8012a84 <tcpip_inpkt+0x24>
 8012a78:	4b18      	ldr	r3, [pc, #96]	@ (8012adc <tcpip_inpkt+0x7c>)
 8012a7a:	22fc      	movs	r2, #252	@ 0xfc
 8012a7c:	4918      	ldr	r1, [pc, #96]	@ (8012ae0 <tcpip_inpkt+0x80>)
 8012a7e:	4819      	ldr	r0, [pc, #100]	@ (8012ae4 <tcpip_inpkt+0x84>)
 8012a80:	f000 fd36 	bl	80134f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012a84:	2009      	movs	r0, #9
 8012a86:	f7f9 fb5f 	bl	800c148 <memp_malloc>
 8012a8a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d102      	bne.n	8012a98 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012a92:	f04f 33ff 	mov.w	r3, #4294967295
 8012a96:	e01a      	b.n	8012ace <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	2200      	movs	r2, #0
 8012a9c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012a9e:	697b      	ldr	r3, [r7, #20]
 8012aa0:	68fa      	ldr	r2, [r7, #12]
 8012aa2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	687a      	ldr	r2, [r7, #4]
 8012aae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012ab0:	6979      	ldr	r1, [r7, #20]
 8012ab2:	4809      	ldr	r0, [pc, #36]	@ (8012ad8 <tcpip_inpkt+0x78>)
 8012ab4:	f7fa fd16 	bl	800d4e4 <sys_mbox_trypost>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d006      	beq.n	8012acc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012abe:	6979      	ldr	r1, [r7, #20]
 8012ac0:	2009      	movs	r0, #9
 8012ac2:	f7f9 fbb7 	bl	800c234 <memp_free>
    return ERR_MEM;
 8012ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8012aca:	e000      	b.n	8012ace <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012acc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3718      	adds	r7, #24
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
 8012ad6:	bf00      	nop
 8012ad8:	240084d4 	.word	0x240084d4
 8012adc:	08016afc 	.word	0x08016afc
 8012ae0:	08016ba0 	.word	0x08016ba0
 8012ae4:	08016b78 	.word	0x08016b78

08012ae8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012af8:	f003 0318 	and.w	r3, r3, #24
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d006      	beq.n	8012b0e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012b00:	4a08      	ldr	r2, [pc, #32]	@ (8012b24 <tcpip_input+0x3c>)
 8012b02:	6839      	ldr	r1, [r7, #0]
 8012b04:	6878      	ldr	r0, [r7, #4]
 8012b06:	f7ff ffab 	bl	8012a60 <tcpip_inpkt>
 8012b0a:	4603      	mov	r3, r0
 8012b0c:	e005      	b.n	8012b1a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012b0e:	4a06      	ldr	r2, [pc, #24]	@ (8012b28 <tcpip_input+0x40>)
 8012b10:	6839      	ldr	r1, [r7, #0]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f7ff ffa4 	bl	8012a60 <tcpip_inpkt>
 8012b18:	4603      	mov	r3, r0
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3708      	adds	r7, #8
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	0800a109 	.word	0x0800a109
 8012b28:	0800a735 	.word	0x0800a735

08012b2c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b084      	sub	sp, #16
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
 8012b34:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012b36:	4819      	ldr	r0, [pc, #100]	@ (8012b9c <tcpip_try_callback+0x70>)
 8012b38:	f7fa fd1f 	bl	800d57a <sys_mbox_valid>
 8012b3c:	4603      	mov	r3, r0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d106      	bne.n	8012b50 <tcpip_try_callback+0x24>
 8012b42:	4b17      	ldr	r3, [pc, #92]	@ (8012ba0 <tcpip_try_callback+0x74>)
 8012b44:	f240 125d 	movw	r2, #349	@ 0x15d
 8012b48:	4916      	ldr	r1, [pc, #88]	@ (8012ba4 <tcpip_try_callback+0x78>)
 8012b4a:	4817      	ldr	r0, [pc, #92]	@ (8012ba8 <tcpip_try_callback+0x7c>)
 8012b4c:	f000 fcd0 	bl	80134f0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012b50:	2008      	movs	r0, #8
 8012b52:	f7f9 faf9 	bl	800c148 <memp_malloc>
 8012b56:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d102      	bne.n	8012b64 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012b62:	e017      	b.n	8012b94 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2201      	movs	r2, #1
 8012b68:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	687a      	ldr	r2, [r7, #4]
 8012b6e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	683a      	ldr	r2, [r7, #0]
 8012b74:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012b76:	68f9      	ldr	r1, [r7, #12]
 8012b78:	4808      	ldr	r0, [pc, #32]	@ (8012b9c <tcpip_try_callback+0x70>)
 8012b7a:	f7fa fcb3 	bl	800d4e4 <sys_mbox_trypost>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d006      	beq.n	8012b92 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012b84:	68f9      	ldr	r1, [r7, #12]
 8012b86:	2008      	movs	r0, #8
 8012b88:	f7f9 fb54 	bl	800c234 <memp_free>
    return ERR_MEM;
 8012b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b90:	e000      	b.n	8012b94 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012b92:	2300      	movs	r3, #0
}
 8012b94:	4618      	mov	r0, r3
 8012b96:	3710      	adds	r7, #16
 8012b98:	46bd      	mov	sp, r7
 8012b9a:	bd80      	pop	{r7, pc}
 8012b9c:	240084d4 	.word	0x240084d4
 8012ba0:	08016afc 	.word	0x08016afc
 8012ba4:	08016ba0 	.word	0x08016ba0
 8012ba8:	08016b78 	.word	0x08016b78

08012bac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af02      	add	r7, sp, #8
 8012bb2:	6078      	str	r0, [r7, #4]
 8012bb4:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012bb6:	f7f7 fd0b 	bl	800a5d0 <lwip_init>

  tcpip_init_done = initfunc;
 8012bba:	4a17      	ldr	r2, [pc, #92]	@ (8012c18 <tcpip_init+0x6c>)
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012bc0:	4a16      	ldr	r2, [pc, #88]	@ (8012c1c <tcpip_init+0x70>)
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012bc6:	2106      	movs	r1, #6
 8012bc8:	4815      	ldr	r0, [pc, #84]	@ (8012c20 <tcpip_init+0x74>)
 8012bca:	f7fa fc71 	bl	800d4b0 <sys_mbox_new>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d006      	beq.n	8012be2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012bd4:	4b13      	ldr	r3, [pc, #76]	@ (8012c24 <tcpip_init+0x78>)
 8012bd6:	f240 2261 	movw	r2, #609	@ 0x261
 8012bda:	4913      	ldr	r1, [pc, #76]	@ (8012c28 <tcpip_init+0x7c>)
 8012bdc:	4813      	ldr	r0, [pc, #76]	@ (8012c2c <tcpip_init+0x80>)
 8012bde:	f000 fc87 	bl	80134f0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012be2:	4813      	ldr	r0, [pc, #76]	@ (8012c30 <tcpip_init+0x84>)
 8012be4:	f7fa fce6 	bl	800d5b4 <sys_mutex_new>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d006      	beq.n	8012bfc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012bee:	4b0d      	ldr	r3, [pc, #52]	@ (8012c24 <tcpip_init+0x78>)
 8012bf0:	f240 2265 	movw	r2, #613	@ 0x265
 8012bf4:	490f      	ldr	r1, [pc, #60]	@ (8012c34 <tcpip_init+0x88>)
 8012bf6:	480d      	ldr	r0, [pc, #52]	@ (8012c2c <tcpip_init+0x80>)
 8012bf8:	f000 fc7a 	bl	80134f0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012bfc:	2318      	movs	r3, #24
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8012c04:	2200      	movs	r2, #0
 8012c06:	490c      	ldr	r1, [pc, #48]	@ (8012c38 <tcpip_init+0x8c>)
 8012c08:	480c      	ldr	r0, [pc, #48]	@ (8012c3c <tcpip_init+0x90>)
 8012c0a:	f7fa fd05 	bl	800d618 <sys_thread_new>
}
 8012c0e:	bf00      	nop
 8012c10:	3708      	adds	r7, #8
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	240084cc 	.word	0x240084cc
 8012c1c:	240084d0 	.word	0x240084d0
 8012c20:	240084d4 	.word	0x240084d4
 8012c24:	08016afc 	.word	0x08016afc
 8012c28:	08016bb0 	.word	0x08016bb0
 8012c2c:	08016b78 	.word	0x08016b78
 8012c30:	240084d8 	.word	0x240084d8
 8012c34:	08016bd4 	.word	0x08016bd4
 8012c38:	08012969 	.word	0x08012969
 8012c3c:	08016bf8 	.word	0x08016bf8

08012c40 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012c48:	f7fa fd6e 	bl	800d728 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012c4c:	4b0a      	ldr	r3, [pc, #40]	@ (8012c78 <tcpip_tcp_timer+0x38>)
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d103      	bne.n	8012c5c <tcpip_tcp_timer+0x1c>
 8012c54:	4b09      	ldr	r3, [pc, #36]	@ (8012c7c <tcpip_tcp_timer+0x3c>)
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d005      	beq.n	8012c68 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	4908      	ldr	r1, [pc, #32]	@ (8012c80 <tcpip_tcp_timer+0x40>)
 8012c60:	20fa      	movs	r0, #250	@ 0xfa
 8012c62:	f000 f8f3 	bl	8012e4c <sys_timeout>
 8012c66:	e003      	b.n	8012c70 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012c68:	4b06      	ldr	r3, [pc, #24]	@ (8012c84 <tcpip_tcp_timer+0x44>)
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	601a      	str	r2, [r3, #0]
  }
}
 8012c6e:	bf00      	nop
 8012c70:	bf00      	nop
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	24008488 	.word	0x24008488
 8012c7c:	2400848c 	.word	0x2400848c
 8012c80:	08012c41 	.word	0x08012c41
 8012c84:	240084e4 	.word	0x240084e4

08012c88 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8012cb8 <tcp_timer_needed+0x30>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d10f      	bne.n	8012cb4 <tcp_timer_needed+0x2c>
 8012c94:	4b09      	ldr	r3, [pc, #36]	@ (8012cbc <tcp_timer_needed+0x34>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d103      	bne.n	8012ca4 <tcp_timer_needed+0x1c>
 8012c9c:	4b08      	ldr	r3, [pc, #32]	@ (8012cc0 <tcp_timer_needed+0x38>)
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d007      	beq.n	8012cb4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012ca4:	4b04      	ldr	r3, [pc, #16]	@ (8012cb8 <tcp_timer_needed+0x30>)
 8012ca6:	2201      	movs	r2, #1
 8012ca8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012caa:	2200      	movs	r2, #0
 8012cac:	4905      	ldr	r1, [pc, #20]	@ (8012cc4 <tcp_timer_needed+0x3c>)
 8012cae:	20fa      	movs	r0, #250	@ 0xfa
 8012cb0:	f000 f8cc 	bl	8012e4c <sys_timeout>
  }
}
 8012cb4:	bf00      	nop
 8012cb6:	bd80      	pop	{r7, pc}
 8012cb8:	240084e4 	.word	0x240084e4
 8012cbc:	24008488 	.word	0x24008488
 8012cc0:	2400848c 	.word	0x2400848c
 8012cc4:	08012c41 	.word	0x08012c41

08012cc8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b086      	sub	sp, #24
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	60b9      	str	r1, [r7, #8]
 8012cd2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012cd4:	200a      	movs	r0, #10
 8012cd6:	f7f9 fa37 	bl	800c148 <memp_malloc>
 8012cda:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012cdc:	693b      	ldr	r3, [r7, #16]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d109      	bne.n	8012cf6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012ce2:	693b      	ldr	r3, [r7, #16]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d151      	bne.n	8012d8c <sys_timeout_abs+0xc4>
 8012ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8012d94 <sys_timeout_abs+0xcc>)
 8012cea:	22be      	movs	r2, #190	@ 0xbe
 8012cec:	492a      	ldr	r1, [pc, #168]	@ (8012d98 <sys_timeout_abs+0xd0>)
 8012cee:	482b      	ldr	r0, [pc, #172]	@ (8012d9c <sys_timeout_abs+0xd4>)
 8012cf0:	f000 fbfe 	bl	80134f0 <iprintf>
    return;
 8012cf4:	e04a      	b.n	8012d8c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	68ba      	ldr	r2, [r7, #8]
 8012d00:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012d08:	693b      	ldr	r3, [r7, #16]
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012d0e:	4b24      	ldr	r3, [pc, #144]	@ (8012da0 <sys_timeout_abs+0xd8>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d103      	bne.n	8012d1e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012d16:	4a22      	ldr	r2, [pc, #136]	@ (8012da0 <sys_timeout_abs+0xd8>)
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	6013      	str	r3, [r2, #0]
    return;
 8012d1c:	e037      	b.n	8012d8e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012d1e:	693b      	ldr	r3, [r7, #16]
 8012d20:	685a      	ldr	r2, [r3, #4]
 8012d22:	4b1f      	ldr	r3, [pc, #124]	@ (8012da0 <sys_timeout_abs+0xd8>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	0fdb      	lsrs	r3, r3, #31
 8012d2c:	f003 0301 	and.w	r3, r3, #1
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d007      	beq.n	8012d46 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012d36:	4b1a      	ldr	r3, [pc, #104]	@ (8012da0 <sys_timeout_abs+0xd8>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012d3e:	4a18      	ldr	r2, [pc, #96]	@ (8012da0 <sys_timeout_abs+0xd8>)
 8012d40:	693b      	ldr	r3, [r7, #16]
 8012d42:	6013      	str	r3, [r2, #0]
 8012d44:	e023      	b.n	8012d8e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d46:	4b16      	ldr	r3, [pc, #88]	@ (8012da0 <sys_timeout_abs+0xd8>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	617b      	str	r3, [r7, #20]
 8012d4c:	e01a      	b.n	8012d84 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012d4e:	697b      	ldr	r3, [r7, #20]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00b      	beq.n	8012d6e <sys_timeout_abs+0xa6>
 8012d56:	693b      	ldr	r3, [r7, #16]
 8012d58:	685a      	ldr	r2, [r3, #4]
 8012d5a:	697b      	ldr	r3, [r7, #20]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	685b      	ldr	r3, [r3, #4]
 8012d60:	1ad3      	subs	r3, r2, r3
 8012d62:	0fdb      	lsrs	r3, r3, #31
 8012d64:	f003 0301 	and.w	r3, r3, #1
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d007      	beq.n	8012d7e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012d6e:	697b      	ldr	r3, [r7, #20]
 8012d70:	681a      	ldr	r2, [r3, #0]
 8012d72:	693b      	ldr	r3, [r7, #16]
 8012d74:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	693a      	ldr	r2, [r7, #16]
 8012d7a:	601a      	str	r2, [r3, #0]
        break;
 8012d7c:	e007      	b.n	8012d8e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d7e:	697b      	ldr	r3, [r7, #20]
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	617b      	str	r3, [r7, #20]
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d1e1      	bne.n	8012d4e <sys_timeout_abs+0x86>
 8012d8a:	e000      	b.n	8012d8e <sys_timeout_abs+0xc6>
    return;
 8012d8c:	bf00      	nop
      }
    }
  }
}
 8012d8e:	3718      	adds	r7, #24
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	08016c08 	.word	0x08016c08
 8012d98:	08016c68 	.word	0x08016c68
 8012d9c:	08016ca8 	.word	0x08016ca8
 8012da0:	240084dc 	.word	0x240084dc

08012da4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b086      	sub	sp, #24
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	685b      	ldr	r3, [r3, #4]
 8012db4:	4798      	blx	r3

  now = sys_now();
 8012db6:	f7f2 fb0d 	bl	80053d4 <sys_now>
 8012dba:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8012e00 <lwip_cyclic_timer+0x5c>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	693b      	ldr	r3, [r7, #16]
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	0fdb      	lsrs	r3, r3, #31
 8012dd0:	f003 0301 	and.w	r3, r3, #1
 8012dd4:	b2db      	uxtb	r3, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d009      	beq.n	8012dee <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	681a      	ldr	r2, [r3, #0]
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	4413      	add	r3, r2
 8012de2:	687a      	ldr	r2, [r7, #4]
 8012de4:	4907      	ldr	r1, [pc, #28]	@ (8012e04 <lwip_cyclic_timer+0x60>)
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7ff ff6e 	bl	8012cc8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012dec:	e004      	b.n	8012df8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	4904      	ldr	r1, [pc, #16]	@ (8012e04 <lwip_cyclic_timer+0x60>)
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f7ff ff68 	bl	8012cc8 <sys_timeout_abs>
}
 8012df8:	bf00      	nop
 8012dfa:	3718      	adds	r7, #24
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd80      	pop	{r7, pc}
 8012e00:	240084e0 	.word	0x240084e0
 8012e04:	08012da5 	.word	0x08012da5

08012e08 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012e0e:	2301      	movs	r3, #1
 8012e10:	607b      	str	r3, [r7, #4]
 8012e12:	e00e      	b.n	8012e32 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012e14:	4a0b      	ldr	r2, [pc, #44]	@ (8012e44 <sys_timeouts_init+0x3c>)
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	00db      	lsls	r3, r3, #3
 8012e20:	4a08      	ldr	r2, [pc, #32]	@ (8012e44 <sys_timeouts_init+0x3c>)
 8012e22:	4413      	add	r3, r2
 8012e24:	461a      	mov	r2, r3
 8012e26:	4908      	ldr	r1, [pc, #32]	@ (8012e48 <sys_timeouts_init+0x40>)
 8012e28:	f000 f810 	bl	8012e4c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	3301      	adds	r3, #1
 8012e30:	607b      	str	r3, [r7, #4]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b02      	cmp	r3, #2
 8012e36:	d9ed      	bls.n	8012e14 <sys_timeouts_init+0xc>
  }
}
 8012e38:	bf00      	nop
 8012e3a:	bf00      	nop
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	080171f8 	.word	0x080171f8
 8012e48:	08012da5 	.word	0x08012da5

08012e4c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012e4c:	b580      	push	{r7, lr}
 8012e4e:	b086      	sub	sp, #24
 8012e50:	af00      	add	r7, sp, #0
 8012e52:	60f8      	str	r0, [r7, #12]
 8012e54:	60b9      	str	r1, [r7, #8]
 8012e56:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012e5e:	d306      	bcc.n	8012e6e <sys_timeout+0x22>
 8012e60:	4b0a      	ldr	r3, [pc, #40]	@ (8012e8c <sys_timeout+0x40>)
 8012e62:	f240 1229 	movw	r2, #297	@ 0x129
 8012e66:	490a      	ldr	r1, [pc, #40]	@ (8012e90 <sys_timeout+0x44>)
 8012e68:	480a      	ldr	r0, [pc, #40]	@ (8012e94 <sys_timeout+0x48>)
 8012e6a:	f000 fb41 	bl	80134f0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012e6e:	f7f2 fab1 	bl	80053d4 <sys_now>
 8012e72:	4602      	mov	r2, r0
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	4413      	add	r3, r2
 8012e78:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	68b9      	ldr	r1, [r7, #8]
 8012e7e:	6978      	ldr	r0, [r7, #20]
 8012e80:	f7ff ff22 	bl	8012cc8 <sys_timeout_abs>
#endif
}
 8012e84:	bf00      	nop
 8012e86:	3718      	adds	r7, #24
 8012e88:	46bd      	mov	sp, r7
 8012e8a:	bd80      	pop	{r7, pc}
 8012e8c:	08016c08 	.word	0x08016c08
 8012e90:	08016cd0 	.word	0x08016cd0
 8012e94:	08016ca8 	.word	0x08016ca8

08012e98 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012e9e:	f7f2 fa99 	bl	80053d4 <sys_now>
 8012ea2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012ea4:	4b17      	ldr	r3, [pc, #92]	@ (8012f04 <sys_check_timeouts+0x6c>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d022      	beq.n	8012ef6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	1ad3      	subs	r3, r2, r3
 8012eb8:	0fdb      	lsrs	r3, r3, #31
 8012eba:	f003 0301 	and.w	r3, r3, #1
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d11a      	bne.n	8012efa <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012ec4:	68bb      	ldr	r3, [r7, #8]
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8012f04 <sys_check_timeouts+0x6c>)
 8012eca:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	68db      	ldr	r3, [r3, #12]
 8012ed6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012ed8:	68bb      	ldr	r3, [r7, #8]
 8012eda:	685b      	ldr	r3, [r3, #4]
 8012edc:	4a0a      	ldr	r2, [pc, #40]	@ (8012f08 <sys_check_timeouts+0x70>)
 8012ede:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012ee0:	68b9      	ldr	r1, [r7, #8]
 8012ee2:	200a      	movs	r0, #10
 8012ee4:	f7f9 f9a6 	bl	800c234 <memp_free>
    if (handler != NULL) {
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d0da      	beq.n	8012ea4 <sys_check_timeouts+0xc>
      handler(arg);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6838      	ldr	r0, [r7, #0]
 8012ef2:	4798      	blx	r3
  do {
 8012ef4:	e7d6      	b.n	8012ea4 <sys_check_timeouts+0xc>
      return;
 8012ef6:	bf00      	nop
 8012ef8:	e000      	b.n	8012efc <sys_check_timeouts+0x64>
      return;
 8012efa:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012efc:	3710      	adds	r7, #16
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}
 8012f02:	bf00      	nop
 8012f04:	240084dc 	.word	0x240084dc
 8012f08:	240084e0 	.word	0x240084e0

08012f0c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b082      	sub	sp, #8
 8012f10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012f12:	4b16      	ldr	r3, [pc, #88]	@ (8012f6c <sys_timeouts_sleeptime+0x60>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d102      	bne.n	8012f20 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8012f1e:	e020      	b.n	8012f62 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012f20:	f7f2 fa58 	bl	80053d4 <sys_now>
 8012f24:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012f26:	4b11      	ldr	r3, [pc, #68]	@ (8012f6c <sys_timeouts_sleeptime+0x60>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	685a      	ldr	r2, [r3, #4]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	1ad3      	subs	r3, r2, r3
 8012f30:	0fdb      	lsrs	r3, r3, #31
 8012f32:	f003 0301 	and.w	r3, r3, #1
 8012f36:	b2db      	uxtb	r3, r3
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d001      	beq.n	8012f40 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	e010      	b.n	8012f62 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012f40:	4b0a      	ldr	r3, [pc, #40]	@ (8012f6c <sys_timeouts_sleeptime+0x60>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	685a      	ldr	r2, [r3, #4]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	da06      	bge.n	8012f60 <sys_timeouts_sleeptime+0x54>
 8012f52:	4b07      	ldr	r3, [pc, #28]	@ (8012f70 <sys_timeouts_sleeptime+0x64>)
 8012f54:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8012f58:	4906      	ldr	r1, [pc, #24]	@ (8012f74 <sys_timeouts_sleeptime+0x68>)
 8012f5a:	4807      	ldr	r0, [pc, #28]	@ (8012f78 <sys_timeouts_sleeptime+0x6c>)
 8012f5c:	f000 fac8 	bl	80134f0 <iprintf>
    return ret;
 8012f60:	683b      	ldr	r3, [r7, #0]
  }
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	3708      	adds	r7, #8
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	240084dc 	.word	0x240084dc
 8012f70:	08016c08 	.word	0x08016c08
 8012f74:	08016d08 	.word	0x08016d08
 8012f78:	08016ca8 	.word	0x08016ca8

08012f7c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012f80:	f000 f9b6 	bl	80132f0 <rand>
 8012f84:	4603      	mov	r3, r0
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012f92:	b29a      	uxth	r2, r3
 8012f94:	4b01      	ldr	r3, [pc, #4]	@ (8012f9c <udp_init+0x20>)
 8012f96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012f98:	bf00      	nop
 8012f9a:	bd80      	pop	{r7, pc}
 8012f9c:	24000030 	.word	0x24000030

08012fa0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b084      	sub	sp, #16
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	4613      	mov	r3, r2
 8012fac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012fae:	68fb      	ldr	r3, [r7, #12]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d105      	bne.n	8012fc0 <udp_input_local_match+0x20>
 8012fb4:	4b27      	ldr	r3, [pc, #156]	@ (8013054 <udp_input_local_match+0xb4>)
 8012fb6:	2287      	movs	r2, #135	@ 0x87
 8012fb8:	4927      	ldr	r1, [pc, #156]	@ (8013058 <udp_input_local_match+0xb8>)
 8012fba:	4828      	ldr	r0, [pc, #160]	@ (801305c <udp_input_local_match+0xbc>)
 8012fbc:	f000 fa98 	bl	80134f0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d105      	bne.n	8012fd2 <udp_input_local_match+0x32>
 8012fc6:	4b23      	ldr	r3, [pc, #140]	@ (8013054 <udp_input_local_match+0xb4>)
 8012fc8:	2288      	movs	r2, #136	@ 0x88
 8012fca:	4925      	ldr	r1, [pc, #148]	@ (8013060 <udp_input_local_match+0xc0>)
 8012fcc:	4823      	ldr	r0, [pc, #140]	@ (801305c <udp_input_local_match+0xbc>)
 8012fce:	f000 fa8f 	bl	80134f0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	7a1b      	ldrb	r3, [r3, #8]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d00b      	beq.n	8012ff2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	7a1a      	ldrb	r2, [r3, #8]
 8012fde:	4b21      	ldr	r3, [pc, #132]	@ (8013064 <udp_input_local_match+0xc4>)
 8012fe0:	685b      	ldr	r3, [r3, #4]
 8012fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d001      	beq.n	8012ff2 <udp_input_local_match+0x52>
    return 0;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	e02b      	b.n	801304a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012ff2:	79fb      	ldrb	r3, [r7, #7]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d018      	beq.n	801302a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d013      	beq.n	8013026 <udp_input_local_match+0x86>
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d00f      	beq.n	8013026 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013006:	4b17      	ldr	r3, [pc, #92]	@ (8013064 <udp_input_local_match+0xc4>)
 8013008:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801300a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801300e:	d00a      	beq.n	8013026 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	4b13      	ldr	r3, [pc, #76]	@ (8013064 <udp_input_local_match+0xc4>)
 8013016:	695b      	ldr	r3, [r3, #20]
 8013018:	405a      	eors	r2, r3
 801301a:	68bb      	ldr	r3, [r7, #8]
 801301c:	3308      	adds	r3, #8
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013022:	2b00      	cmp	r3, #0
 8013024:	d110      	bne.n	8013048 <udp_input_local_match+0xa8>
          return 1;
 8013026:	2301      	movs	r3, #1
 8013028:	e00f      	b.n	801304a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801302a:	68fb      	ldr	r3, [r7, #12]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d009      	beq.n	8013044 <udp_input_local_match+0xa4>
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d005      	beq.n	8013044 <udp_input_local_match+0xa4>
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	681a      	ldr	r2, [r3, #0]
 801303c:	4b09      	ldr	r3, [pc, #36]	@ (8013064 <udp_input_local_match+0xc4>)
 801303e:	695b      	ldr	r3, [r3, #20]
 8013040:	429a      	cmp	r2, r3
 8013042:	d101      	bne.n	8013048 <udp_input_local_match+0xa8>
        return 1;
 8013044:	2301      	movs	r3, #1
 8013046:	e000      	b.n	801304a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013048:	2300      	movs	r3, #0
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}
 8013052:	bf00      	nop
 8013054:	08016d1c 	.word	0x08016d1c
 8013058:	08016d78 	.word	0x08016d78
 801305c:	08016d9c 	.word	0x08016d9c
 8013060:	08016dc4 	.word	0x08016dc4
 8013064:	24005368 	.word	0x24005368

08013068 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013068:	b590      	push	{r4, r7, lr}
 801306a:	b08d      	sub	sp, #52	@ 0x34
 801306c:	af02      	add	r7, sp, #8
 801306e:	6078      	str	r0, [r7, #4]
 8013070:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013072:	2300      	movs	r3, #0
 8013074:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d105      	bne.n	8013088 <udp_input+0x20>
 801307c:	4b7c      	ldr	r3, [pc, #496]	@ (8013270 <udp_input+0x208>)
 801307e:	22cf      	movs	r2, #207	@ 0xcf
 8013080:	497c      	ldr	r1, [pc, #496]	@ (8013274 <udp_input+0x20c>)
 8013082:	487d      	ldr	r0, [pc, #500]	@ (8013278 <udp_input+0x210>)
 8013084:	f000 fa34 	bl	80134f0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013088:	683b      	ldr	r3, [r7, #0]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d105      	bne.n	801309a <udp_input+0x32>
 801308e:	4b78      	ldr	r3, [pc, #480]	@ (8013270 <udp_input+0x208>)
 8013090:	22d0      	movs	r2, #208	@ 0xd0
 8013092:	497a      	ldr	r1, [pc, #488]	@ (801327c <udp_input+0x214>)
 8013094:	4878      	ldr	r0, [pc, #480]	@ (8013278 <udp_input+0x210>)
 8013096:	f000 fa2b 	bl	80134f0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	895b      	ldrh	r3, [r3, #10]
 801309e:	2b07      	cmp	r3, #7
 80130a0:	d803      	bhi.n	80130aa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7f9 ff6a 	bl	800cf7c <pbuf_free>
    goto end;
 80130a8:	e0de      	b.n	8013268 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80130b0:	4b73      	ldr	r3, [pc, #460]	@ (8013280 <udp_input+0x218>)
 80130b2:	695b      	ldr	r3, [r3, #20]
 80130b4:	4a72      	ldr	r2, [pc, #456]	@ (8013280 <udp_input+0x218>)
 80130b6:	6812      	ldr	r2, [r2, #0]
 80130b8:	4611      	mov	r1, r2
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f7 fd36 	bl	800ab2c <ip4_addr_isbroadcast_u32>
 80130c0:	4603      	mov	r3, r0
 80130c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7f6 f8a2 	bl	8009214 <lwip_htons>
 80130d0:	4603      	mov	r3, r0
 80130d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	885b      	ldrh	r3, [r3, #2]
 80130d8:	b29b      	uxth	r3, r3
 80130da:	4618      	mov	r0, r3
 80130dc:	f7f6 f89a 	bl	8009214 <lwip_htons>
 80130e0:	4603      	mov	r3, r0
 80130e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80130e4:	2300      	movs	r3, #0
 80130e6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80130e8:	2300      	movs	r3, #0
 80130ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80130ec:	2300      	movs	r3, #0
 80130ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130f0:	4b64      	ldr	r3, [pc, #400]	@ (8013284 <udp_input+0x21c>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80130f6:	e054      	b.n	80131a2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80130f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130fa:	8a5b      	ldrh	r3, [r3, #18]
 80130fc:	89fa      	ldrh	r2, [r7, #14]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d14a      	bne.n	8013198 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013102:	7cfb      	ldrb	r3, [r7, #19]
 8013104:	461a      	mov	r2, r3
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801310a:	f7ff ff49 	bl	8012fa0 <udp_input_local_match>
 801310e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013110:	2b00      	cmp	r3, #0
 8013112:	d041      	beq.n	8013198 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013116:	7c1b      	ldrb	r3, [r3, #16]
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	2b00      	cmp	r3, #0
 801311e:	d11d      	bne.n	801315c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013120:	69fb      	ldr	r3, [r7, #28]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d102      	bne.n	801312c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013128:	61fb      	str	r3, [r7, #28]
 801312a:	e017      	b.n	801315c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801312c:	7cfb      	ldrb	r3, [r7, #19]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d014      	beq.n	801315c <udp_input+0xf4>
 8013132:	4b53      	ldr	r3, [pc, #332]	@ (8013280 <udp_input+0x218>)
 8013134:	695b      	ldr	r3, [r3, #20]
 8013136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313a:	d10f      	bne.n	801315c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	681a      	ldr	r2, [r3, #0]
 8013140:	683b      	ldr	r3, [r7, #0]
 8013142:	3304      	adds	r3, #4
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d008      	beq.n	801315c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	683b      	ldr	r3, [r7, #0]
 8013150:	3304      	adds	r3, #4
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	429a      	cmp	r2, r3
 8013156:	d101      	bne.n	801315c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801315a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801315c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801315e:	8a9b      	ldrh	r3, [r3, #20]
 8013160:	8a3a      	ldrh	r2, [r7, #16]
 8013162:	429a      	cmp	r2, r3
 8013164:	d118      	bne.n	8013198 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013168:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801316a:	2b00      	cmp	r3, #0
 801316c:	d005      	beq.n	801317a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013170:	685a      	ldr	r2, [r3, #4]
 8013172:	4b43      	ldr	r3, [pc, #268]	@ (8013280 <udp_input+0x218>)
 8013174:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013176:	429a      	cmp	r2, r3
 8013178:	d10e      	bne.n	8013198 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d014      	beq.n	80131aa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013182:	68da      	ldr	r2, [r3, #12]
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013188:	4b3e      	ldr	r3, [pc, #248]	@ (8013284 <udp_input+0x21c>)
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801318e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013190:	4a3c      	ldr	r2, [pc, #240]	@ (8013284 <udp_input+0x21c>)
 8013192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013194:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013196:	e008      	b.n	80131aa <udp_input+0x142>
      }
    }

    prev = pcb;
 8013198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801319a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801319c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801319e:	68db      	ldr	r3, [r3, #12]
 80131a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80131a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d1a7      	bne.n	80130f8 <udp_input+0x90>
 80131a8:	e000      	b.n	80131ac <udp_input+0x144>
        break;
 80131aa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80131ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d101      	bne.n	80131b6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80131b2:	69fb      	ldr	r3, [r7, #28]
 80131b4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80131b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d002      	beq.n	80131c2 <udp_input+0x15a>
    for_us = 1;
 80131bc:	2301      	movs	r3, #1
 80131be:	76fb      	strb	r3, [r7, #27]
 80131c0:	e00a      	b.n	80131d8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	3304      	adds	r3, #4
 80131c6:	681a      	ldr	r2, [r3, #0]
 80131c8:	4b2d      	ldr	r3, [pc, #180]	@ (8013280 <udp_input+0x218>)
 80131ca:	695b      	ldr	r3, [r3, #20]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	bf0c      	ite	eq
 80131d0:	2301      	moveq	r3, #1
 80131d2:	2300      	movne	r3, #0
 80131d4:	b2db      	uxtb	r3, r3
 80131d6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80131d8:	7efb      	ldrb	r3, [r7, #27]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d041      	beq.n	8013262 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80131de:	2108      	movs	r1, #8
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f7f9 fe45 	bl	800ce70 <pbuf_remove_header>
 80131e6:	4603      	mov	r3, r0
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d00a      	beq.n	8013202 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80131ec:	4b20      	ldr	r3, [pc, #128]	@ (8013270 <udp_input+0x208>)
 80131ee:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 80131f2:	4925      	ldr	r1, [pc, #148]	@ (8013288 <udp_input+0x220>)
 80131f4:	4820      	ldr	r0, [pc, #128]	@ (8013278 <udp_input+0x210>)
 80131f6:	f000 f97b 	bl	80134f0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f7f9 febe 	bl	800cf7c <pbuf_free>
      goto end;
 8013200:	e032      	b.n	8013268 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013204:	2b00      	cmp	r3, #0
 8013206:	d012      	beq.n	801322e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801320a:	699b      	ldr	r3, [r3, #24]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d00a      	beq.n	8013226 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013212:	699c      	ldr	r4, [r3, #24]
 8013214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013216:	69d8      	ldr	r0, [r3, #28]
 8013218:	8a3b      	ldrh	r3, [r7, #16]
 801321a:	9300      	str	r3, [sp, #0]
 801321c:	4b1b      	ldr	r3, [pc, #108]	@ (801328c <udp_input+0x224>)
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013222:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013224:	e021      	b.n	801326a <udp_input+0x202>
        pbuf_free(p);
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f7f9 fea8 	bl	800cf7c <pbuf_free>
        goto end;
 801322c:	e01c      	b.n	8013268 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801322e:	7cfb      	ldrb	r3, [r7, #19]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d112      	bne.n	801325a <udp_input+0x1f2>
 8013234:	4b12      	ldr	r3, [pc, #72]	@ (8013280 <udp_input+0x218>)
 8013236:	695b      	ldr	r3, [r3, #20]
 8013238:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801323c:	2be0      	cmp	r3, #224	@ 0xe0
 801323e:	d00c      	beq.n	801325a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013240:	4b0f      	ldr	r3, [pc, #60]	@ (8013280 <udp_input+0x218>)
 8013242:	899b      	ldrh	r3, [r3, #12]
 8013244:	3308      	adds	r3, #8
 8013246:	b29b      	uxth	r3, r3
 8013248:	b21b      	sxth	r3, r3
 801324a:	4619      	mov	r1, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f7f9 fe82 	bl	800cf56 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013252:	2103      	movs	r1, #3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f7f7 f931 	bl	800a4bc <icmp_dest_unreach>
      pbuf_free(p);
 801325a:	6878      	ldr	r0, [r7, #4]
 801325c:	f7f9 fe8e 	bl	800cf7c <pbuf_free>
  return;
 8013260:	e003      	b.n	801326a <udp_input+0x202>
    pbuf_free(p);
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7f9 fe8a 	bl	800cf7c <pbuf_free>
  return;
 8013268:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801326a:	372c      	adds	r7, #44	@ 0x2c
 801326c:	46bd      	mov	sp, r7
 801326e:	bd90      	pop	{r4, r7, pc}
 8013270:	08016d1c 	.word	0x08016d1c
 8013274:	08016dec 	.word	0x08016dec
 8013278:	08016d9c 	.word	0x08016d9c
 801327c:	08016e04 	.word	0x08016e04
 8013280:	24005368 	.word	0x24005368
 8013284:	240084e8 	.word	0x240084e8
 8013288:	08016e20 	.word	0x08016e20
 801328c:	24005378 	.word	0x24005378

08013290 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013290:	b480      	push	{r7}
 8013292:	b085      	sub	sp, #20
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d01e      	beq.n	80132de <udp_netif_ip_addr_changed+0x4e>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d01a      	beq.n	80132de <udp_netif_ip_addr_changed+0x4e>
 80132a8:	683b      	ldr	r3, [r7, #0]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d017      	beq.n	80132de <udp_netif_ip_addr_changed+0x4e>
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d013      	beq.n	80132de <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80132b6:	4b0d      	ldr	r3, [pc, #52]	@ (80132ec <udp_netif_ip_addr_changed+0x5c>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	60fb      	str	r3, [r7, #12]
 80132bc:	e00c      	b.n	80132d8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	681a      	ldr	r2, [r3, #0]
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d103      	bne.n	80132d2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80132ca:	683b      	ldr	r3, [r7, #0]
 80132cc:	681a      	ldr	r2, [r3, #0]
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	60fb      	str	r3, [r7, #12]
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d1ef      	bne.n	80132be <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80132de:	bf00      	nop
 80132e0:	3714      	adds	r7, #20
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr
 80132ea:	bf00      	nop
 80132ec:	240084e8 	.word	0x240084e8

080132f0 <rand>:
 80132f0:	4b16      	ldr	r3, [pc, #88]	@ (801334c <rand+0x5c>)
 80132f2:	b510      	push	{r4, lr}
 80132f4:	681c      	ldr	r4, [r3, #0]
 80132f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80132f8:	b9b3      	cbnz	r3, 8013328 <rand+0x38>
 80132fa:	2018      	movs	r0, #24
 80132fc:	f000 fa00 	bl	8013700 <malloc>
 8013300:	4602      	mov	r2, r0
 8013302:	6320      	str	r0, [r4, #48]	@ 0x30
 8013304:	b920      	cbnz	r0, 8013310 <rand+0x20>
 8013306:	4b12      	ldr	r3, [pc, #72]	@ (8013350 <rand+0x60>)
 8013308:	4812      	ldr	r0, [pc, #72]	@ (8013354 <rand+0x64>)
 801330a:	2152      	movs	r1, #82	@ 0x52
 801330c:	f000 f9da 	bl	80136c4 <__assert_func>
 8013310:	4911      	ldr	r1, [pc, #68]	@ (8013358 <rand+0x68>)
 8013312:	4b12      	ldr	r3, [pc, #72]	@ (801335c <rand+0x6c>)
 8013314:	e9c0 1300 	strd	r1, r3, [r0]
 8013318:	4b11      	ldr	r3, [pc, #68]	@ (8013360 <rand+0x70>)
 801331a:	6083      	str	r3, [r0, #8]
 801331c:	230b      	movs	r3, #11
 801331e:	8183      	strh	r3, [r0, #12]
 8013320:	2100      	movs	r1, #0
 8013322:	2001      	movs	r0, #1
 8013324:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013328:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801332a:	480e      	ldr	r0, [pc, #56]	@ (8013364 <rand+0x74>)
 801332c:	690b      	ldr	r3, [r1, #16]
 801332e:	694c      	ldr	r4, [r1, #20]
 8013330:	4a0d      	ldr	r2, [pc, #52]	@ (8013368 <rand+0x78>)
 8013332:	4358      	muls	r0, r3
 8013334:	fb02 0004 	mla	r0, r2, r4, r0
 8013338:	fba3 3202 	umull	r3, r2, r3, r2
 801333c:	3301      	adds	r3, #1
 801333e:	eb40 0002 	adc.w	r0, r0, r2
 8013342:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013346:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801334a:	bd10      	pop	{r4, pc}
 801334c:	24000040 	.word	0x24000040
 8013350:	08017210 	.word	0x08017210
 8013354:	08017227 	.word	0x08017227
 8013358:	abcd330e 	.word	0xabcd330e
 801335c:	e66d1234 	.word	0xe66d1234
 8013360:	0005deec 	.word	0x0005deec
 8013364:	5851f42d 	.word	0x5851f42d
 8013368:	4c957f2d 	.word	0x4c957f2d

0801336c <std>:
 801336c:	2300      	movs	r3, #0
 801336e:	b510      	push	{r4, lr}
 8013370:	4604      	mov	r4, r0
 8013372:	e9c0 3300 	strd	r3, r3, [r0]
 8013376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801337a:	6083      	str	r3, [r0, #8]
 801337c:	8181      	strh	r1, [r0, #12]
 801337e:	6643      	str	r3, [r0, #100]	@ 0x64
 8013380:	81c2      	strh	r2, [r0, #14]
 8013382:	6183      	str	r3, [r0, #24]
 8013384:	4619      	mov	r1, r3
 8013386:	2208      	movs	r2, #8
 8013388:	305c      	adds	r0, #92	@ 0x5c
 801338a:	f000 f916 	bl	80135ba <memset>
 801338e:	4b0d      	ldr	r3, [pc, #52]	@ (80133c4 <std+0x58>)
 8013390:	6263      	str	r3, [r4, #36]	@ 0x24
 8013392:	4b0d      	ldr	r3, [pc, #52]	@ (80133c8 <std+0x5c>)
 8013394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013396:	4b0d      	ldr	r3, [pc, #52]	@ (80133cc <std+0x60>)
 8013398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801339a:	4b0d      	ldr	r3, [pc, #52]	@ (80133d0 <std+0x64>)
 801339c:	6323      	str	r3, [r4, #48]	@ 0x30
 801339e:	4b0d      	ldr	r3, [pc, #52]	@ (80133d4 <std+0x68>)
 80133a0:	6224      	str	r4, [r4, #32]
 80133a2:	429c      	cmp	r4, r3
 80133a4:	d006      	beq.n	80133b4 <std+0x48>
 80133a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80133aa:	4294      	cmp	r4, r2
 80133ac:	d002      	beq.n	80133b4 <std+0x48>
 80133ae:	33d0      	adds	r3, #208	@ 0xd0
 80133b0:	429c      	cmp	r4, r3
 80133b2:	d105      	bne.n	80133c0 <std+0x54>
 80133b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80133b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80133bc:	f000 b970 	b.w	80136a0 <__retarget_lock_init_recursive>
 80133c0:	bd10      	pop	{r4, pc}
 80133c2:	bf00      	nop
 80133c4:	08013515 	.word	0x08013515
 80133c8:	08013537 	.word	0x08013537
 80133cc:	0801356f 	.word	0x0801356f
 80133d0:	08013593 	.word	0x08013593
 80133d4:	240084ec 	.word	0x240084ec

080133d8 <stdio_exit_handler>:
 80133d8:	4a02      	ldr	r2, [pc, #8]	@ (80133e4 <stdio_exit_handler+0xc>)
 80133da:	4903      	ldr	r1, [pc, #12]	@ (80133e8 <stdio_exit_handler+0x10>)
 80133dc:	4803      	ldr	r0, [pc, #12]	@ (80133ec <stdio_exit_handler+0x14>)
 80133de:	f000 b869 	b.w	80134b4 <_fwalk_sglue>
 80133e2:	bf00      	nop
 80133e4:	24000034 	.word	0x24000034
 80133e8:	08013f15 	.word	0x08013f15
 80133ec:	24000044 	.word	0x24000044

080133f0 <cleanup_stdio>:
 80133f0:	6841      	ldr	r1, [r0, #4]
 80133f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013424 <cleanup_stdio+0x34>)
 80133f4:	4299      	cmp	r1, r3
 80133f6:	b510      	push	{r4, lr}
 80133f8:	4604      	mov	r4, r0
 80133fa:	d001      	beq.n	8013400 <cleanup_stdio+0x10>
 80133fc:	f000 fd8a 	bl	8013f14 <_fflush_r>
 8013400:	68a1      	ldr	r1, [r4, #8]
 8013402:	4b09      	ldr	r3, [pc, #36]	@ (8013428 <cleanup_stdio+0x38>)
 8013404:	4299      	cmp	r1, r3
 8013406:	d002      	beq.n	801340e <cleanup_stdio+0x1e>
 8013408:	4620      	mov	r0, r4
 801340a:	f000 fd83 	bl	8013f14 <_fflush_r>
 801340e:	68e1      	ldr	r1, [r4, #12]
 8013410:	4b06      	ldr	r3, [pc, #24]	@ (801342c <cleanup_stdio+0x3c>)
 8013412:	4299      	cmp	r1, r3
 8013414:	d004      	beq.n	8013420 <cleanup_stdio+0x30>
 8013416:	4620      	mov	r0, r4
 8013418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801341c:	f000 bd7a 	b.w	8013f14 <_fflush_r>
 8013420:	bd10      	pop	{r4, pc}
 8013422:	bf00      	nop
 8013424:	240084ec 	.word	0x240084ec
 8013428:	24008554 	.word	0x24008554
 801342c:	240085bc 	.word	0x240085bc

08013430 <global_stdio_init.part.0>:
 8013430:	b510      	push	{r4, lr}
 8013432:	4b0b      	ldr	r3, [pc, #44]	@ (8013460 <global_stdio_init.part.0+0x30>)
 8013434:	4c0b      	ldr	r4, [pc, #44]	@ (8013464 <global_stdio_init.part.0+0x34>)
 8013436:	4a0c      	ldr	r2, [pc, #48]	@ (8013468 <global_stdio_init.part.0+0x38>)
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	4620      	mov	r0, r4
 801343c:	2200      	movs	r2, #0
 801343e:	2104      	movs	r1, #4
 8013440:	f7ff ff94 	bl	801336c <std>
 8013444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013448:	2201      	movs	r2, #1
 801344a:	2109      	movs	r1, #9
 801344c:	f7ff ff8e 	bl	801336c <std>
 8013450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013454:	2202      	movs	r2, #2
 8013456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801345a:	2112      	movs	r1, #18
 801345c:	f7ff bf86 	b.w	801336c <std>
 8013460:	24008624 	.word	0x24008624
 8013464:	240084ec 	.word	0x240084ec
 8013468:	080133d9 	.word	0x080133d9

0801346c <__sfp_lock_acquire>:
 801346c:	4801      	ldr	r0, [pc, #4]	@ (8013474 <__sfp_lock_acquire+0x8>)
 801346e:	f000 b918 	b.w	80136a2 <__retarget_lock_acquire_recursive>
 8013472:	bf00      	nop
 8013474:	24008629 	.word	0x24008629

08013478 <__sfp_lock_release>:
 8013478:	4801      	ldr	r0, [pc, #4]	@ (8013480 <__sfp_lock_release+0x8>)
 801347a:	f000 b913 	b.w	80136a4 <__retarget_lock_release_recursive>
 801347e:	bf00      	nop
 8013480:	24008629 	.word	0x24008629

08013484 <__sinit>:
 8013484:	b510      	push	{r4, lr}
 8013486:	4604      	mov	r4, r0
 8013488:	f7ff fff0 	bl	801346c <__sfp_lock_acquire>
 801348c:	6a23      	ldr	r3, [r4, #32]
 801348e:	b11b      	cbz	r3, 8013498 <__sinit+0x14>
 8013490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013494:	f7ff bff0 	b.w	8013478 <__sfp_lock_release>
 8013498:	4b04      	ldr	r3, [pc, #16]	@ (80134ac <__sinit+0x28>)
 801349a:	6223      	str	r3, [r4, #32]
 801349c:	4b04      	ldr	r3, [pc, #16]	@ (80134b0 <__sinit+0x2c>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	2b00      	cmp	r3, #0
 80134a2:	d1f5      	bne.n	8013490 <__sinit+0xc>
 80134a4:	f7ff ffc4 	bl	8013430 <global_stdio_init.part.0>
 80134a8:	e7f2      	b.n	8013490 <__sinit+0xc>
 80134aa:	bf00      	nop
 80134ac:	080133f1 	.word	0x080133f1
 80134b0:	24008624 	.word	0x24008624

080134b4 <_fwalk_sglue>:
 80134b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134b8:	4607      	mov	r7, r0
 80134ba:	4688      	mov	r8, r1
 80134bc:	4614      	mov	r4, r2
 80134be:	2600      	movs	r6, #0
 80134c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80134c4:	f1b9 0901 	subs.w	r9, r9, #1
 80134c8:	d505      	bpl.n	80134d6 <_fwalk_sglue+0x22>
 80134ca:	6824      	ldr	r4, [r4, #0]
 80134cc:	2c00      	cmp	r4, #0
 80134ce:	d1f7      	bne.n	80134c0 <_fwalk_sglue+0xc>
 80134d0:	4630      	mov	r0, r6
 80134d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134d6:	89ab      	ldrh	r3, [r5, #12]
 80134d8:	2b01      	cmp	r3, #1
 80134da:	d907      	bls.n	80134ec <_fwalk_sglue+0x38>
 80134dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80134e0:	3301      	adds	r3, #1
 80134e2:	d003      	beq.n	80134ec <_fwalk_sglue+0x38>
 80134e4:	4629      	mov	r1, r5
 80134e6:	4638      	mov	r0, r7
 80134e8:	47c0      	blx	r8
 80134ea:	4306      	orrs	r6, r0
 80134ec:	3568      	adds	r5, #104	@ 0x68
 80134ee:	e7e9      	b.n	80134c4 <_fwalk_sglue+0x10>

080134f0 <iprintf>:
 80134f0:	b40f      	push	{r0, r1, r2, r3}
 80134f2:	b507      	push	{r0, r1, r2, lr}
 80134f4:	4906      	ldr	r1, [pc, #24]	@ (8013510 <iprintf+0x20>)
 80134f6:	ab04      	add	r3, sp, #16
 80134f8:	6808      	ldr	r0, [r1, #0]
 80134fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80134fe:	6881      	ldr	r1, [r0, #8]
 8013500:	9301      	str	r3, [sp, #4]
 8013502:	f000 f9dd 	bl	80138c0 <_vfiprintf_r>
 8013506:	b003      	add	sp, #12
 8013508:	f85d eb04 	ldr.w	lr, [sp], #4
 801350c:	b004      	add	sp, #16
 801350e:	4770      	bx	lr
 8013510:	24000040 	.word	0x24000040

08013514 <__sread>:
 8013514:	b510      	push	{r4, lr}
 8013516:	460c      	mov	r4, r1
 8013518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801351c:	f000 f878 	bl	8013610 <_read_r>
 8013520:	2800      	cmp	r0, #0
 8013522:	bfab      	itete	ge
 8013524:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013526:	89a3      	ldrhlt	r3, [r4, #12]
 8013528:	181b      	addge	r3, r3, r0
 801352a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801352e:	bfac      	ite	ge
 8013530:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013532:	81a3      	strhlt	r3, [r4, #12]
 8013534:	bd10      	pop	{r4, pc}

08013536 <__swrite>:
 8013536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801353a:	461f      	mov	r7, r3
 801353c:	898b      	ldrh	r3, [r1, #12]
 801353e:	05db      	lsls	r3, r3, #23
 8013540:	4605      	mov	r5, r0
 8013542:	460c      	mov	r4, r1
 8013544:	4616      	mov	r6, r2
 8013546:	d505      	bpl.n	8013554 <__swrite+0x1e>
 8013548:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801354c:	2302      	movs	r3, #2
 801354e:	2200      	movs	r2, #0
 8013550:	f000 f84c 	bl	80135ec <_lseek_r>
 8013554:	89a3      	ldrh	r3, [r4, #12]
 8013556:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801355a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801355e:	81a3      	strh	r3, [r4, #12]
 8013560:	4632      	mov	r2, r6
 8013562:	463b      	mov	r3, r7
 8013564:	4628      	mov	r0, r5
 8013566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801356a:	f000 b863 	b.w	8013634 <_write_r>

0801356e <__sseek>:
 801356e:	b510      	push	{r4, lr}
 8013570:	460c      	mov	r4, r1
 8013572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013576:	f000 f839 	bl	80135ec <_lseek_r>
 801357a:	1c43      	adds	r3, r0, #1
 801357c:	89a3      	ldrh	r3, [r4, #12]
 801357e:	bf15      	itete	ne
 8013580:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013582:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013586:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801358a:	81a3      	strheq	r3, [r4, #12]
 801358c:	bf18      	it	ne
 801358e:	81a3      	strhne	r3, [r4, #12]
 8013590:	bd10      	pop	{r4, pc}

08013592 <__sclose>:
 8013592:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013596:	f000 b819 	b.w	80135cc <_close_r>

0801359a <memcmp>:
 801359a:	b510      	push	{r4, lr}
 801359c:	3901      	subs	r1, #1
 801359e:	4402      	add	r2, r0
 80135a0:	4290      	cmp	r0, r2
 80135a2:	d101      	bne.n	80135a8 <memcmp+0xe>
 80135a4:	2000      	movs	r0, #0
 80135a6:	e005      	b.n	80135b4 <memcmp+0x1a>
 80135a8:	7803      	ldrb	r3, [r0, #0]
 80135aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80135ae:	42a3      	cmp	r3, r4
 80135b0:	d001      	beq.n	80135b6 <memcmp+0x1c>
 80135b2:	1b18      	subs	r0, r3, r4
 80135b4:	bd10      	pop	{r4, pc}
 80135b6:	3001      	adds	r0, #1
 80135b8:	e7f2      	b.n	80135a0 <memcmp+0x6>

080135ba <memset>:
 80135ba:	4402      	add	r2, r0
 80135bc:	4603      	mov	r3, r0
 80135be:	4293      	cmp	r3, r2
 80135c0:	d100      	bne.n	80135c4 <memset+0xa>
 80135c2:	4770      	bx	lr
 80135c4:	f803 1b01 	strb.w	r1, [r3], #1
 80135c8:	e7f9      	b.n	80135be <memset+0x4>
	...

080135cc <_close_r>:
 80135cc:	b538      	push	{r3, r4, r5, lr}
 80135ce:	4d06      	ldr	r5, [pc, #24]	@ (80135e8 <_close_r+0x1c>)
 80135d0:	2300      	movs	r3, #0
 80135d2:	4604      	mov	r4, r0
 80135d4:	4608      	mov	r0, r1
 80135d6:	602b      	str	r3, [r5, #0]
 80135d8:	f7ed fa8c 	bl	8000af4 <_close>
 80135dc:	1c43      	adds	r3, r0, #1
 80135de:	d102      	bne.n	80135e6 <_close_r+0x1a>
 80135e0:	682b      	ldr	r3, [r5, #0]
 80135e2:	b103      	cbz	r3, 80135e6 <_close_r+0x1a>
 80135e4:	6023      	str	r3, [r4, #0]
 80135e6:	bd38      	pop	{r3, r4, r5, pc}
 80135e8:	24008474 	.word	0x24008474

080135ec <_lseek_r>:
 80135ec:	b538      	push	{r3, r4, r5, lr}
 80135ee:	4d07      	ldr	r5, [pc, #28]	@ (801360c <_lseek_r+0x20>)
 80135f0:	4604      	mov	r4, r0
 80135f2:	4608      	mov	r0, r1
 80135f4:	4611      	mov	r1, r2
 80135f6:	2200      	movs	r2, #0
 80135f8:	602a      	str	r2, [r5, #0]
 80135fa:	461a      	mov	r2, r3
 80135fc:	f7ed faa1 	bl	8000b42 <_lseek>
 8013600:	1c43      	adds	r3, r0, #1
 8013602:	d102      	bne.n	801360a <_lseek_r+0x1e>
 8013604:	682b      	ldr	r3, [r5, #0]
 8013606:	b103      	cbz	r3, 801360a <_lseek_r+0x1e>
 8013608:	6023      	str	r3, [r4, #0]
 801360a:	bd38      	pop	{r3, r4, r5, pc}
 801360c:	24008474 	.word	0x24008474

08013610 <_read_r>:
 8013610:	b538      	push	{r3, r4, r5, lr}
 8013612:	4d07      	ldr	r5, [pc, #28]	@ (8013630 <_read_r+0x20>)
 8013614:	4604      	mov	r4, r0
 8013616:	4608      	mov	r0, r1
 8013618:	4611      	mov	r1, r2
 801361a:	2200      	movs	r2, #0
 801361c:	602a      	str	r2, [r5, #0]
 801361e:	461a      	mov	r2, r3
 8013620:	f7ed fa2f 	bl	8000a82 <_read>
 8013624:	1c43      	adds	r3, r0, #1
 8013626:	d102      	bne.n	801362e <_read_r+0x1e>
 8013628:	682b      	ldr	r3, [r5, #0]
 801362a:	b103      	cbz	r3, 801362e <_read_r+0x1e>
 801362c:	6023      	str	r3, [r4, #0]
 801362e:	bd38      	pop	{r3, r4, r5, pc}
 8013630:	24008474 	.word	0x24008474

08013634 <_write_r>:
 8013634:	b538      	push	{r3, r4, r5, lr}
 8013636:	4d07      	ldr	r5, [pc, #28]	@ (8013654 <_write_r+0x20>)
 8013638:	4604      	mov	r4, r0
 801363a:	4608      	mov	r0, r1
 801363c:	4611      	mov	r1, r2
 801363e:	2200      	movs	r2, #0
 8013640:	602a      	str	r2, [r5, #0]
 8013642:	461a      	mov	r2, r3
 8013644:	f7ed fa3a 	bl	8000abc <_write>
 8013648:	1c43      	adds	r3, r0, #1
 801364a:	d102      	bne.n	8013652 <_write_r+0x1e>
 801364c:	682b      	ldr	r3, [r5, #0]
 801364e:	b103      	cbz	r3, 8013652 <_write_r+0x1e>
 8013650:	6023      	str	r3, [r4, #0]
 8013652:	bd38      	pop	{r3, r4, r5, pc}
 8013654:	24008474 	.word	0x24008474

08013658 <__libc_init_array>:
 8013658:	b570      	push	{r4, r5, r6, lr}
 801365a:	4d0d      	ldr	r5, [pc, #52]	@ (8013690 <__libc_init_array+0x38>)
 801365c:	4c0d      	ldr	r4, [pc, #52]	@ (8013694 <__libc_init_array+0x3c>)
 801365e:	1b64      	subs	r4, r4, r5
 8013660:	10a4      	asrs	r4, r4, #2
 8013662:	2600      	movs	r6, #0
 8013664:	42a6      	cmp	r6, r4
 8013666:	d109      	bne.n	801367c <__libc_init_array+0x24>
 8013668:	4d0b      	ldr	r5, [pc, #44]	@ (8013698 <__libc_init_array+0x40>)
 801366a:	4c0c      	ldr	r4, [pc, #48]	@ (801369c <__libc_init_array+0x44>)
 801366c:	f000 fe4a 	bl	8014304 <_init>
 8013670:	1b64      	subs	r4, r4, r5
 8013672:	10a4      	asrs	r4, r4, #2
 8013674:	2600      	movs	r6, #0
 8013676:	42a6      	cmp	r6, r4
 8013678:	d105      	bne.n	8013686 <__libc_init_array+0x2e>
 801367a:	bd70      	pop	{r4, r5, r6, pc}
 801367c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013680:	4798      	blx	r3
 8013682:	3601      	adds	r6, #1
 8013684:	e7ee      	b.n	8013664 <__libc_init_array+0xc>
 8013686:	f855 3b04 	ldr.w	r3, [r5], #4
 801368a:	4798      	blx	r3
 801368c:	3601      	adds	r6, #1
 801368e:	e7f2      	b.n	8013676 <__libc_init_array+0x1e>
 8013690:	080172f8 	.word	0x080172f8
 8013694:	080172f8 	.word	0x080172f8
 8013698:	080172f8 	.word	0x080172f8
 801369c:	080172fc 	.word	0x080172fc

080136a0 <__retarget_lock_init_recursive>:
 80136a0:	4770      	bx	lr

080136a2 <__retarget_lock_acquire_recursive>:
 80136a2:	4770      	bx	lr

080136a4 <__retarget_lock_release_recursive>:
 80136a4:	4770      	bx	lr

080136a6 <memcpy>:
 80136a6:	440a      	add	r2, r1
 80136a8:	4291      	cmp	r1, r2
 80136aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80136ae:	d100      	bne.n	80136b2 <memcpy+0xc>
 80136b0:	4770      	bx	lr
 80136b2:	b510      	push	{r4, lr}
 80136b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80136b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80136bc:	4291      	cmp	r1, r2
 80136be:	d1f9      	bne.n	80136b4 <memcpy+0xe>
 80136c0:	bd10      	pop	{r4, pc}
	...

080136c4 <__assert_func>:
 80136c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80136c6:	4614      	mov	r4, r2
 80136c8:	461a      	mov	r2, r3
 80136ca:	4b09      	ldr	r3, [pc, #36]	@ (80136f0 <__assert_func+0x2c>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	4605      	mov	r5, r0
 80136d0:	68d8      	ldr	r0, [r3, #12]
 80136d2:	b954      	cbnz	r4, 80136ea <__assert_func+0x26>
 80136d4:	4b07      	ldr	r3, [pc, #28]	@ (80136f4 <__assert_func+0x30>)
 80136d6:	461c      	mov	r4, r3
 80136d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80136dc:	9100      	str	r1, [sp, #0]
 80136de:	462b      	mov	r3, r5
 80136e0:	4905      	ldr	r1, [pc, #20]	@ (80136f8 <__assert_func+0x34>)
 80136e2:	f000 fc3f 	bl	8013f64 <fiprintf>
 80136e6:	f000 fcf3 	bl	80140d0 <abort>
 80136ea:	4b04      	ldr	r3, [pc, #16]	@ (80136fc <__assert_func+0x38>)
 80136ec:	e7f4      	b.n	80136d8 <__assert_func+0x14>
 80136ee:	bf00      	nop
 80136f0:	24000040 	.word	0x24000040
 80136f4:	080172ba 	.word	0x080172ba
 80136f8:	0801728c 	.word	0x0801728c
 80136fc:	0801727f 	.word	0x0801727f

08013700 <malloc>:
 8013700:	4b02      	ldr	r3, [pc, #8]	@ (801370c <malloc+0xc>)
 8013702:	4601      	mov	r1, r0
 8013704:	6818      	ldr	r0, [r3, #0]
 8013706:	f000 b825 	b.w	8013754 <_malloc_r>
 801370a:	bf00      	nop
 801370c:	24000040 	.word	0x24000040

08013710 <sbrk_aligned>:
 8013710:	b570      	push	{r4, r5, r6, lr}
 8013712:	4e0f      	ldr	r6, [pc, #60]	@ (8013750 <sbrk_aligned+0x40>)
 8013714:	460c      	mov	r4, r1
 8013716:	6831      	ldr	r1, [r6, #0]
 8013718:	4605      	mov	r5, r0
 801371a:	b911      	cbnz	r1, 8013722 <sbrk_aligned+0x12>
 801371c:	f000 fcc8 	bl	80140b0 <_sbrk_r>
 8013720:	6030      	str	r0, [r6, #0]
 8013722:	4621      	mov	r1, r4
 8013724:	4628      	mov	r0, r5
 8013726:	f000 fcc3 	bl	80140b0 <_sbrk_r>
 801372a:	1c43      	adds	r3, r0, #1
 801372c:	d103      	bne.n	8013736 <sbrk_aligned+0x26>
 801372e:	f04f 34ff 	mov.w	r4, #4294967295
 8013732:	4620      	mov	r0, r4
 8013734:	bd70      	pop	{r4, r5, r6, pc}
 8013736:	1cc4      	adds	r4, r0, #3
 8013738:	f024 0403 	bic.w	r4, r4, #3
 801373c:	42a0      	cmp	r0, r4
 801373e:	d0f8      	beq.n	8013732 <sbrk_aligned+0x22>
 8013740:	1a21      	subs	r1, r4, r0
 8013742:	4628      	mov	r0, r5
 8013744:	f000 fcb4 	bl	80140b0 <_sbrk_r>
 8013748:	3001      	adds	r0, #1
 801374a:	d1f2      	bne.n	8013732 <sbrk_aligned+0x22>
 801374c:	e7ef      	b.n	801372e <sbrk_aligned+0x1e>
 801374e:	bf00      	nop
 8013750:	2400862c 	.word	0x2400862c

08013754 <_malloc_r>:
 8013754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013758:	1ccd      	adds	r5, r1, #3
 801375a:	f025 0503 	bic.w	r5, r5, #3
 801375e:	3508      	adds	r5, #8
 8013760:	2d0c      	cmp	r5, #12
 8013762:	bf38      	it	cc
 8013764:	250c      	movcc	r5, #12
 8013766:	2d00      	cmp	r5, #0
 8013768:	4606      	mov	r6, r0
 801376a:	db01      	blt.n	8013770 <_malloc_r+0x1c>
 801376c:	42a9      	cmp	r1, r5
 801376e:	d904      	bls.n	801377a <_malloc_r+0x26>
 8013770:	230c      	movs	r3, #12
 8013772:	6033      	str	r3, [r6, #0]
 8013774:	2000      	movs	r0, #0
 8013776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801377a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013850 <_malloc_r+0xfc>
 801377e:	f000 f869 	bl	8013854 <__malloc_lock>
 8013782:	f8d8 3000 	ldr.w	r3, [r8]
 8013786:	461c      	mov	r4, r3
 8013788:	bb44      	cbnz	r4, 80137dc <_malloc_r+0x88>
 801378a:	4629      	mov	r1, r5
 801378c:	4630      	mov	r0, r6
 801378e:	f7ff ffbf 	bl	8013710 <sbrk_aligned>
 8013792:	1c43      	adds	r3, r0, #1
 8013794:	4604      	mov	r4, r0
 8013796:	d158      	bne.n	801384a <_malloc_r+0xf6>
 8013798:	f8d8 4000 	ldr.w	r4, [r8]
 801379c:	4627      	mov	r7, r4
 801379e:	2f00      	cmp	r7, #0
 80137a0:	d143      	bne.n	801382a <_malloc_r+0xd6>
 80137a2:	2c00      	cmp	r4, #0
 80137a4:	d04b      	beq.n	801383e <_malloc_r+0xea>
 80137a6:	6823      	ldr	r3, [r4, #0]
 80137a8:	4639      	mov	r1, r7
 80137aa:	4630      	mov	r0, r6
 80137ac:	eb04 0903 	add.w	r9, r4, r3
 80137b0:	f000 fc7e 	bl	80140b0 <_sbrk_r>
 80137b4:	4581      	cmp	r9, r0
 80137b6:	d142      	bne.n	801383e <_malloc_r+0xea>
 80137b8:	6821      	ldr	r1, [r4, #0]
 80137ba:	1a6d      	subs	r5, r5, r1
 80137bc:	4629      	mov	r1, r5
 80137be:	4630      	mov	r0, r6
 80137c0:	f7ff ffa6 	bl	8013710 <sbrk_aligned>
 80137c4:	3001      	adds	r0, #1
 80137c6:	d03a      	beq.n	801383e <_malloc_r+0xea>
 80137c8:	6823      	ldr	r3, [r4, #0]
 80137ca:	442b      	add	r3, r5
 80137cc:	6023      	str	r3, [r4, #0]
 80137ce:	f8d8 3000 	ldr.w	r3, [r8]
 80137d2:	685a      	ldr	r2, [r3, #4]
 80137d4:	bb62      	cbnz	r2, 8013830 <_malloc_r+0xdc>
 80137d6:	f8c8 7000 	str.w	r7, [r8]
 80137da:	e00f      	b.n	80137fc <_malloc_r+0xa8>
 80137dc:	6822      	ldr	r2, [r4, #0]
 80137de:	1b52      	subs	r2, r2, r5
 80137e0:	d420      	bmi.n	8013824 <_malloc_r+0xd0>
 80137e2:	2a0b      	cmp	r2, #11
 80137e4:	d917      	bls.n	8013816 <_malloc_r+0xc2>
 80137e6:	1961      	adds	r1, r4, r5
 80137e8:	42a3      	cmp	r3, r4
 80137ea:	6025      	str	r5, [r4, #0]
 80137ec:	bf18      	it	ne
 80137ee:	6059      	strne	r1, [r3, #4]
 80137f0:	6863      	ldr	r3, [r4, #4]
 80137f2:	bf08      	it	eq
 80137f4:	f8c8 1000 	streq.w	r1, [r8]
 80137f8:	5162      	str	r2, [r4, r5]
 80137fa:	604b      	str	r3, [r1, #4]
 80137fc:	4630      	mov	r0, r6
 80137fe:	f000 f82f 	bl	8013860 <__malloc_unlock>
 8013802:	f104 000b 	add.w	r0, r4, #11
 8013806:	1d23      	adds	r3, r4, #4
 8013808:	f020 0007 	bic.w	r0, r0, #7
 801380c:	1ac2      	subs	r2, r0, r3
 801380e:	bf1c      	itt	ne
 8013810:	1a1b      	subne	r3, r3, r0
 8013812:	50a3      	strne	r3, [r4, r2]
 8013814:	e7af      	b.n	8013776 <_malloc_r+0x22>
 8013816:	6862      	ldr	r2, [r4, #4]
 8013818:	42a3      	cmp	r3, r4
 801381a:	bf0c      	ite	eq
 801381c:	f8c8 2000 	streq.w	r2, [r8]
 8013820:	605a      	strne	r2, [r3, #4]
 8013822:	e7eb      	b.n	80137fc <_malloc_r+0xa8>
 8013824:	4623      	mov	r3, r4
 8013826:	6864      	ldr	r4, [r4, #4]
 8013828:	e7ae      	b.n	8013788 <_malloc_r+0x34>
 801382a:	463c      	mov	r4, r7
 801382c:	687f      	ldr	r7, [r7, #4]
 801382e:	e7b6      	b.n	801379e <_malloc_r+0x4a>
 8013830:	461a      	mov	r2, r3
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	42a3      	cmp	r3, r4
 8013836:	d1fb      	bne.n	8013830 <_malloc_r+0xdc>
 8013838:	2300      	movs	r3, #0
 801383a:	6053      	str	r3, [r2, #4]
 801383c:	e7de      	b.n	80137fc <_malloc_r+0xa8>
 801383e:	230c      	movs	r3, #12
 8013840:	6033      	str	r3, [r6, #0]
 8013842:	4630      	mov	r0, r6
 8013844:	f000 f80c 	bl	8013860 <__malloc_unlock>
 8013848:	e794      	b.n	8013774 <_malloc_r+0x20>
 801384a:	6005      	str	r5, [r0, #0]
 801384c:	e7d6      	b.n	80137fc <_malloc_r+0xa8>
 801384e:	bf00      	nop
 8013850:	24008630 	.word	0x24008630

08013854 <__malloc_lock>:
 8013854:	4801      	ldr	r0, [pc, #4]	@ (801385c <__malloc_lock+0x8>)
 8013856:	f7ff bf24 	b.w	80136a2 <__retarget_lock_acquire_recursive>
 801385a:	bf00      	nop
 801385c:	24008628 	.word	0x24008628

08013860 <__malloc_unlock>:
 8013860:	4801      	ldr	r0, [pc, #4]	@ (8013868 <__malloc_unlock+0x8>)
 8013862:	f7ff bf1f 	b.w	80136a4 <__retarget_lock_release_recursive>
 8013866:	bf00      	nop
 8013868:	24008628 	.word	0x24008628

0801386c <__sfputc_r>:
 801386c:	6893      	ldr	r3, [r2, #8]
 801386e:	3b01      	subs	r3, #1
 8013870:	2b00      	cmp	r3, #0
 8013872:	b410      	push	{r4}
 8013874:	6093      	str	r3, [r2, #8]
 8013876:	da08      	bge.n	801388a <__sfputc_r+0x1e>
 8013878:	6994      	ldr	r4, [r2, #24]
 801387a:	42a3      	cmp	r3, r4
 801387c:	db01      	blt.n	8013882 <__sfputc_r+0x16>
 801387e:	290a      	cmp	r1, #10
 8013880:	d103      	bne.n	801388a <__sfputc_r+0x1e>
 8013882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013886:	f000 bb7f 	b.w	8013f88 <__swbuf_r>
 801388a:	6813      	ldr	r3, [r2, #0]
 801388c:	1c58      	adds	r0, r3, #1
 801388e:	6010      	str	r0, [r2, #0]
 8013890:	7019      	strb	r1, [r3, #0]
 8013892:	4608      	mov	r0, r1
 8013894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013898:	4770      	bx	lr

0801389a <__sfputs_r>:
 801389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801389c:	4606      	mov	r6, r0
 801389e:	460f      	mov	r7, r1
 80138a0:	4614      	mov	r4, r2
 80138a2:	18d5      	adds	r5, r2, r3
 80138a4:	42ac      	cmp	r4, r5
 80138a6:	d101      	bne.n	80138ac <__sfputs_r+0x12>
 80138a8:	2000      	movs	r0, #0
 80138aa:	e007      	b.n	80138bc <__sfputs_r+0x22>
 80138ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138b0:	463a      	mov	r2, r7
 80138b2:	4630      	mov	r0, r6
 80138b4:	f7ff ffda 	bl	801386c <__sfputc_r>
 80138b8:	1c43      	adds	r3, r0, #1
 80138ba:	d1f3      	bne.n	80138a4 <__sfputs_r+0xa>
 80138bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080138c0 <_vfiprintf_r>:
 80138c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138c4:	460d      	mov	r5, r1
 80138c6:	b09d      	sub	sp, #116	@ 0x74
 80138c8:	4614      	mov	r4, r2
 80138ca:	4698      	mov	r8, r3
 80138cc:	4606      	mov	r6, r0
 80138ce:	b118      	cbz	r0, 80138d8 <_vfiprintf_r+0x18>
 80138d0:	6a03      	ldr	r3, [r0, #32]
 80138d2:	b90b      	cbnz	r3, 80138d8 <_vfiprintf_r+0x18>
 80138d4:	f7ff fdd6 	bl	8013484 <__sinit>
 80138d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80138da:	07d9      	lsls	r1, r3, #31
 80138dc:	d405      	bmi.n	80138ea <_vfiprintf_r+0x2a>
 80138de:	89ab      	ldrh	r3, [r5, #12]
 80138e0:	059a      	lsls	r2, r3, #22
 80138e2:	d402      	bmi.n	80138ea <_vfiprintf_r+0x2a>
 80138e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80138e6:	f7ff fedc 	bl	80136a2 <__retarget_lock_acquire_recursive>
 80138ea:	89ab      	ldrh	r3, [r5, #12]
 80138ec:	071b      	lsls	r3, r3, #28
 80138ee:	d501      	bpl.n	80138f4 <_vfiprintf_r+0x34>
 80138f0:	692b      	ldr	r3, [r5, #16]
 80138f2:	b99b      	cbnz	r3, 801391c <_vfiprintf_r+0x5c>
 80138f4:	4629      	mov	r1, r5
 80138f6:	4630      	mov	r0, r6
 80138f8:	f000 fb84 	bl	8014004 <__swsetup_r>
 80138fc:	b170      	cbz	r0, 801391c <_vfiprintf_r+0x5c>
 80138fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013900:	07dc      	lsls	r4, r3, #31
 8013902:	d504      	bpl.n	801390e <_vfiprintf_r+0x4e>
 8013904:	f04f 30ff 	mov.w	r0, #4294967295
 8013908:	b01d      	add	sp, #116	@ 0x74
 801390a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801390e:	89ab      	ldrh	r3, [r5, #12]
 8013910:	0598      	lsls	r0, r3, #22
 8013912:	d4f7      	bmi.n	8013904 <_vfiprintf_r+0x44>
 8013914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013916:	f7ff fec5 	bl	80136a4 <__retarget_lock_release_recursive>
 801391a:	e7f3      	b.n	8013904 <_vfiprintf_r+0x44>
 801391c:	2300      	movs	r3, #0
 801391e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013920:	2320      	movs	r3, #32
 8013922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013926:	f8cd 800c 	str.w	r8, [sp, #12]
 801392a:	2330      	movs	r3, #48	@ 0x30
 801392c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013adc <_vfiprintf_r+0x21c>
 8013930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013934:	f04f 0901 	mov.w	r9, #1
 8013938:	4623      	mov	r3, r4
 801393a:	469a      	mov	sl, r3
 801393c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013940:	b10a      	cbz	r2, 8013946 <_vfiprintf_r+0x86>
 8013942:	2a25      	cmp	r2, #37	@ 0x25
 8013944:	d1f9      	bne.n	801393a <_vfiprintf_r+0x7a>
 8013946:	ebba 0b04 	subs.w	fp, sl, r4
 801394a:	d00b      	beq.n	8013964 <_vfiprintf_r+0xa4>
 801394c:	465b      	mov	r3, fp
 801394e:	4622      	mov	r2, r4
 8013950:	4629      	mov	r1, r5
 8013952:	4630      	mov	r0, r6
 8013954:	f7ff ffa1 	bl	801389a <__sfputs_r>
 8013958:	3001      	adds	r0, #1
 801395a:	f000 80a7 	beq.w	8013aac <_vfiprintf_r+0x1ec>
 801395e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013960:	445a      	add	r2, fp
 8013962:	9209      	str	r2, [sp, #36]	@ 0x24
 8013964:	f89a 3000 	ldrb.w	r3, [sl]
 8013968:	2b00      	cmp	r3, #0
 801396a:	f000 809f 	beq.w	8013aac <_vfiprintf_r+0x1ec>
 801396e:	2300      	movs	r3, #0
 8013970:	f04f 32ff 	mov.w	r2, #4294967295
 8013974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013978:	f10a 0a01 	add.w	sl, sl, #1
 801397c:	9304      	str	r3, [sp, #16]
 801397e:	9307      	str	r3, [sp, #28]
 8013980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013984:	931a      	str	r3, [sp, #104]	@ 0x68
 8013986:	4654      	mov	r4, sl
 8013988:	2205      	movs	r2, #5
 801398a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801398e:	4853      	ldr	r0, [pc, #332]	@ (8013adc <_vfiprintf_r+0x21c>)
 8013990:	f7ec fca6 	bl	80002e0 <memchr>
 8013994:	9a04      	ldr	r2, [sp, #16]
 8013996:	b9d8      	cbnz	r0, 80139d0 <_vfiprintf_r+0x110>
 8013998:	06d1      	lsls	r1, r2, #27
 801399a:	bf44      	itt	mi
 801399c:	2320      	movmi	r3, #32
 801399e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139a2:	0713      	lsls	r3, r2, #28
 80139a4:	bf44      	itt	mi
 80139a6:	232b      	movmi	r3, #43	@ 0x2b
 80139a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80139ac:	f89a 3000 	ldrb.w	r3, [sl]
 80139b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80139b2:	d015      	beq.n	80139e0 <_vfiprintf_r+0x120>
 80139b4:	9a07      	ldr	r2, [sp, #28]
 80139b6:	4654      	mov	r4, sl
 80139b8:	2000      	movs	r0, #0
 80139ba:	f04f 0c0a 	mov.w	ip, #10
 80139be:	4621      	mov	r1, r4
 80139c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139c4:	3b30      	subs	r3, #48	@ 0x30
 80139c6:	2b09      	cmp	r3, #9
 80139c8:	d94b      	bls.n	8013a62 <_vfiprintf_r+0x1a2>
 80139ca:	b1b0      	cbz	r0, 80139fa <_vfiprintf_r+0x13a>
 80139cc:	9207      	str	r2, [sp, #28]
 80139ce:	e014      	b.n	80139fa <_vfiprintf_r+0x13a>
 80139d0:	eba0 0308 	sub.w	r3, r0, r8
 80139d4:	fa09 f303 	lsl.w	r3, r9, r3
 80139d8:	4313      	orrs	r3, r2
 80139da:	9304      	str	r3, [sp, #16]
 80139dc:	46a2      	mov	sl, r4
 80139de:	e7d2      	b.n	8013986 <_vfiprintf_r+0xc6>
 80139e0:	9b03      	ldr	r3, [sp, #12]
 80139e2:	1d19      	adds	r1, r3, #4
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	9103      	str	r1, [sp, #12]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	bfbb      	ittet	lt
 80139ec:	425b      	neglt	r3, r3
 80139ee:	f042 0202 	orrlt.w	r2, r2, #2
 80139f2:	9307      	strge	r3, [sp, #28]
 80139f4:	9307      	strlt	r3, [sp, #28]
 80139f6:	bfb8      	it	lt
 80139f8:	9204      	strlt	r2, [sp, #16]
 80139fa:	7823      	ldrb	r3, [r4, #0]
 80139fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80139fe:	d10a      	bne.n	8013a16 <_vfiprintf_r+0x156>
 8013a00:	7863      	ldrb	r3, [r4, #1]
 8013a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8013a04:	d132      	bne.n	8013a6c <_vfiprintf_r+0x1ac>
 8013a06:	9b03      	ldr	r3, [sp, #12]
 8013a08:	1d1a      	adds	r2, r3, #4
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	9203      	str	r2, [sp, #12]
 8013a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013a12:	3402      	adds	r4, #2
 8013a14:	9305      	str	r3, [sp, #20]
 8013a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013aec <_vfiprintf_r+0x22c>
 8013a1a:	7821      	ldrb	r1, [r4, #0]
 8013a1c:	2203      	movs	r2, #3
 8013a1e:	4650      	mov	r0, sl
 8013a20:	f7ec fc5e 	bl	80002e0 <memchr>
 8013a24:	b138      	cbz	r0, 8013a36 <_vfiprintf_r+0x176>
 8013a26:	9b04      	ldr	r3, [sp, #16]
 8013a28:	eba0 000a 	sub.w	r0, r0, sl
 8013a2c:	2240      	movs	r2, #64	@ 0x40
 8013a2e:	4082      	lsls	r2, r0
 8013a30:	4313      	orrs	r3, r2
 8013a32:	3401      	adds	r4, #1
 8013a34:	9304      	str	r3, [sp, #16]
 8013a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a3a:	4829      	ldr	r0, [pc, #164]	@ (8013ae0 <_vfiprintf_r+0x220>)
 8013a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013a40:	2206      	movs	r2, #6
 8013a42:	f7ec fc4d 	bl	80002e0 <memchr>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d03f      	beq.n	8013aca <_vfiprintf_r+0x20a>
 8013a4a:	4b26      	ldr	r3, [pc, #152]	@ (8013ae4 <_vfiprintf_r+0x224>)
 8013a4c:	bb1b      	cbnz	r3, 8013a96 <_vfiprintf_r+0x1d6>
 8013a4e:	9b03      	ldr	r3, [sp, #12]
 8013a50:	3307      	adds	r3, #7
 8013a52:	f023 0307 	bic.w	r3, r3, #7
 8013a56:	3308      	adds	r3, #8
 8013a58:	9303      	str	r3, [sp, #12]
 8013a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a5c:	443b      	add	r3, r7
 8013a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013a60:	e76a      	b.n	8013938 <_vfiprintf_r+0x78>
 8013a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8013a66:	460c      	mov	r4, r1
 8013a68:	2001      	movs	r0, #1
 8013a6a:	e7a8      	b.n	80139be <_vfiprintf_r+0xfe>
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	3401      	adds	r4, #1
 8013a70:	9305      	str	r3, [sp, #20]
 8013a72:	4619      	mov	r1, r3
 8013a74:	f04f 0c0a 	mov.w	ip, #10
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013a7e:	3a30      	subs	r2, #48	@ 0x30
 8013a80:	2a09      	cmp	r2, #9
 8013a82:	d903      	bls.n	8013a8c <_vfiprintf_r+0x1cc>
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d0c6      	beq.n	8013a16 <_vfiprintf_r+0x156>
 8013a88:	9105      	str	r1, [sp, #20]
 8013a8a:	e7c4      	b.n	8013a16 <_vfiprintf_r+0x156>
 8013a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013a90:	4604      	mov	r4, r0
 8013a92:	2301      	movs	r3, #1
 8013a94:	e7f0      	b.n	8013a78 <_vfiprintf_r+0x1b8>
 8013a96:	ab03      	add	r3, sp, #12
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	462a      	mov	r2, r5
 8013a9c:	4b12      	ldr	r3, [pc, #72]	@ (8013ae8 <_vfiprintf_r+0x228>)
 8013a9e:	a904      	add	r1, sp, #16
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	f3af 8000 	nop.w
 8013aa6:	4607      	mov	r7, r0
 8013aa8:	1c78      	adds	r0, r7, #1
 8013aaa:	d1d6      	bne.n	8013a5a <_vfiprintf_r+0x19a>
 8013aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013aae:	07d9      	lsls	r1, r3, #31
 8013ab0:	d405      	bmi.n	8013abe <_vfiprintf_r+0x1fe>
 8013ab2:	89ab      	ldrh	r3, [r5, #12]
 8013ab4:	059a      	lsls	r2, r3, #22
 8013ab6:	d402      	bmi.n	8013abe <_vfiprintf_r+0x1fe>
 8013ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013aba:	f7ff fdf3 	bl	80136a4 <__retarget_lock_release_recursive>
 8013abe:	89ab      	ldrh	r3, [r5, #12]
 8013ac0:	065b      	lsls	r3, r3, #25
 8013ac2:	f53f af1f 	bmi.w	8013904 <_vfiprintf_r+0x44>
 8013ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013ac8:	e71e      	b.n	8013908 <_vfiprintf_r+0x48>
 8013aca:	ab03      	add	r3, sp, #12
 8013acc:	9300      	str	r3, [sp, #0]
 8013ace:	462a      	mov	r2, r5
 8013ad0:	4b05      	ldr	r3, [pc, #20]	@ (8013ae8 <_vfiprintf_r+0x228>)
 8013ad2:	a904      	add	r1, sp, #16
 8013ad4:	4630      	mov	r0, r6
 8013ad6:	f000 f879 	bl	8013bcc <_printf_i>
 8013ada:	e7e4      	b.n	8013aa6 <_vfiprintf_r+0x1e6>
 8013adc:	080172bb 	.word	0x080172bb
 8013ae0:	080172c5 	.word	0x080172c5
 8013ae4:	00000000 	.word	0x00000000
 8013ae8:	0801389b 	.word	0x0801389b
 8013aec:	080172c1 	.word	0x080172c1

08013af0 <_printf_common>:
 8013af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013af4:	4616      	mov	r6, r2
 8013af6:	4698      	mov	r8, r3
 8013af8:	688a      	ldr	r2, [r1, #8]
 8013afa:	690b      	ldr	r3, [r1, #16]
 8013afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b00:	4293      	cmp	r3, r2
 8013b02:	bfb8      	it	lt
 8013b04:	4613      	movlt	r3, r2
 8013b06:	6033      	str	r3, [r6, #0]
 8013b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013b0c:	4607      	mov	r7, r0
 8013b0e:	460c      	mov	r4, r1
 8013b10:	b10a      	cbz	r2, 8013b16 <_printf_common+0x26>
 8013b12:	3301      	adds	r3, #1
 8013b14:	6033      	str	r3, [r6, #0]
 8013b16:	6823      	ldr	r3, [r4, #0]
 8013b18:	0699      	lsls	r1, r3, #26
 8013b1a:	bf42      	ittt	mi
 8013b1c:	6833      	ldrmi	r3, [r6, #0]
 8013b1e:	3302      	addmi	r3, #2
 8013b20:	6033      	strmi	r3, [r6, #0]
 8013b22:	6825      	ldr	r5, [r4, #0]
 8013b24:	f015 0506 	ands.w	r5, r5, #6
 8013b28:	d106      	bne.n	8013b38 <_printf_common+0x48>
 8013b2a:	f104 0a19 	add.w	sl, r4, #25
 8013b2e:	68e3      	ldr	r3, [r4, #12]
 8013b30:	6832      	ldr	r2, [r6, #0]
 8013b32:	1a9b      	subs	r3, r3, r2
 8013b34:	42ab      	cmp	r3, r5
 8013b36:	dc26      	bgt.n	8013b86 <_printf_common+0x96>
 8013b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013b3c:	6822      	ldr	r2, [r4, #0]
 8013b3e:	3b00      	subs	r3, #0
 8013b40:	bf18      	it	ne
 8013b42:	2301      	movne	r3, #1
 8013b44:	0692      	lsls	r2, r2, #26
 8013b46:	d42b      	bmi.n	8013ba0 <_printf_common+0xb0>
 8013b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013b4c:	4641      	mov	r1, r8
 8013b4e:	4638      	mov	r0, r7
 8013b50:	47c8      	blx	r9
 8013b52:	3001      	adds	r0, #1
 8013b54:	d01e      	beq.n	8013b94 <_printf_common+0xa4>
 8013b56:	6823      	ldr	r3, [r4, #0]
 8013b58:	6922      	ldr	r2, [r4, #16]
 8013b5a:	f003 0306 	and.w	r3, r3, #6
 8013b5e:	2b04      	cmp	r3, #4
 8013b60:	bf02      	ittt	eq
 8013b62:	68e5      	ldreq	r5, [r4, #12]
 8013b64:	6833      	ldreq	r3, [r6, #0]
 8013b66:	1aed      	subeq	r5, r5, r3
 8013b68:	68a3      	ldr	r3, [r4, #8]
 8013b6a:	bf0c      	ite	eq
 8013b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b70:	2500      	movne	r5, #0
 8013b72:	4293      	cmp	r3, r2
 8013b74:	bfc4      	itt	gt
 8013b76:	1a9b      	subgt	r3, r3, r2
 8013b78:	18ed      	addgt	r5, r5, r3
 8013b7a:	2600      	movs	r6, #0
 8013b7c:	341a      	adds	r4, #26
 8013b7e:	42b5      	cmp	r5, r6
 8013b80:	d11a      	bne.n	8013bb8 <_printf_common+0xc8>
 8013b82:	2000      	movs	r0, #0
 8013b84:	e008      	b.n	8013b98 <_printf_common+0xa8>
 8013b86:	2301      	movs	r3, #1
 8013b88:	4652      	mov	r2, sl
 8013b8a:	4641      	mov	r1, r8
 8013b8c:	4638      	mov	r0, r7
 8013b8e:	47c8      	blx	r9
 8013b90:	3001      	adds	r0, #1
 8013b92:	d103      	bne.n	8013b9c <_printf_common+0xac>
 8013b94:	f04f 30ff 	mov.w	r0, #4294967295
 8013b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b9c:	3501      	adds	r5, #1
 8013b9e:	e7c6      	b.n	8013b2e <_printf_common+0x3e>
 8013ba0:	18e1      	adds	r1, r4, r3
 8013ba2:	1c5a      	adds	r2, r3, #1
 8013ba4:	2030      	movs	r0, #48	@ 0x30
 8013ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013baa:	4422      	add	r2, r4
 8013bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013bb4:	3302      	adds	r3, #2
 8013bb6:	e7c7      	b.n	8013b48 <_printf_common+0x58>
 8013bb8:	2301      	movs	r3, #1
 8013bba:	4622      	mov	r2, r4
 8013bbc:	4641      	mov	r1, r8
 8013bbe:	4638      	mov	r0, r7
 8013bc0:	47c8      	blx	r9
 8013bc2:	3001      	adds	r0, #1
 8013bc4:	d0e6      	beq.n	8013b94 <_printf_common+0xa4>
 8013bc6:	3601      	adds	r6, #1
 8013bc8:	e7d9      	b.n	8013b7e <_printf_common+0x8e>
	...

08013bcc <_printf_i>:
 8013bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bd0:	7e0f      	ldrb	r7, [r1, #24]
 8013bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013bd4:	2f78      	cmp	r7, #120	@ 0x78
 8013bd6:	4691      	mov	r9, r2
 8013bd8:	4680      	mov	r8, r0
 8013bda:	460c      	mov	r4, r1
 8013bdc:	469a      	mov	sl, r3
 8013bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013be2:	d807      	bhi.n	8013bf4 <_printf_i+0x28>
 8013be4:	2f62      	cmp	r7, #98	@ 0x62
 8013be6:	d80a      	bhi.n	8013bfe <_printf_i+0x32>
 8013be8:	2f00      	cmp	r7, #0
 8013bea:	f000 80d2 	beq.w	8013d92 <_printf_i+0x1c6>
 8013bee:	2f58      	cmp	r7, #88	@ 0x58
 8013bf0:	f000 80b9 	beq.w	8013d66 <_printf_i+0x19a>
 8013bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013bfc:	e03a      	b.n	8013c74 <_printf_i+0xa8>
 8013bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013c02:	2b15      	cmp	r3, #21
 8013c04:	d8f6      	bhi.n	8013bf4 <_printf_i+0x28>
 8013c06:	a101      	add	r1, pc, #4	@ (adr r1, 8013c0c <_printf_i+0x40>)
 8013c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c0c:	08013c65 	.word	0x08013c65
 8013c10:	08013c79 	.word	0x08013c79
 8013c14:	08013bf5 	.word	0x08013bf5
 8013c18:	08013bf5 	.word	0x08013bf5
 8013c1c:	08013bf5 	.word	0x08013bf5
 8013c20:	08013bf5 	.word	0x08013bf5
 8013c24:	08013c79 	.word	0x08013c79
 8013c28:	08013bf5 	.word	0x08013bf5
 8013c2c:	08013bf5 	.word	0x08013bf5
 8013c30:	08013bf5 	.word	0x08013bf5
 8013c34:	08013bf5 	.word	0x08013bf5
 8013c38:	08013d79 	.word	0x08013d79
 8013c3c:	08013ca3 	.word	0x08013ca3
 8013c40:	08013d33 	.word	0x08013d33
 8013c44:	08013bf5 	.word	0x08013bf5
 8013c48:	08013bf5 	.word	0x08013bf5
 8013c4c:	08013d9b 	.word	0x08013d9b
 8013c50:	08013bf5 	.word	0x08013bf5
 8013c54:	08013ca3 	.word	0x08013ca3
 8013c58:	08013bf5 	.word	0x08013bf5
 8013c5c:	08013bf5 	.word	0x08013bf5
 8013c60:	08013d3b 	.word	0x08013d3b
 8013c64:	6833      	ldr	r3, [r6, #0]
 8013c66:	1d1a      	adds	r2, r3, #4
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	6032      	str	r2, [r6, #0]
 8013c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013c74:	2301      	movs	r3, #1
 8013c76:	e09d      	b.n	8013db4 <_printf_i+0x1e8>
 8013c78:	6833      	ldr	r3, [r6, #0]
 8013c7a:	6820      	ldr	r0, [r4, #0]
 8013c7c:	1d19      	adds	r1, r3, #4
 8013c7e:	6031      	str	r1, [r6, #0]
 8013c80:	0606      	lsls	r6, r0, #24
 8013c82:	d501      	bpl.n	8013c88 <_printf_i+0xbc>
 8013c84:	681d      	ldr	r5, [r3, #0]
 8013c86:	e003      	b.n	8013c90 <_printf_i+0xc4>
 8013c88:	0645      	lsls	r5, r0, #25
 8013c8a:	d5fb      	bpl.n	8013c84 <_printf_i+0xb8>
 8013c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013c90:	2d00      	cmp	r5, #0
 8013c92:	da03      	bge.n	8013c9c <_printf_i+0xd0>
 8013c94:	232d      	movs	r3, #45	@ 0x2d
 8013c96:	426d      	negs	r5, r5
 8013c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013c9c:	4859      	ldr	r0, [pc, #356]	@ (8013e04 <_printf_i+0x238>)
 8013c9e:	230a      	movs	r3, #10
 8013ca0:	e011      	b.n	8013cc6 <_printf_i+0xfa>
 8013ca2:	6821      	ldr	r1, [r4, #0]
 8013ca4:	6833      	ldr	r3, [r6, #0]
 8013ca6:	0608      	lsls	r0, r1, #24
 8013ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8013cac:	d402      	bmi.n	8013cb4 <_printf_i+0xe8>
 8013cae:	0649      	lsls	r1, r1, #25
 8013cb0:	bf48      	it	mi
 8013cb2:	b2ad      	uxthmi	r5, r5
 8013cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8013cb6:	4853      	ldr	r0, [pc, #332]	@ (8013e04 <_printf_i+0x238>)
 8013cb8:	6033      	str	r3, [r6, #0]
 8013cba:	bf14      	ite	ne
 8013cbc:	230a      	movne	r3, #10
 8013cbe:	2308      	moveq	r3, #8
 8013cc0:	2100      	movs	r1, #0
 8013cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013cc6:	6866      	ldr	r6, [r4, #4]
 8013cc8:	60a6      	str	r6, [r4, #8]
 8013cca:	2e00      	cmp	r6, #0
 8013ccc:	bfa2      	ittt	ge
 8013cce:	6821      	ldrge	r1, [r4, #0]
 8013cd0:	f021 0104 	bicge.w	r1, r1, #4
 8013cd4:	6021      	strge	r1, [r4, #0]
 8013cd6:	b90d      	cbnz	r5, 8013cdc <_printf_i+0x110>
 8013cd8:	2e00      	cmp	r6, #0
 8013cda:	d04b      	beq.n	8013d74 <_printf_i+0x1a8>
 8013cdc:	4616      	mov	r6, r2
 8013cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8013ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8013ce6:	5dc7      	ldrb	r7, [r0, r7]
 8013ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013cec:	462f      	mov	r7, r5
 8013cee:	42bb      	cmp	r3, r7
 8013cf0:	460d      	mov	r5, r1
 8013cf2:	d9f4      	bls.n	8013cde <_printf_i+0x112>
 8013cf4:	2b08      	cmp	r3, #8
 8013cf6:	d10b      	bne.n	8013d10 <_printf_i+0x144>
 8013cf8:	6823      	ldr	r3, [r4, #0]
 8013cfa:	07df      	lsls	r7, r3, #31
 8013cfc:	d508      	bpl.n	8013d10 <_printf_i+0x144>
 8013cfe:	6923      	ldr	r3, [r4, #16]
 8013d00:	6861      	ldr	r1, [r4, #4]
 8013d02:	4299      	cmp	r1, r3
 8013d04:	bfde      	ittt	le
 8013d06:	2330      	movle	r3, #48	@ 0x30
 8013d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013d10:	1b92      	subs	r2, r2, r6
 8013d12:	6122      	str	r2, [r4, #16]
 8013d14:	f8cd a000 	str.w	sl, [sp]
 8013d18:	464b      	mov	r3, r9
 8013d1a:	aa03      	add	r2, sp, #12
 8013d1c:	4621      	mov	r1, r4
 8013d1e:	4640      	mov	r0, r8
 8013d20:	f7ff fee6 	bl	8013af0 <_printf_common>
 8013d24:	3001      	adds	r0, #1
 8013d26:	d14a      	bne.n	8013dbe <_printf_i+0x1f2>
 8013d28:	f04f 30ff 	mov.w	r0, #4294967295
 8013d2c:	b004      	add	sp, #16
 8013d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d32:	6823      	ldr	r3, [r4, #0]
 8013d34:	f043 0320 	orr.w	r3, r3, #32
 8013d38:	6023      	str	r3, [r4, #0]
 8013d3a:	4833      	ldr	r0, [pc, #204]	@ (8013e08 <_printf_i+0x23c>)
 8013d3c:	2778      	movs	r7, #120	@ 0x78
 8013d3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013d42:	6823      	ldr	r3, [r4, #0]
 8013d44:	6831      	ldr	r1, [r6, #0]
 8013d46:	061f      	lsls	r7, r3, #24
 8013d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d4c:	d402      	bmi.n	8013d54 <_printf_i+0x188>
 8013d4e:	065f      	lsls	r7, r3, #25
 8013d50:	bf48      	it	mi
 8013d52:	b2ad      	uxthmi	r5, r5
 8013d54:	6031      	str	r1, [r6, #0]
 8013d56:	07d9      	lsls	r1, r3, #31
 8013d58:	bf44      	itt	mi
 8013d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8013d5e:	6023      	strmi	r3, [r4, #0]
 8013d60:	b11d      	cbz	r5, 8013d6a <_printf_i+0x19e>
 8013d62:	2310      	movs	r3, #16
 8013d64:	e7ac      	b.n	8013cc0 <_printf_i+0xf4>
 8013d66:	4827      	ldr	r0, [pc, #156]	@ (8013e04 <_printf_i+0x238>)
 8013d68:	e7e9      	b.n	8013d3e <_printf_i+0x172>
 8013d6a:	6823      	ldr	r3, [r4, #0]
 8013d6c:	f023 0320 	bic.w	r3, r3, #32
 8013d70:	6023      	str	r3, [r4, #0]
 8013d72:	e7f6      	b.n	8013d62 <_printf_i+0x196>
 8013d74:	4616      	mov	r6, r2
 8013d76:	e7bd      	b.n	8013cf4 <_printf_i+0x128>
 8013d78:	6833      	ldr	r3, [r6, #0]
 8013d7a:	6825      	ldr	r5, [r4, #0]
 8013d7c:	6961      	ldr	r1, [r4, #20]
 8013d7e:	1d18      	adds	r0, r3, #4
 8013d80:	6030      	str	r0, [r6, #0]
 8013d82:	062e      	lsls	r6, r5, #24
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	d501      	bpl.n	8013d8c <_printf_i+0x1c0>
 8013d88:	6019      	str	r1, [r3, #0]
 8013d8a:	e002      	b.n	8013d92 <_printf_i+0x1c6>
 8013d8c:	0668      	lsls	r0, r5, #25
 8013d8e:	d5fb      	bpl.n	8013d88 <_printf_i+0x1bc>
 8013d90:	8019      	strh	r1, [r3, #0]
 8013d92:	2300      	movs	r3, #0
 8013d94:	6123      	str	r3, [r4, #16]
 8013d96:	4616      	mov	r6, r2
 8013d98:	e7bc      	b.n	8013d14 <_printf_i+0x148>
 8013d9a:	6833      	ldr	r3, [r6, #0]
 8013d9c:	1d1a      	adds	r2, r3, #4
 8013d9e:	6032      	str	r2, [r6, #0]
 8013da0:	681e      	ldr	r6, [r3, #0]
 8013da2:	6862      	ldr	r2, [r4, #4]
 8013da4:	2100      	movs	r1, #0
 8013da6:	4630      	mov	r0, r6
 8013da8:	f7ec fa9a 	bl	80002e0 <memchr>
 8013dac:	b108      	cbz	r0, 8013db2 <_printf_i+0x1e6>
 8013dae:	1b80      	subs	r0, r0, r6
 8013db0:	6060      	str	r0, [r4, #4]
 8013db2:	6863      	ldr	r3, [r4, #4]
 8013db4:	6123      	str	r3, [r4, #16]
 8013db6:	2300      	movs	r3, #0
 8013db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013dbc:	e7aa      	b.n	8013d14 <_printf_i+0x148>
 8013dbe:	6923      	ldr	r3, [r4, #16]
 8013dc0:	4632      	mov	r2, r6
 8013dc2:	4649      	mov	r1, r9
 8013dc4:	4640      	mov	r0, r8
 8013dc6:	47d0      	blx	sl
 8013dc8:	3001      	adds	r0, #1
 8013dca:	d0ad      	beq.n	8013d28 <_printf_i+0x15c>
 8013dcc:	6823      	ldr	r3, [r4, #0]
 8013dce:	079b      	lsls	r3, r3, #30
 8013dd0:	d413      	bmi.n	8013dfa <_printf_i+0x22e>
 8013dd2:	68e0      	ldr	r0, [r4, #12]
 8013dd4:	9b03      	ldr	r3, [sp, #12]
 8013dd6:	4298      	cmp	r0, r3
 8013dd8:	bfb8      	it	lt
 8013dda:	4618      	movlt	r0, r3
 8013ddc:	e7a6      	b.n	8013d2c <_printf_i+0x160>
 8013dde:	2301      	movs	r3, #1
 8013de0:	4632      	mov	r2, r6
 8013de2:	4649      	mov	r1, r9
 8013de4:	4640      	mov	r0, r8
 8013de6:	47d0      	blx	sl
 8013de8:	3001      	adds	r0, #1
 8013dea:	d09d      	beq.n	8013d28 <_printf_i+0x15c>
 8013dec:	3501      	adds	r5, #1
 8013dee:	68e3      	ldr	r3, [r4, #12]
 8013df0:	9903      	ldr	r1, [sp, #12]
 8013df2:	1a5b      	subs	r3, r3, r1
 8013df4:	42ab      	cmp	r3, r5
 8013df6:	dcf2      	bgt.n	8013dde <_printf_i+0x212>
 8013df8:	e7eb      	b.n	8013dd2 <_printf_i+0x206>
 8013dfa:	2500      	movs	r5, #0
 8013dfc:	f104 0619 	add.w	r6, r4, #25
 8013e00:	e7f5      	b.n	8013dee <_printf_i+0x222>
 8013e02:	bf00      	nop
 8013e04:	080172cc 	.word	0x080172cc
 8013e08:	080172dd 	.word	0x080172dd

08013e0c <__sflush_r>:
 8013e0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e14:	0716      	lsls	r6, r2, #28
 8013e16:	4605      	mov	r5, r0
 8013e18:	460c      	mov	r4, r1
 8013e1a:	d454      	bmi.n	8013ec6 <__sflush_r+0xba>
 8013e1c:	684b      	ldr	r3, [r1, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	dc02      	bgt.n	8013e28 <__sflush_r+0x1c>
 8013e22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	dd48      	ble.n	8013eba <__sflush_r+0xae>
 8013e28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e2a:	2e00      	cmp	r6, #0
 8013e2c:	d045      	beq.n	8013eba <__sflush_r+0xae>
 8013e2e:	2300      	movs	r3, #0
 8013e30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013e34:	682f      	ldr	r7, [r5, #0]
 8013e36:	6a21      	ldr	r1, [r4, #32]
 8013e38:	602b      	str	r3, [r5, #0]
 8013e3a:	d030      	beq.n	8013e9e <__sflush_r+0x92>
 8013e3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013e3e:	89a3      	ldrh	r3, [r4, #12]
 8013e40:	0759      	lsls	r1, r3, #29
 8013e42:	d505      	bpl.n	8013e50 <__sflush_r+0x44>
 8013e44:	6863      	ldr	r3, [r4, #4]
 8013e46:	1ad2      	subs	r2, r2, r3
 8013e48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013e4a:	b10b      	cbz	r3, 8013e50 <__sflush_r+0x44>
 8013e4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013e4e:	1ad2      	subs	r2, r2, r3
 8013e50:	2300      	movs	r3, #0
 8013e52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013e54:	6a21      	ldr	r1, [r4, #32]
 8013e56:	4628      	mov	r0, r5
 8013e58:	47b0      	blx	r6
 8013e5a:	1c43      	adds	r3, r0, #1
 8013e5c:	89a3      	ldrh	r3, [r4, #12]
 8013e5e:	d106      	bne.n	8013e6e <__sflush_r+0x62>
 8013e60:	6829      	ldr	r1, [r5, #0]
 8013e62:	291d      	cmp	r1, #29
 8013e64:	d82b      	bhi.n	8013ebe <__sflush_r+0xb2>
 8013e66:	4a2a      	ldr	r2, [pc, #168]	@ (8013f10 <__sflush_r+0x104>)
 8013e68:	410a      	asrs	r2, r1
 8013e6a:	07d6      	lsls	r6, r2, #31
 8013e6c:	d427      	bmi.n	8013ebe <__sflush_r+0xb2>
 8013e6e:	2200      	movs	r2, #0
 8013e70:	6062      	str	r2, [r4, #4]
 8013e72:	04d9      	lsls	r1, r3, #19
 8013e74:	6922      	ldr	r2, [r4, #16]
 8013e76:	6022      	str	r2, [r4, #0]
 8013e78:	d504      	bpl.n	8013e84 <__sflush_r+0x78>
 8013e7a:	1c42      	adds	r2, r0, #1
 8013e7c:	d101      	bne.n	8013e82 <__sflush_r+0x76>
 8013e7e:	682b      	ldr	r3, [r5, #0]
 8013e80:	b903      	cbnz	r3, 8013e84 <__sflush_r+0x78>
 8013e82:	6560      	str	r0, [r4, #84]	@ 0x54
 8013e84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013e86:	602f      	str	r7, [r5, #0]
 8013e88:	b1b9      	cbz	r1, 8013eba <__sflush_r+0xae>
 8013e8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013e8e:	4299      	cmp	r1, r3
 8013e90:	d002      	beq.n	8013e98 <__sflush_r+0x8c>
 8013e92:	4628      	mov	r0, r5
 8013e94:	f000 f924 	bl	80140e0 <_free_r>
 8013e98:	2300      	movs	r3, #0
 8013e9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8013e9c:	e00d      	b.n	8013eba <__sflush_r+0xae>
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	4628      	mov	r0, r5
 8013ea2:	47b0      	blx	r6
 8013ea4:	4602      	mov	r2, r0
 8013ea6:	1c50      	adds	r0, r2, #1
 8013ea8:	d1c9      	bne.n	8013e3e <__sflush_r+0x32>
 8013eaa:	682b      	ldr	r3, [r5, #0]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d0c6      	beq.n	8013e3e <__sflush_r+0x32>
 8013eb0:	2b1d      	cmp	r3, #29
 8013eb2:	d001      	beq.n	8013eb8 <__sflush_r+0xac>
 8013eb4:	2b16      	cmp	r3, #22
 8013eb6:	d11e      	bne.n	8013ef6 <__sflush_r+0xea>
 8013eb8:	602f      	str	r7, [r5, #0]
 8013eba:	2000      	movs	r0, #0
 8013ebc:	e022      	b.n	8013f04 <__sflush_r+0xf8>
 8013ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ec2:	b21b      	sxth	r3, r3
 8013ec4:	e01b      	b.n	8013efe <__sflush_r+0xf2>
 8013ec6:	690f      	ldr	r7, [r1, #16]
 8013ec8:	2f00      	cmp	r7, #0
 8013eca:	d0f6      	beq.n	8013eba <__sflush_r+0xae>
 8013ecc:	0793      	lsls	r3, r2, #30
 8013ece:	680e      	ldr	r6, [r1, #0]
 8013ed0:	bf08      	it	eq
 8013ed2:	694b      	ldreq	r3, [r1, #20]
 8013ed4:	600f      	str	r7, [r1, #0]
 8013ed6:	bf18      	it	ne
 8013ed8:	2300      	movne	r3, #0
 8013eda:	eba6 0807 	sub.w	r8, r6, r7
 8013ede:	608b      	str	r3, [r1, #8]
 8013ee0:	f1b8 0f00 	cmp.w	r8, #0
 8013ee4:	dde9      	ble.n	8013eba <__sflush_r+0xae>
 8013ee6:	6a21      	ldr	r1, [r4, #32]
 8013ee8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013eea:	4643      	mov	r3, r8
 8013eec:	463a      	mov	r2, r7
 8013eee:	4628      	mov	r0, r5
 8013ef0:	47b0      	blx	r6
 8013ef2:	2800      	cmp	r0, #0
 8013ef4:	dc08      	bgt.n	8013f08 <__sflush_r+0xfc>
 8013ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013efa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013efe:	81a3      	strh	r3, [r4, #12]
 8013f00:	f04f 30ff 	mov.w	r0, #4294967295
 8013f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f08:	4407      	add	r7, r0
 8013f0a:	eba8 0800 	sub.w	r8, r8, r0
 8013f0e:	e7e7      	b.n	8013ee0 <__sflush_r+0xd4>
 8013f10:	dfbffffe 	.word	0xdfbffffe

08013f14 <_fflush_r>:
 8013f14:	b538      	push	{r3, r4, r5, lr}
 8013f16:	690b      	ldr	r3, [r1, #16]
 8013f18:	4605      	mov	r5, r0
 8013f1a:	460c      	mov	r4, r1
 8013f1c:	b913      	cbnz	r3, 8013f24 <_fflush_r+0x10>
 8013f1e:	2500      	movs	r5, #0
 8013f20:	4628      	mov	r0, r5
 8013f22:	bd38      	pop	{r3, r4, r5, pc}
 8013f24:	b118      	cbz	r0, 8013f2e <_fflush_r+0x1a>
 8013f26:	6a03      	ldr	r3, [r0, #32]
 8013f28:	b90b      	cbnz	r3, 8013f2e <_fflush_r+0x1a>
 8013f2a:	f7ff faab 	bl	8013484 <__sinit>
 8013f2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d0f3      	beq.n	8013f1e <_fflush_r+0xa>
 8013f36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013f38:	07d0      	lsls	r0, r2, #31
 8013f3a:	d404      	bmi.n	8013f46 <_fflush_r+0x32>
 8013f3c:	0599      	lsls	r1, r3, #22
 8013f3e:	d402      	bmi.n	8013f46 <_fflush_r+0x32>
 8013f40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f42:	f7ff fbae 	bl	80136a2 <__retarget_lock_acquire_recursive>
 8013f46:	4628      	mov	r0, r5
 8013f48:	4621      	mov	r1, r4
 8013f4a:	f7ff ff5f 	bl	8013e0c <__sflush_r>
 8013f4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013f50:	07da      	lsls	r2, r3, #31
 8013f52:	4605      	mov	r5, r0
 8013f54:	d4e4      	bmi.n	8013f20 <_fflush_r+0xc>
 8013f56:	89a3      	ldrh	r3, [r4, #12]
 8013f58:	059b      	lsls	r3, r3, #22
 8013f5a:	d4e1      	bmi.n	8013f20 <_fflush_r+0xc>
 8013f5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013f5e:	f7ff fba1 	bl	80136a4 <__retarget_lock_release_recursive>
 8013f62:	e7dd      	b.n	8013f20 <_fflush_r+0xc>

08013f64 <fiprintf>:
 8013f64:	b40e      	push	{r1, r2, r3}
 8013f66:	b503      	push	{r0, r1, lr}
 8013f68:	4601      	mov	r1, r0
 8013f6a:	ab03      	add	r3, sp, #12
 8013f6c:	4805      	ldr	r0, [pc, #20]	@ (8013f84 <fiprintf+0x20>)
 8013f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f72:	6800      	ldr	r0, [r0, #0]
 8013f74:	9301      	str	r3, [sp, #4]
 8013f76:	f7ff fca3 	bl	80138c0 <_vfiprintf_r>
 8013f7a:	b002      	add	sp, #8
 8013f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013f80:	b003      	add	sp, #12
 8013f82:	4770      	bx	lr
 8013f84:	24000040 	.word	0x24000040

08013f88 <__swbuf_r>:
 8013f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f8a:	460e      	mov	r6, r1
 8013f8c:	4614      	mov	r4, r2
 8013f8e:	4605      	mov	r5, r0
 8013f90:	b118      	cbz	r0, 8013f9a <__swbuf_r+0x12>
 8013f92:	6a03      	ldr	r3, [r0, #32]
 8013f94:	b90b      	cbnz	r3, 8013f9a <__swbuf_r+0x12>
 8013f96:	f7ff fa75 	bl	8013484 <__sinit>
 8013f9a:	69a3      	ldr	r3, [r4, #24]
 8013f9c:	60a3      	str	r3, [r4, #8]
 8013f9e:	89a3      	ldrh	r3, [r4, #12]
 8013fa0:	071a      	lsls	r2, r3, #28
 8013fa2:	d501      	bpl.n	8013fa8 <__swbuf_r+0x20>
 8013fa4:	6923      	ldr	r3, [r4, #16]
 8013fa6:	b943      	cbnz	r3, 8013fba <__swbuf_r+0x32>
 8013fa8:	4621      	mov	r1, r4
 8013faa:	4628      	mov	r0, r5
 8013fac:	f000 f82a 	bl	8014004 <__swsetup_r>
 8013fb0:	b118      	cbz	r0, 8013fba <__swbuf_r+0x32>
 8013fb2:	f04f 37ff 	mov.w	r7, #4294967295
 8013fb6:	4638      	mov	r0, r7
 8013fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fba:	6823      	ldr	r3, [r4, #0]
 8013fbc:	6922      	ldr	r2, [r4, #16]
 8013fbe:	1a98      	subs	r0, r3, r2
 8013fc0:	6963      	ldr	r3, [r4, #20]
 8013fc2:	b2f6      	uxtb	r6, r6
 8013fc4:	4283      	cmp	r3, r0
 8013fc6:	4637      	mov	r7, r6
 8013fc8:	dc05      	bgt.n	8013fd6 <__swbuf_r+0x4e>
 8013fca:	4621      	mov	r1, r4
 8013fcc:	4628      	mov	r0, r5
 8013fce:	f7ff ffa1 	bl	8013f14 <_fflush_r>
 8013fd2:	2800      	cmp	r0, #0
 8013fd4:	d1ed      	bne.n	8013fb2 <__swbuf_r+0x2a>
 8013fd6:	68a3      	ldr	r3, [r4, #8]
 8013fd8:	3b01      	subs	r3, #1
 8013fda:	60a3      	str	r3, [r4, #8]
 8013fdc:	6823      	ldr	r3, [r4, #0]
 8013fde:	1c5a      	adds	r2, r3, #1
 8013fe0:	6022      	str	r2, [r4, #0]
 8013fe2:	701e      	strb	r6, [r3, #0]
 8013fe4:	6962      	ldr	r2, [r4, #20]
 8013fe6:	1c43      	adds	r3, r0, #1
 8013fe8:	429a      	cmp	r2, r3
 8013fea:	d004      	beq.n	8013ff6 <__swbuf_r+0x6e>
 8013fec:	89a3      	ldrh	r3, [r4, #12]
 8013fee:	07db      	lsls	r3, r3, #31
 8013ff0:	d5e1      	bpl.n	8013fb6 <__swbuf_r+0x2e>
 8013ff2:	2e0a      	cmp	r6, #10
 8013ff4:	d1df      	bne.n	8013fb6 <__swbuf_r+0x2e>
 8013ff6:	4621      	mov	r1, r4
 8013ff8:	4628      	mov	r0, r5
 8013ffa:	f7ff ff8b 	bl	8013f14 <_fflush_r>
 8013ffe:	2800      	cmp	r0, #0
 8014000:	d0d9      	beq.n	8013fb6 <__swbuf_r+0x2e>
 8014002:	e7d6      	b.n	8013fb2 <__swbuf_r+0x2a>

08014004 <__swsetup_r>:
 8014004:	b538      	push	{r3, r4, r5, lr}
 8014006:	4b29      	ldr	r3, [pc, #164]	@ (80140ac <__swsetup_r+0xa8>)
 8014008:	4605      	mov	r5, r0
 801400a:	6818      	ldr	r0, [r3, #0]
 801400c:	460c      	mov	r4, r1
 801400e:	b118      	cbz	r0, 8014018 <__swsetup_r+0x14>
 8014010:	6a03      	ldr	r3, [r0, #32]
 8014012:	b90b      	cbnz	r3, 8014018 <__swsetup_r+0x14>
 8014014:	f7ff fa36 	bl	8013484 <__sinit>
 8014018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801401c:	0719      	lsls	r1, r3, #28
 801401e:	d422      	bmi.n	8014066 <__swsetup_r+0x62>
 8014020:	06da      	lsls	r2, r3, #27
 8014022:	d407      	bmi.n	8014034 <__swsetup_r+0x30>
 8014024:	2209      	movs	r2, #9
 8014026:	602a      	str	r2, [r5, #0]
 8014028:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801402c:	81a3      	strh	r3, [r4, #12]
 801402e:	f04f 30ff 	mov.w	r0, #4294967295
 8014032:	e033      	b.n	801409c <__swsetup_r+0x98>
 8014034:	0758      	lsls	r0, r3, #29
 8014036:	d512      	bpl.n	801405e <__swsetup_r+0x5a>
 8014038:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801403a:	b141      	cbz	r1, 801404e <__swsetup_r+0x4a>
 801403c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014040:	4299      	cmp	r1, r3
 8014042:	d002      	beq.n	801404a <__swsetup_r+0x46>
 8014044:	4628      	mov	r0, r5
 8014046:	f000 f84b 	bl	80140e0 <_free_r>
 801404a:	2300      	movs	r3, #0
 801404c:	6363      	str	r3, [r4, #52]	@ 0x34
 801404e:	89a3      	ldrh	r3, [r4, #12]
 8014050:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014054:	81a3      	strh	r3, [r4, #12]
 8014056:	2300      	movs	r3, #0
 8014058:	6063      	str	r3, [r4, #4]
 801405a:	6923      	ldr	r3, [r4, #16]
 801405c:	6023      	str	r3, [r4, #0]
 801405e:	89a3      	ldrh	r3, [r4, #12]
 8014060:	f043 0308 	orr.w	r3, r3, #8
 8014064:	81a3      	strh	r3, [r4, #12]
 8014066:	6923      	ldr	r3, [r4, #16]
 8014068:	b94b      	cbnz	r3, 801407e <__swsetup_r+0x7a>
 801406a:	89a3      	ldrh	r3, [r4, #12]
 801406c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014074:	d003      	beq.n	801407e <__swsetup_r+0x7a>
 8014076:	4621      	mov	r1, r4
 8014078:	4628      	mov	r0, r5
 801407a:	f000 f8a1 	bl	80141c0 <__smakebuf_r>
 801407e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014082:	f013 0201 	ands.w	r2, r3, #1
 8014086:	d00a      	beq.n	801409e <__swsetup_r+0x9a>
 8014088:	2200      	movs	r2, #0
 801408a:	60a2      	str	r2, [r4, #8]
 801408c:	6962      	ldr	r2, [r4, #20]
 801408e:	4252      	negs	r2, r2
 8014090:	61a2      	str	r2, [r4, #24]
 8014092:	6922      	ldr	r2, [r4, #16]
 8014094:	b942      	cbnz	r2, 80140a8 <__swsetup_r+0xa4>
 8014096:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801409a:	d1c5      	bne.n	8014028 <__swsetup_r+0x24>
 801409c:	bd38      	pop	{r3, r4, r5, pc}
 801409e:	0799      	lsls	r1, r3, #30
 80140a0:	bf58      	it	pl
 80140a2:	6962      	ldrpl	r2, [r4, #20]
 80140a4:	60a2      	str	r2, [r4, #8]
 80140a6:	e7f4      	b.n	8014092 <__swsetup_r+0x8e>
 80140a8:	2000      	movs	r0, #0
 80140aa:	e7f7      	b.n	801409c <__swsetup_r+0x98>
 80140ac:	24000040 	.word	0x24000040

080140b0 <_sbrk_r>:
 80140b0:	b538      	push	{r3, r4, r5, lr}
 80140b2:	4d06      	ldr	r5, [pc, #24]	@ (80140cc <_sbrk_r+0x1c>)
 80140b4:	2300      	movs	r3, #0
 80140b6:	4604      	mov	r4, r0
 80140b8:	4608      	mov	r0, r1
 80140ba:	602b      	str	r3, [r5, #0]
 80140bc:	f7ec fd4e 	bl	8000b5c <_sbrk>
 80140c0:	1c43      	adds	r3, r0, #1
 80140c2:	d102      	bne.n	80140ca <_sbrk_r+0x1a>
 80140c4:	682b      	ldr	r3, [r5, #0]
 80140c6:	b103      	cbz	r3, 80140ca <_sbrk_r+0x1a>
 80140c8:	6023      	str	r3, [r4, #0]
 80140ca:	bd38      	pop	{r3, r4, r5, pc}
 80140cc:	24008474 	.word	0x24008474

080140d0 <abort>:
 80140d0:	b508      	push	{r3, lr}
 80140d2:	2006      	movs	r0, #6
 80140d4:	f000 f8d8 	bl	8014288 <raise>
 80140d8:	2001      	movs	r0, #1
 80140da:	f7ec fcc7 	bl	8000a6c <_exit>
	...

080140e0 <_free_r>:
 80140e0:	b538      	push	{r3, r4, r5, lr}
 80140e2:	4605      	mov	r5, r0
 80140e4:	2900      	cmp	r1, #0
 80140e6:	d041      	beq.n	801416c <_free_r+0x8c>
 80140e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140ec:	1f0c      	subs	r4, r1, #4
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	bfb8      	it	lt
 80140f2:	18e4      	addlt	r4, r4, r3
 80140f4:	f7ff fbae 	bl	8013854 <__malloc_lock>
 80140f8:	4a1d      	ldr	r2, [pc, #116]	@ (8014170 <_free_r+0x90>)
 80140fa:	6813      	ldr	r3, [r2, #0]
 80140fc:	b933      	cbnz	r3, 801410c <_free_r+0x2c>
 80140fe:	6063      	str	r3, [r4, #4]
 8014100:	6014      	str	r4, [r2, #0]
 8014102:	4628      	mov	r0, r5
 8014104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014108:	f7ff bbaa 	b.w	8013860 <__malloc_unlock>
 801410c:	42a3      	cmp	r3, r4
 801410e:	d908      	bls.n	8014122 <_free_r+0x42>
 8014110:	6820      	ldr	r0, [r4, #0]
 8014112:	1821      	adds	r1, r4, r0
 8014114:	428b      	cmp	r3, r1
 8014116:	bf01      	itttt	eq
 8014118:	6819      	ldreq	r1, [r3, #0]
 801411a:	685b      	ldreq	r3, [r3, #4]
 801411c:	1809      	addeq	r1, r1, r0
 801411e:	6021      	streq	r1, [r4, #0]
 8014120:	e7ed      	b.n	80140fe <_free_r+0x1e>
 8014122:	461a      	mov	r2, r3
 8014124:	685b      	ldr	r3, [r3, #4]
 8014126:	b10b      	cbz	r3, 801412c <_free_r+0x4c>
 8014128:	42a3      	cmp	r3, r4
 801412a:	d9fa      	bls.n	8014122 <_free_r+0x42>
 801412c:	6811      	ldr	r1, [r2, #0]
 801412e:	1850      	adds	r0, r2, r1
 8014130:	42a0      	cmp	r0, r4
 8014132:	d10b      	bne.n	801414c <_free_r+0x6c>
 8014134:	6820      	ldr	r0, [r4, #0]
 8014136:	4401      	add	r1, r0
 8014138:	1850      	adds	r0, r2, r1
 801413a:	4283      	cmp	r3, r0
 801413c:	6011      	str	r1, [r2, #0]
 801413e:	d1e0      	bne.n	8014102 <_free_r+0x22>
 8014140:	6818      	ldr	r0, [r3, #0]
 8014142:	685b      	ldr	r3, [r3, #4]
 8014144:	6053      	str	r3, [r2, #4]
 8014146:	4408      	add	r0, r1
 8014148:	6010      	str	r0, [r2, #0]
 801414a:	e7da      	b.n	8014102 <_free_r+0x22>
 801414c:	d902      	bls.n	8014154 <_free_r+0x74>
 801414e:	230c      	movs	r3, #12
 8014150:	602b      	str	r3, [r5, #0]
 8014152:	e7d6      	b.n	8014102 <_free_r+0x22>
 8014154:	6820      	ldr	r0, [r4, #0]
 8014156:	1821      	adds	r1, r4, r0
 8014158:	428b      	cmp	r3, r1
 801415a:	bf04      	itt	eq
 801415c:	6819      	ldreq	r1, [r3, #0]
 801415e:	685b      	ldreq	r3, [r3, #4]
 8014160:	6063      	str	r3, [r4, #4]
 8014162:	bf04      	itt	eq
 8014164:	1809      	addeq	r1, r1, r0
 8014166:	6021      	streq	r1, [r4, #0]
 8014168:	6054      	str	r4, [r2, #4]
 801416a:	e7ca      	b.n	8014102 <_free_r+0x22>
 801416c:	bd38      	pop	{r3, r4, r5, pc}
 801416e:	bf00      	nop
 8014170:	24008630 	.word	0x24008630

08014174 <__swhatbuf_r>:
 8014174:	b570      	push	{r4, r5, r6, lr}
 8014176:	460c      	mov	r4, r1
 8014178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801417c:	2900      	cmp	r1, #0
 801417e:	b096      	sub	sp, #88	@ 0x58
 8014180:	4615      	mov	r5, r2
 8014182:	461e      	mov	r6, r3
 8014184:	da0d      	bge.n	80141a2 <__swhatbuf_r+0x2e>
 8014186:	89a3      	ldrh	r3, [r4, #12]
 8014188:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801418c:	f04f 0100 	mov.w	r1, #0
 8014190:	bf14      	ite	ne
 8014192:	2340      	movne	r3, #64	@ 0x40
 8014194:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014198:	2000      	movs	r0, #0
 801419a:	6031      	str	r1, [r6, #0]
 801419c:	602b      	str	r3, [r5, #0]
 801419e:	b016      	add	sp, #88	@ 0x58
 80141a0:	bd70      	pop	{r4, r5, r6, pc}
 80141a2:	466a      	mov	r2, sp
 80141a4:	f000 f878 	bl	8014298 <_fstat_r>
 80141a8:	2800      	cmp	r0, #0
 80141aa:	dbec      	blt.n	8014186 <__swhatbuf_r+0x12>
 80141ac:	9901      	ldr	r1, [sp, #4]
 80141ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80141b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80141b6:	4259      	negs	r1, r3
 80141b8:	4159      	adcs	r1, r3
 80141ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80141be:	e7eb      	b.n	8014198 <__swhatbuf_r+0x24>

080141c0 <__smakebuf_r>:
 80141c0:	898b      	ldrh	r3, [r1, #12]
 80141c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141c4:	079d      	lsls	r5, r3, #30
 80141c6:	4606      	mov	r6, r0
 80141c8:	460c      	mov	r4, r1
 80141ca:	d507      	bpl.n	80141dc <__smakebuf_r+0x1c>
 80141cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80141d0:	6023      	str	r3, [r4, #0]
 80141d2:	6123      	str	r3, [r4, #16]
 80141d4:	2301      	movs	r3, #1
 80141d6:	6163      	str	r3, [r4, #20]
 80141d8:	b003      	add	sp, #12
 80141da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141dc:	ab01      	add	r3, sp, #4
 80141de:	466a      	mov	r2, sp
 80141e0:	f7ff ffc8 	bl	8014174 <__swhatbuf_r>
 80141e4:	9f00      	ldr	r7, [sp, #0]
 80141e6:	4605      	mov	r5, r0
 80141e8:	4639      	mov	r1, r7
 80141ea:	4630      	mov	r0, r6
 80141ec:	f7ff fab2 	bl	8013754 <_malloc_r>
 80141f0:	b948      	cbnz	r0, 8014206 <__smakebuf_r+0x46>
 80141f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141f6:	059a      	lsls	r2, r3, #22
 80141f8:	d4ee      	bmi.n	80141d8 <__smakebuf_r+0x18>
 80141fa:	f023 0303 	bic.w	r3, r3, #3
 80141fe:	f043 0302 	orr.w	r3, r3, #2
 8014202:	81a3      	strh	r3, [r4, #12]
 8014204:	e7e2      	b.n	80141cc <__smakebuf_r+0xc>
 8014206:	89a3      	ldrh	r3, [r4, #12]
 8014208:	6020      	str	r0, [r4, #0]
 801420a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801420e:	81a3      	strh	r3, [r4, #12]
 8014210:	9b01      	ldr	r3, [sp, #4]
 8014212:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014216:	b15b      	cbz	r3, 8014230 <__smakebuf_r+0x70>
 8014218:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801421c:	4630      	mov	r0, r6
 801421e:	f000 f84d 	bl	80142bc <_isatty_r>
 8014222:	b128      	cbz	r0, 8014230 <__smakebuf_r+0x70>
 8014224:	89a3      	ldrh	r3, [r4, #12]
 8014226:	f023 0303 	bic.w	r3, r3, #3
 801422a:	f043 0301 	orr.w	r3, r3, #1
 801422e:	81a3      	strh	r3, [r4, #12]
 8014230:	89a3      	ldrh	r3, [r4, #12]
 8014232:	431d      	orrs	r5, r3
 8014234:	81a5      	strh	r5, [r4, #12]
 8014236:	e7cf      	b.n	80141d8 <__smakebuf_r+0x18>

08014238 <_raise_r>:
 8014238:	291f      	cmp	r1, #31
 801423a:	b538      	push	{r3, r4, r5, lr}
 801423c:	4605      	mov	r5, r0
 801423e:	460c      	mov	r4, r1
 8014240:	d904      	bls.n	801424c <_raise_r+0x14>
 8014242:	2316      	movs	r3, #22
 8014244:	6003      	str	r3, [r0, #0]
 8014246:	f04f 30ff 	mov.w	r0, #4294967295
 801424a:	bd38      	pop	{r3, r4, r5, pc}
 801424c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801424e:	b112      	cbz	r2, 8014256 <_raise_r+0x1e>
 8014250:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014254:	b94b      	cbnz	r3, 801426a <_raise_r+0x32>
 8014256:	4628      	mov	r0, r5
 8014258:	f000 f852 	bl	8014300 <_getpid_r>
 801425c:	4622      	mov	r2, r4
 801425e:	4601      	mov	r1, r0
 8014260:	4628      	mov	r0, r5
 8014262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014266:	f000 b839 	b.w	80142dc <_kill_r>
 801426a:	2b01      	cmp	r3, #1
 801426c:	d00a      	beq.n	8014284 <_raise_r+0x4c>
 801426e:	1c59      	adds	r1, r3, #1
 8014270:	d103      	bne.n	801427a <_raise_r+0x42>
 8014272:	2316      	movs	r3, #22
 8014274:	6003      	str	r3, [r0, #0]
 8014276:	2001      	movs	r0, #1
 8014278:	e7e7      	b.n	801424a <_raise_r+0x12>
 801427a:	2100      	movs	r1, #0
 801427c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014280:	4620      	mov	r0, r4
 8014282:	4798      	blx	r3
 8014284:	2000      	movs	r0, #0
 8014286:	e7e0      	b.n	801424a <_raise_r+0x12>

08014288 <raise>:
 8014288:	4b02      	ldr	r3, [pc, #8]	@ (8014294 <raise+0xc>)
 801428a:	4601      	mov	r1, r0
 801428c:	6818      	ldr	r0, [r3, #0]
 801428e:	f7ff bfd3 	b.w	8014238 <_raise_r>
 8014292:	bf00      	nop
 8014294:	24000040 	.word	0x24000040

08014298 <_fstat_r>:
 8014298:	b538      	push	{r3, r4, r5, lr}
 801429a:	4d07      	ldr	r5, [pc, #28]	@ (80142b8 <_fstat_r+0x20>)
 801429c:	2300      	movs	r3, #0
 801429e:	4604      	mov	r4, r0
 80142a0:	4608      	mov	r0, r1
 80142a2:	4611      	mov	r1, r2
 80142a4:	602b      	str	r3, [r5, #0]
 80142a6:	f7ec fc31 	bl	8000b0c <_fstat>
 80142aa:	1c43      	adds	r3, r0, #1
 80142ac:	d102      	bne.n	80142b4 <_fstat_r+0x1c>
 80142ae:	682b      	ldr	r3, [r5, #0]
 80142b0:	b103      	cbz	r3, 80142b4 <_fstat_r+0x1c>
 80142b2:	6023      	str	r3, [r4, #0]
 80142b4:	bd38      	pop	{r3, r4, r5, pc}
 80142b6:	bf00      	nop
 80142b8:	24008474 	.word	0x24008474

080142bc <_isatty_r>:
 80142bc:	b538      	push	{r3, r4, r5, lr}
 80142be:	4d06      	ldr	r5, [pc, #24]	@ (80142d8 <_isatty_r+0x1c>)
 80142c0:	2300      	movs	r3, #0
 80142c2:	4604      	mov	r4, r0
 80142c4:	4608      	mov	r0, r1
 80142c6:	602b      	str	r3, [r5, #0]
 80142c8:	f7ec fc30 	bl	8000b2c <_isatty>
 80142cc:	1c43      	adds	r3, r0, #1
 80142ce:	d102      	bne.n	80142d6 <_isatty_r+0x1a>
 80142d0:	682b      	ldr	r3, [r5, #0]
 80142d2:	b103      	cbz	r3, 80142d6 <_isatty_r+0x1a>
 80142d4:	6023      	str	r3, [r4, #0]
 80142d6:	bd38      	pop	{r3, r4, r5, pc}
 80142d8:	24008474 	.word	0x24008474

080142dc <_kill_r>:
 80142dc:	b538      	push	{r3, r4, r5, lr}
 80142de:	4d07      	ldr	r5, [pc, #28]	@ (80142fc <_kill_r+0x20>)
 80142e0:	2300      	movs	r3, #0
 80142e2:	4604      	mov	r4, r0
 80142e4:	4608      	mov	r0, r1
 80142e6:	4611      	mov	r1, r2
 80142e8:	602b      	str	r3, [r5, #0]
 80142ea:	f7ec fbad 	bl	8000a48 <_kill>
 80142ee:	1c43      	adds	r3, r0, #1
 80142f0:	d102      	bne.n	80142f8 <_kill_r+0x1c>
 80142f2:	682b      	ldr	r3, [r5, #0]
 80142f4:	b103      	cbz	r3, 80142f8 <_kill_r+0x1c>
 80142f6:	6023      	str	r3, [r4, #0]
 80142f8:	bd38      	pop	{r3, r4, r5, pc}
 80142fa:	bf00      	nop
 80142fc:	24008474 	.word	0x24008474

08014300 <_getpid_r>:
 8014300:	f7ec bb9a 	b.w	8000a38 <_getpid>

08014304 <_init>:
 8014304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014306:	bf00      	nop
 8014308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801430a:	bc08      	pop	{r3}
 801430c:	469e      	mov	lr, r3
 801430e:	4770      	bx	lr

08014310 <_fini>:
 8014310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014312:	bf00      	nop
 8014314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014316:	bc08      	pop	{r3}
 8014318:	469e      	mov	lr, r3
 801431a:	4770      	bx	lr
